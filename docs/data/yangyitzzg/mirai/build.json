{
  "build": {
    "2021-01-30T12-34-55Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 25,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-01-28T03-51-32Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 25,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-02-09T13-58-27Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 30,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 31,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-01-30T13-58-26Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 30,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 31,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 50
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-02-27T06-44-46Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 30,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 31,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-04-05T14-41-26Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 30,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 31,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 62
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-05-31T08-14-51Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": null,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-05-31T08-20-09Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 57
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-06-19T15-58-27Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 57
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-07-28T03-45-43Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 51
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-04T15-43-09Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 45
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-18T09-12-50Z": [
      {
        "region": {
          "startLine": 8,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 45
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-18T17-29-37Z": [
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 45
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-18T18-06-35Z": [
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 45
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-21T18-59-29Z": [
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 45
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-22T15-54-27Z": [
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 56
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-19T16-30-16Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 227,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 228,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 405,
          "endColumn": 86
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 16,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 323,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 491,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 324,
          "startColumn": 5,
          "endLine": 486,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 16,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 220,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 323,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 221,
          "startColumn": 5,
          "endLine": 284,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 324,
          "startColumn": 5,
          "endLine": 486,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 285,
          "startColumn": 5,
          "endLine": 402,
          "endColumn": 84
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 227,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 228,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 7,
          "startColumn": 5,
          "endLine": 227,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 405,
          "endColumn": 86
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 228,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 295,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 69
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-12T11-31-28Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 491,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-28T04-36-02Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 491,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-28T04-36-55Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 491,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-28T04-39-53Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 491,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-28T05-48-56Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 247,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 248,
          "startColumn": 5,
          "endLine": 412,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-11-27T15-25-18Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 247,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 248,
          "startColumn": 5,
          "endLine": 412,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 247,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 247,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 248,
          "startColumn": 5,
          "endLine": 412,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 248,
          "startColumn": 5,
          "endLine": 412,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-02T01-34-02Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 247,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 248,
          "startColumn": 5,
          "endLine": 410,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-15T04-37-09Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 250,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 251,
          "startColumn": 5,
          "endLine": 416,
          "endColumn": 36
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-18T23-22-03Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 160,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 161,
          "startColumn": 5,
          "endLine": 251,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 252,
          "startColumn": 5,
          "endLine": 415,
          "endColumn": 77
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-20T23-56-20Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 160,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 161,
          "startColumn": 5,
          "endLine": 251,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 252,
          "startColumn": 5,
          "endLine": 415,
          "endColumn": 77
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-19T16-27-51Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 160,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 161,
          "startColumn": 5,
          "endLine": 251,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 252,
          "startColumn": 5,
          "endLine": 415,
          "endColumn": 77
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-15T13-58-57Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 160,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 161,
          "startColumn": 5,
          "endLine": 239,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 240,
          "startColumn": 5,
          "endLine": 403,
          "endColumn": 77
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-16T12-40-46Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 176,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-08-12T06-08-24Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 22
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ]
  },
  "metadata": {
    "2021-01-30T12-34-55Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 47,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: chmod +x gradlew\n        run: chmod +x gradlew\n      - name: Init gradle project\n        run: ./gradlew clean\n      - name: Build mirai-core series\n        run: ./gradlew assemble\n      - name: mirai-core Tests\n        run: ./gradlew check\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        uses: textbook/git-checkout-submodule-action@master\n        with:\n          remote: true\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: chmod +x gradlew\n        run: chmod +x gradlew\n      - name: Init gradle project\n        run: ./gradlew clean\n      - name: Build all\n        run: ./gradlew assemble\n      - name: All Tests\n        run: ./gradlew check\n"
    },
    "2021-01-28T03-51-32Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 6
      },
      "line_count": 42,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: chmod +x gradlew\n        run: chmod +x gradlew\n      - name: Init gradle project\n        run: ./gradlew clean\n      - name: Build mirai-core series\n        run: ./gradlew assemble\n      - name: mirai-core Tests\n        run: ./gradlew check\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: recursive\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: chmod +x gradlew\n        run: chmod +x gradlew\n      - name: Init gradle project\n        run: ./gradlew clean\n      - name: Build all\n        run: ./gradlew assemble\n      - name: All Tests\n        run: ./gradlew check\n"
    },
    "2021-02-09T13-58-27Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 54,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --scan\n\n      - name: mirai-core Tests\n        run: ./gradlew check --scan\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive --remote\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: ./gradlew check --scan\n"
    },
    "2021-01-30T13-58-26Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 54,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --info --stacktrace\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --info --stacktrace\n\n      - name: mirai-core Tests\n        run: ./gradlew check --info --stacktrace\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive --remote\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --info --stacktrace\n\n      - name: Build all\n        run: ./gradlew assemble --info --stacktrace\n\n      - name: All Tests\n        run: ./gradlew check --info --stacktrace\n"
    },
    "2021-02-27T06-44-46Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 54,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --scan\n\n      - name: mirai-core Tests\n        run: ./gradlew check --scan\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: ./gradlew check --scan\n"
    },
    "2021-04-05T14-41-26Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 54,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble -Pmirai.pkc.check.enable --scan\n\n      - name: mirai-core Tests\n        run: ./gradlew check -Pmirai.pkc.check.enable --scan\n\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble -Pmirai.pkc.check.enable --scan\n\n      - name: All Tests\n        run: ./gradlew check -Pmirai.pkc.check.enable --scan\n"
    },
    "2021-05-31T08-14-51Z": {
      "triggers": {},
      "num_jobs": 0,
      "steps_per_job": {},
      "line_count": 61,
      "workflow": null,
      "parse_error": "while scanning a simple key\n  in \"<unicode string>\", line 29, column 9:\n            ./gradlew check -Pmirai.pkc.chec ... \n            ^\ncould not find expected ':'\n  in \"<unicode string>\", line 30, column 9:\n            -Dmirai.debug.network.show.all.c ... \n            ^"
    },
    "2021-05-31T08-20-09Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 61,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble -Pmirai.pkc.check.enable --scan\n\n      - name: mirai-core Tests\n        run: >\n          ./gradlew check -Pmirai.pkc.check.enable --scan\n          -Dmirai.debug.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.debug.network.show.packet.details=true\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble -Pmirai.pkc.check.enable --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check -Pmirai.pkc.check.enable --scan\n          -Dmirai.debug.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.debug.network.show.packet.details=true"
    },
    "2021-06-19T15-58-27Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 61,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --scan\n\n      - name: mirai-core Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.debug.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.debug.network.show.packet.details=true\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.debug.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.debug.network.show.packet.details=true"
    },
    "2021-07-28T03-45-43Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 7
      },
      "line_count": 61,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --scan\n\n      - name: mirai-core Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true"
    },
    "2021-12-04T15-43-09Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-mirai-core": 6,
        "build-all": 8
      },
      "line_count": 64,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-core:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build mirai-core series\n        run: ./gradlew assemble --scan\n\n      - name: mirai-core Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true\n  build-all:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n"
    },
    "2021-12-18T09-12-50Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 8
      },
      "line_count": 38,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n"
    },
    "2021-12-18T17-29-37Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-mirai": 8
      },
      "line_count": 43,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n          - macos-11\n          - ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          -Dmirai.network.show.all.components=true\n          -Dkotlinx.coroutines.debug=on\n          -Dmirai.network.show.packet.details=true\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n"
    },
    "2021-12-18T18-06-35Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-mirai": 8
      },
      "line_count": 43,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n          - macos-11\n          - ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          \"-Dmirai.network.show.all.components=true\"\n          \"-Dkotlinx.coroutines.debug=on\"\n          \"-Dmirai.network.show.packet.details=true\"\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n"
    },
    "2021-12-21T18-59-29Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-mirai": 8
      },
      "line_count": 43,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # mirai build requires a minimum system memory of 8 GB, while Windows and Ubuntu VMs provides only 7 GB. See https://github.com/mamoe/mirai/actions/runs/1608172113 for details.\n#          - windows-latest\n          - macos-11\n#          - ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          \"-Dmirai.network.show.all.components=true\"\n          \"-Dkotlinx.coroutines.debug=on\"\n          \"-Dmirai.network.show.packet.details=true\"\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n"
    },
    "2022-03-22T15-54-27Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-mirai": 9
      },
      "line_count": 46,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # mirai build requires a minimum system memory of 8 GB, while Windows and Ubuntu VMs provides only 7 GB. See https://github.com/mamoe/mirai/actions/runs/1608172113 for details.\n#          - windows-latest\n          - macos-11\n#          - ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout submodules\n        run: git submodule update --init --recursive\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n\n      - name: chmod -R 777 *\n        run: chmod -R 777 *\n\n      - name: Init gradle project\n        run: ./gradlew clean --scan\n\n      - name: Build all\n        run: ./gradlew assemble --scan\n\n      - name: All Tests\n        run: >\n          ./gradlew check --scan\n          \"-Dmirai.network.show.all.components=true\"\n          \"-Dkotlinx.coroutines.debug=on\"\n          \"-Dmirai.network.show.packet.details=true\"\n\n      - name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n\n      - name: Upload build artifacts\n        uses: ./.github/actions/upload-build-artifacts\n"
    },
    "2022-07-19T16-30-16Z": {
      "triggers": {
        "push": {},
        "pull_request": {}
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 44,
        "build-mirai-all": 11,
        "build-mirai-core-native": 17
      },
      "line_count": 414,
      "workflow": "name: Build\n\non: [ push, pull_request ]\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      # Build modules separately to save memory\n\n      - name: \"Compile mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:compileKotlinJvm :mirai-core-utils:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:jvmTest :mirai-core-utils:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-utils Android API Level\"\n        run: ./gradlew :mirai-core-utils:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core-api\"\n        run: ./gradlew :mirai-core-api:compileKotlinJvm :mirai-core-api:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api\"\n        run: ./gradlew :mirai-core-api:jvmTest :mirai-core-api:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api JVM ABI\"\n        run: ./gradlew :mirai-core-api:apiCheckAll ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api Android API Level\"\n        run: ./gradlew :mirai-core-api:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core\"\n        run: ./gradlew :mirai-core:compileKotlinJvm :mirai-core:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core\"\n        run: ./gradlew :mirai-core:jvmTest :mirai-core:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core Android API Level\"\n        run: ./gradlew :mirai-core:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: \"Build mirai-core-all\"\n        run: ./gradlew :mirai-core-all:shadowJar ${{ env.gradleArgs }}\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n\n      # Console and tools\n\n\n      - name: \"Compile mirai-console\"\n        run: ./gradlew :mirai-console:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Check JVM ABI\"\n        run: ./gradlew :mirai-console:apiCheckAll ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console integration-test\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console integration-test\"\n        run: ./gradlew :mirai-console.integration-test:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:assemble ${{ env.gradleArgs }}\n\n      - name: \"Build mirai-console-intellij plugin\"\n        run: ./gradlew :mirai-console-intellij:buildPlugin ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:assemble\n          :mirai-logging-slf4j:assemble\n          :mirai-logging-slf4j-logback:assemble\n          :mirai-logging-slf4j-simple:assemble\n          ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:check\n          :mirai-logging-slf4j:check\n          :mirai-logging-slf4j-logback:check\n          :mirai-logging-slf4j-simple:check\n          ${{ env.gradleArgs }}\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiLocalArtifacts ${{ env.gradleArgs }}\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule\n\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          - macos-12\n          - macos-11\n        include:\n        - os: windows-2022\n          targetName: mingwX64\n        - os: ubuntu-20.04\n          targetName: linuxX64\n        - os: ubuntu-18.04\n          targetName: linuxX64\n        - os: macos-12\n          targetName: macosX64\n        - os: macos-11\n          targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiLocalArtifacts ${{ env.gradleArgs }}\n\n      - name: Check Publication\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n"
    },
    "2022-08-12T11-31-28Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 44,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 492,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n#          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      # Build modules separately to save memory\n\n      - name: \"Compile mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:compileKotlinJvm :mirai-core-utils:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:jvmTest :mirai-core-utils:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-utils Android API Level\"\n        run: ./gradlew :mirai-core-utils:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core-api\"\n        run: ./gradlew :mirai-core-api:compileKotlinJvm :mirai-core-api:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api\"\n        run: ./gradlew :mirai-core-api:jvmTest :mirai-core-api:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api JVM ABI\"\n        run: ./gradlew :mirai-core-api:apiCheckAll ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api Android API Level\"\n        run: ./gradlew :mirai-core-api:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core\"\n        run: ./gradlew :mirai-core:compileKotlinJvm :mirai-core:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core\"\n        run: ./gradlew :mirai-core:jvmTest :mirai-core:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core Android API Level\"\n        run: ./gradlew :mirai-core:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: \"Build mirai-core-all\"\n        run: ./gradlew :mirai-core-all:shadowJar ${{ env.gradleArgs }}\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n\n      # Console and tools\n\n\n      - name: \"Compile mirai-console\"\n        run: ./gradlew :mirai-console:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Check JVM ABI\"\n        run: ./gradlew :mirai-console:apiCheckAll ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console integration-test\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console integration-test\"\n        run: ./gradlew :mirai-console.integration-test:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:assemble ${{ env.gradleArgs }}\n\n      - name: \"Build mirai-console-intellij plugin\"\n        run: ./gradlew :mirai-console-intellij:buildPlugin ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:assemble\n          :mirai-logging-slf4j:assemble\n          :mirai-logging-slf4j-logback:assemble\n          :mirai-logging-slf4j-simple:assemble\n          ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:check\n          :mirai-logging-slf4j:check\n          :mirai-logging-slf4j-logback:check\n          :mirai-logging-slf4j-simple:check\n          ${{ env.gradleArgs }}\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          - macos-12\n          - macos-11\n        include:\n        - os: windows-2022\n          targetName: mingwX64\n        - os: ubuntu-20.04\n          targetName: linuxX64\n        - os: ubuntu-18.04\n          targetName: linuxX64\n        - os: macos-12\n          targetName: macosX64\n        - os: macos-11\n          targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-08-28T04-36-02Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 44,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 492,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n#          - windows-2022\n          - windows-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      # Build modules separately to save memory\n\n      - name: \"Compile mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:compileKotlinJvm :mirai-core-utils:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:jvmTest :mirai-core-utils:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-utils Android API Level\"\n        run: ./gradlew :mirai-core-utils:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core-api\"\n        run: ./gradlew :mirai-core-api:compileKotlinJvm :mirai-core-api:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api\"\n        run: ./gradlew :mirai-core-api:jvmTest :mirai-core-api:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api JVM ABI\"\n        run: ./gradlew :mirai-core-api:apiCheckAll ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api Android API Level\"\n        run: ./gradlew :mirai-core-api:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core\"\n        run: ./gradlew :mirai-core:compileKotlinJvm :mirai-core:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core\"\n        run: ./gradlew :mirai-core:jvmTest :mirai-core:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core Android API Level\"\n        run: ./gradlew :mirai-core:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: \"Build mirai-core-all\"\n        run: ./gradlew :mirai-core-all:shadowJar ${{ env.gradleArgs }}\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n\n      # Console and tools\n\n\n      - name: \"Compile mirai-console\"\n        run: ./gradlew :mirai-console:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Check JVM ABI\"\n        run: ./gradlew :mirai-console:apiCheckAll ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console integration-test\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console integration-test\"\n        run: ./gradlew :mirai-console.integration-test:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:assemble ${{ env.gradleArgs }}\n\n      - name: \"Build mirai-console-intellij plugin\"\n        run: ./gradlew :mirai-console-intellij:buildPlugin ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:assemble\n          :mirai-logging-slf4j:assemble\n          :mirai-logging-slf4j-logback:assemble\n          :mirai-logging-slf4j-simple:assemble\n          ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:check\n          :mirai-logging-slf4j:check\n          :mirai-logging-slf4j-logback:check\n          :mirai-logging-slf4j-simple:check\n          ${{ env.gradleArgs }}\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          - macos-12\n          - macos-11\n        include:\n        - os: windows-2022\n          targetName: mingwX64\n        - os: ubuntu-20.04\n          targetName: linuxX64\n        - os: ubuntu-18.04\n          targetName: linuxX64\n        - os: macos-12\n          targetName: macosX64\n        - os: macos-11\n          targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-08-28T04-36-55Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 44,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 492,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          # - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      # Build modules separately to save memory\n\n      - name: \"Compile mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:compileKotlinJvm :mirai-core-utils:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:jvmTest :mirai-core-utils:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-utils Android API Level\"\n        run: ./gradlew :mirai-core-utils:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core-api\"\n        run: ./gradlew :mirai-core-api:compileKotlinJvm :mirai-core-api:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api\"\n        run: ./gradlew :mirai-core-api:jvmTest :mirai-core-api:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api JVM ABI\"\n        run: ./gradlew :mirai-core-api:apiCheckAll ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api Android API Level\"\n        run: ./gradlew :mirai-core-api:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core\"\n        run: ./gradlew :mirai-core:compileKotlinJvm :mirai-core:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core\"\n        run: ./gradlew :mirai-core:jvmTest :mirai-core:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core Android API Level\"\n        run: ./gradlew :mirai-core:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: \"Build mirai-core-all\"\n        run: ./gradlew :mirai-core-all:shadowJar ${{ env.gradleArgs }}\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n\n      # Console and tools\n\n\n      - name: \"Compile mirai-console\"\n        run: ./gradlew :mirai-console:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Check JVM ABI\"\n        run: ./gradlew :mirai-console:apiCheckAll ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console integration-test\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console integration-test\"\n        run: ./gradlew :mirai-console.integration-test:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:assemble ${{ env.gradleArgs }}\n\n      - name: \"Build mirai-console-intellij plugin\"\n        run: ./gradlew :mirai-console-intellij:buildPlugin ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:assemble\n          :mirai-logging-slf4j:assemble\n          :mirai-logging-slf4j-logback:assemble\n          :mirai-logging-slf4j-simple:assemble\n          ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:check\n          :mirai-logging-slf4j:check\n          :mirai-logging-slf4j-logback:check\n          :mirai-logging-slf4j-simple:check\n          ${{ env.gradleArgs }}\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          - macos-12\n          - macos-11\n        include:\n        - os: windows-2022\n          targetName: mingwX64\n        - os: ubuntu-20.04\n          targetName: linuxX64\n        - os: ubuntu-18.04\n          targetName: linuxX64\n        - os: macos-12\n          targetName: macosX64\n        - os: macos-11\n          targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-08-28T04-39-53Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 44,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 492,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          # - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      # Build modules separately to save memory\n\n      - name: \"Compile mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:compileKotlinJvm :mirai-core-utils:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-utils\"\n        run: ./gradlew :mirai-core-utils:jvmTest :mirai-core-utils:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-utils Android API Level\"\n        run: ./gradlew :mirai-core-utils:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core-api\"\n        run: ./gradlew :mirai-core-api:compileKotlinJvm :mirai-core-api:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api\"\n        run: ./gradlew :mirai-core-api:jvmTest :mirai-core-api:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api JVM ABI\"\n        run: ./gradlew :mirai-core-api:apiCheckAll ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core-api Android API Level\"\n        run: ./gradlew :mirai-core-api:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-core\"\n        run: ./gradlew :mirai-core:compileKotlinJvm :mirai-core:compileKotlinAndroid ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core\"\n        run: ./gradlew :mirai-core:jvmTest :mirai-core:androidTest ${{ env.gradleArgs }}\n\n      - name: \"Check mirai-core Android API Level\"\n        run: ./gradlew :mirai-core:checkAndroidApiLevel ${{ env.gradleArgs }}\n\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: \"Build mirai-core-all\"\n        run: ./gradlew :mirai-core-all:shadowJar ${{ env.gradleArgs }}\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n\n      # Console and tools\n\n\n      - name: \"Compile mirai-console\"\n        run: ./gradlew :mirai-console:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Check JVM ABI\"\n        run: ./gradlew :mirai-console:apiCheckAll ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console integration-test\"\n        run: ./gradlew :mirai-console:check ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console integration-test\"\n        run: ./gradlew :mirai-console.integration-test:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-terminal\"\n        run: ./gradlew :mirai-console-terminal:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:assemble ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-gradle\"\n        run: ./gradlew :mirai-console-gradle:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:assemble ${{ env.gradleArgs }}\n\n      - name: \"Build mirai-console-intellij plugin\"\n        run: ./gradlew :mirai-console-intellij:buildPlugin ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-console-intellij\"\n        run: ./gradlew :mirai-console-intellij:check ${{ env.gradleArgs }}\n\n\n      - name: \"Compile mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:assemble\n          :mirai-logging-slf4j:assemble\n          :mirai-logging-slf4j-logback:assemble\n          :mirai-logging-slf4j-simple:assemble\n          ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-logging\"\n        run:\n          ./gradlew\n          :mirai-logging-log4j2:check\n          :mirai-logging-slf4j:check\n          :mirai-logging-slf4j-logback:check\n          :mirai-logging-slf4j-simple:check\n          ${{ env.gradleArgs }}\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          # - macos-12\n          - macos-11\n        include:\n        - os: windows-2022\n          targetName: mingwX64\n        - os: ubuntu-20.04\n          targetName: linuxX64\n        - os: ubuntu-18.04\n          targetName: linuxX64\n        # - os: macos-12\n        #   targetName: macosX64\n        - os: macos-11\n          targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-08-28T05-48-56Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 413,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          - ubuntu-18.04\n          # - macos-12\n          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          - os: ubuntu-18.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n          - os: macos-11\n            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-11-27T15-25-18Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 413,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n#          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          - os: ubuntu-18.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-12-02T01-34-02Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 13,
        "build-mirai-core-native": 21
      },
      "line_count": 411,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n#          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2022-12-15T04-37-09Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 14,
        "build-mirai-core-native": 22
      },
      "line_count": 417,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n#          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev\n\n"
    },
    "2023-02-18T23-22-03Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 14,
        "build-mirai-core-native": 22
      },
      "line_count": 416,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n        #          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n"
    },
    "2023-02-20T23-56-20Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 14,
        "build-mirai-core-native": 22
      },
      "line_count": 416,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n        #          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n"
    },
    "2023-03-19T16-27-51Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 14,
        "build-mirai-core-native": 22
      },
      "line_count": 416,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n        #          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n"
    },
    "2023-04-15T13-58-57Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-mirai-jvm": 23,
        "build-mirai-all": 13,
        "build-mirai-core-native": 22
      },
      "line_count": 404,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build-mirai-jvm:\n    name: \"JVM (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan \"-Dmirai.target=jvm;android;!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx6000m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n\n  build-mirai-all:\n    name: \"Everything (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n  build-mirai-core-native:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n          #          - ubuntu-18.04\n          # - macos-12\n        #          - macos-11\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n          - os: ubuntu-20.04\n            targetName: linuxX64\n          # - os: macos-12\n          #   targetName: macosX64\n    #          - os: macos-11\n    #            targetName: macosX64\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'false'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Test mirai-core-utils for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core-api for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: \"Test mirai-core for ${{ matrix.os }}\"\n        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}\n\n      # Publish native snapshots. Other artifacts are published in build-mirai-all\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish MingwX64 Snapshots\n        if: ${{ github.event.pusher && env.isWindows == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishMingwX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish LinuxX64 Snapshots\n        if: ${{ github.event.pusher && env.isUbuntu == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishLinuxX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      - name: Publish macOSX64 Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishMacosX64PublicationToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n"
    },
    "2023-06-16T12-40-46Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 26
      },
      "line_count": 176,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build:\n    name: \"Build (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Snapshots\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      # Upload\n\n      - name: Upload mirai-core-utils\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-utils\n          path: mirai-core-utils/build/libs\n\n      - name: Upload mirai-core-api\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-api\n          path: mirai-core-api/build/libs\n\n      - name: Upload mirai-core\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core\n          path: mirai-core/build/libs\n\n      - name: Upload mirai-core-all\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-core-all\n          path: mirai-core-all/build/libs\n\n      - name: Upload mirai-console\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console\n          path: mirai-console/backend/mirai-console/build/libs\n\n      - name: Upload mirai-console-terminal\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-terminal\n          path: mirai-console/frontend/mirai-console-terminal/build/libs\n\n      - name: Upload mirai-console-compiler-annotations\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-annotations\n          path: mirai-console/tools/mirai-console-compiler-annotations/build/libs\n\n      - name: Upload mirai-console-compiler-common\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-compiler-common\n          path: mirai-console/tools/mirai-console-compiler-common/build/libs\n\n      - name: Upload mirai-console-intellij\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-console-intellij\n          path: mirai-console/tools/intelli-plugin/build/distribution\n\n      - name: Upload mirai-logging-log4j2\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-log4j2\n          path: logging/mirai-logging-log4j2/build/libs\n\n      - name: Upload mirai-logging-slf4j\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j\n          path: logging/mirai-logging-slf4j/build/libs\n\n      - name: Upload mirai-logging-slf4j-logback\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-logback\n          path: logging/mirai-logging-slf4j-logback/build/libs\n\n      - name: Upload mirai-logging-slf4j-simple\n        uses: actions/upload-artifact@v3\n        with:\n          name: mirai-logging-slf4j-simple\n          path: logging/mirai-logging-slf4j-simple/build/libs\n"
    },
    "2023-08-12T06-08-24Z": {
      "triggers": {
        "push": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "docs/**",
            "mirai-console/docs/**",
            "**/*.md"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: Build\n\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - 'mirai-console/docs/**'\n      - '**/*.md'\n\njobs:\n  build:\n    name: \"Build (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: # You must use macos-12. Only macos-12 get 14GB memory while others have only 7GB.\n          #          - windows-2022\n          - macos-12\n    env:\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=18432 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher && vars.RUN_MIRAI_SNAPSHOTS == 'true'\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          MIRAI_BUILD_INDEX_AUTH_USERNAME: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_USERNAME }}\n          MIRAI_BUILD_INDEX_AUTH_PASSWORD: ${{ secrets.MIRAI_BUILD_INDEX_AUTH_PASSWORD }}\n\n      - name: \"Assemble\"\n        run: ./gradlew assemble ${{ env.gradleArgs }}\n\n      - name: Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"\n\n      - name: \"Check\"\n        run: ./gradlew check ${{ env.gradleArgs }}\n\n      # Snapshots\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Ensure KDoc valid\n        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}\n\n      - name: Release RAM\n        run: node ci-release-helper/scripts/kill-java.js\n\n      - name: Publish Snapshots\n        if: ${{ github.event.pusher && env.isMac == 'true' && vars.RUN_MIRAI_SNAPSHOTS == 'true' }}\n        run: ./gradlew publishAllPublicationsToMiraiRepoRepository ${{ env.gradleArgs }}\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n\n      # Upload\n\n      - name: Publish MavenLocal\n        run: ./gradlew publishToMavenLocal ${{ env.gradleArgs }}\n\n      - name: Upload MavenLocal\n        uses: actions/upload-artifact@v3\n        with:\n          name: maven-cache\n          path: ~/.m2"
    }
  }
}