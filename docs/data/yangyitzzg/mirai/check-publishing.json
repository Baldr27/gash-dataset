{
  "check-publishing": {
    "2022-11-27T15-25-18Z": [
      {
        "region": {
          "startLine": 24,
          "startColumn": 5,
          "endLine": 88,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 89,
          "startColumn": 5,
          "endLine": 211,
          "endColumn": 152
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 24,
          "startColumn": 5,
          "endLine": 88,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 89,
          "startColumn": 5,
          "endLine": 211,
          "endColumn": 152
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 103
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 24,
          "startColumn": 5,
          "endLine": 88,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 89,
          "startColumn": 5,
          "endLine": 210,
          "endColumn": 152
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-17T22-40-08Z": [
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-20T23-56-20Z": [
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-01T10-09-44Z": [
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-16T12-40-46Z": [
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 161
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ]
  },
  "metadata": {
    "2022-11-27T15-25-18Z": {
      "triggers": {
        "push": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        },
        "pull_request": {
          "paths-ignore": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "jvm-and-macos": 9,
        "native-platforms": 15
      },
      "line_count": 210,
      "workflow": "# \u5f53\u4fee\u6539\u6784\u5efa\u811a\u672c (\u5305\u62ec\u4fee\u6539\u4f9d\u8d56\u7248\u672c) \u65f6\u68c0\u67e5\u914d\u7f6e\u662f\u5426\u80fd\u6b63\u5e38\u53d1\u7248\n# \u53d1\u7248\u68c0\u67e5\u975e\u5e38\u6162, \u56e0\u6b64\u4e0d\u5728 build.yml \u505a\n\nname: Check Publishing\n\n\non:\n  push:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n  pull_request:\n    paths-ignore:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n\n\n# \u4ece build.yml \u590d\u5236\u7684\n\njobs:\n  jvm-and-macos:\n    name: \"JVM+macOS\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-12\n    env:\n      enableLocalPublishingTest: 'true'\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking for macOS\n\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n\n\n      - name: Build and Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiLocalArtifacts ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"  \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\" \"-Dmirai.deps.test.must.run=true\"\n\n\n  native-platforms:\n    name: \"Native (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-2022\n          - ubuntu-20.04\n        include:\n          - os: windows-2022\n            targetName: mingwX64\n            parallelCompilation: false\n          - os: ubuntu-20.04\n            targetName: linuxX64\n            parallelCompilation: false\n          - os: macos-12\n            targetName: macosX64\n            parallelCompilation: true # macOS machine has 14G\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      enableLocalPublishingTest: 'true'\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};!other\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - run: >\n          ./gradlew updateSnapshotVersion ${{ env.gradleArgs }}\n        if: github.event.pusher\n        env:\n          MIRAI_IS_SNAPSHOTS_PUBLISHING: true\n          SNAPSHOTS_PUBLISHING_USER: ${{ secrets.SNAPSHOTS_PUBLISHING_USER }}\n          SNAPSHOTS_PUBLISHING_KEY: ${{ secrets.SNAPSHOTS_PUBLISHING_KEY }}\n          SNAPSHOTS_PUBLISHING_URL: ${{ secrets.SNAPSHOTS_PUBLISHING_URL }}\n          CURRENT_BRANCH_NAME: dev # always use -dev for now\n\n\n\n      - name: Build and Publish Local Artifacts\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:publishMiraiLocalArtifacts ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\"  \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        if: ${{ env.enableLocalPublishingTest == 'true' }}\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.build.project.version=2.99.0-deps-test\" \"-Dmirai.deps.test.must.run=true\"\n"
    },
    "2022-12-17T22-40-08Z": {
      "triggers": {
        "push": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        },
        "pull_request": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "check-publishing": 15
      },
      "line_count": 132,
      "workflow": "# \u5f53\u4fee\u6539\u6784\u5efa\u811a\u672c (\u5305\u62ec\u4fee\u6539\u4f9d\u8d56\u7248\u672c) \u65f6\u68c0\u67e5\u914d\u7f6e\u662f\u5426\u80fd\u6b63\u5e38\u53d1\u7248\n# \u53d1\u7248\u68c0\u67e5\u975e\u5e38\u6162, \u56e0\u6b64\u4e0d\u5728 build.yml \u505a\n\nname: Check Publishing\n\n\non:\n  push:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n  pull_request:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n\njobs:\n\n  check-publishing:\n    name: \"Check Publishing (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n#          - windows-2022\n          - ubuntu-20.04\n          - macos-12\n        include:\n          #          - os: windows-2022\n          #            targetName: mingwX64\n          #            parallelCompilation: false\n          - os: ubuntu-20.04\n            targetName: linuxX64\n            parallelCompilation: false\n          - os: macos-12\n            targetName: macosX64\n            parallelCompilation: true # macOS machine has 14G\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};~others\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v2\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: Prepare deps test build\n        run: ./gradlew :mirai-deps-test:updateProjectVersionForLocalDepsTest ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Build and Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.deps.test.must.run=true\" \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n"
    },
    "2023-02-20T23-56-20Z": {
      "triggers": {
        "push": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        },
        "pull_request": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "check-publishing": 15
      },
      "line_count": 132,
      "workflow": "# \u5f53\u4fee\u6539\u6784\u5efa\u811a\u672c (\u5305\u62ec\u4fee\u6539\u4f9d\u8d56\u7248\u672c) \u65f6\u68c0\u67e5\u914d\u7f6e\u662f\u5426\u80fd\u6b63\u5e38\u53d1\u7248\n# \u53d1\u7248\u68c0\u67e5\u975e\u5e38\u6162, \u56e0\u6b64\u4e0d\u5728 build.yml \u505a\n\nname: Check Publishing\n\n\non:\n  push:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n  pull_request:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n\njobs:\n\n  check-publishing:\n    name: \"Check Publishing (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n#          - windows-2022\n          - ubuntu-20.04\n          - macos-12\n        include:\n          #          - os: windows-2022\n          #            targetName: mingwX64\n          #            parallelCompilation: false\n          - os: ubuntu-20.04\n            targetName: linuxX64\n            parallelCompilation: false\n          - os: macos-12\n            targetName: macosX64\n            parallelCompilation: true # macOS machine has 14G\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};~others\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on macOS\n      - if: ${{ env.isMac == 'true' }}\n        name: Install OpenSSL on Mac OS\n        run: >\n          git clone https://github.com/openssl/openssl.git --recursive &&\n          cd openssl &&\n          git checkout tags/openssl-3.0.3 &&\n          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&\n          make &&\n          sudo make install\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: Prepare deps test build\n        run: ./gradlew :mirai-deps-test:updateProjectVersionForLocalDepsTest ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Build and Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.deps.test.must.run=true\" \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n"
    },
    "2023-05-01T10-09-44Z": {
      "triggers": {
        "push": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        },
        "pull_request": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "check-publishing": 14
      },
      "line_count": 121,
      "workflow": "# \u5f53\u4fee\u6539\u6784\u5efa\u811a\u672c (\u5305\u62ec\u4fee\u6539\u4f9d\u8d56\u7248\u672c) \u65f6\u68c0\u67e5\u914d\u7f6e\u662f\u5426\u80fd\u6b63\u5e38\u53d1\u7248\n# \u53d1\u7248\u68c0\u67e5\u975e\u5e38\u6162, \u56e0\u6b64\u4e0d\u5728 build.yml \u505a\n\nname: Check Publishing\n\n\non:\n  push:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n  pull_request:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n\njobs:\n\n  check-publishing:\n    name: \"Check Publishing (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n#          - windows-2022\n          - ubuntu-20.04\n          - macos-12\n        include:\n          #          - os: windows-2022\n          #            targetName: mingwX64\n          #            parallelCompilation: false\n          - os: ubuntu-20.04\n            targetName: linuxX64\n            parallelCompilation: false\n          - os: macos-12\n            targetName: macosX64\n            parallelCompilation: true # macOS machine has 14G\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      gradleArgs: --scan  \"-Dmirai.target=jvm;${{ matrix.targetName }};~others\" \"-Pkotlin.compiler.execution.strategy=in-process\" \"-Dorg.gradle.jvmargs=-Xmx4096m\" \"-Dfile.encoding=UTF-8\"\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: Prepare deps test build\n        run: ./gradlew :mirai-deps-test:updateProjectVersionForLocalDepsTest ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Build and Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.deps.test.must.run=true\" \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n"
    },
    "2023-06-16T12-40-46Z": {
      "triggers": {
        "push": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        },
        "pull_request": {
          "paths": [
            "**/**.gradle.kts",
            "**/gradle.properties",
            "buildSrc/**"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "check-publishing": 14
      },
      "line_count": 121,
      "workflow": "# \u5f53\u4fee\u6539\u6784\u5efa\u811a\u672c (\u5305\u62ec\u4fee\u6539\u4f9d\u8d56\u7248\u672c) \u65f6\u68c0\u67e5\u914d\u7f6e\u662f\u5426\u80fd\u6b63\u5e38\u53d1\u7248\n# \u53d1\u7248\u68c0\u67e5\u975e\u5e38\u6162, \u56e0\u6b64\u4e0d\u5728 build.yml \u505a\n\nname: Check Publishing\n\n\non:\n  push:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n  pull_request:\n    paths:\n      - '**/**.gradle.kts'\n      - '**/gradle.properties'\n      - 'buildSrc/**'\n\njobs:\n\n  check-publishing:\n    name: \"Check Publishing (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          #          - windows-2022 # OOM\n          - ubuntu-20.04\n          - macos-12\n        include:\n          #          - os: windows-2022\n          #            targetName: mingwX64\n          #            parallelCompilation: false\n          - os: ubuntu-20.04\n            targetName: linuxX64\n            parallelCompilation: false\n          - os: macos-12\n            targetName: macosX64\n            parallelCompilation: true # macOS machine has 14G\n    env:\n      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`\n      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources\n      gradleArgs: --scan\n      isMac: ${{ startsWith(matrix.os, 'macos') }}\n      isWindows: ${{ startsWith(matrix.os, 'windows') }}\n      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}\n      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}\n      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\\vcpkg\\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt-openj9'\n          java-version: '17'\n\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Cache konan\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ~/.konan\n          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Prepare to cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n\n      - name: Cache vcpkg\n        if: ${{ env.isWindows == 'true' }}\n        uses: pat-s/always-upload-cache@v3.0.11\n        with:\n          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}\n          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}\n          restore-keys: |\n            ${{ runner.os }}-vcpkg-binary-cache-\n\n      - if: ${{ env.isUnix == 'true' }}\n        run: chmod -R 777 *\n\n      # Prepare environment for linking on Ubuntu\n      - if: ${{ env.isUbuntu == 'true' }}\n        name: Install OpenSSL on Ubuntu\n        run: sudo apt install libssl-dev -y\n\n      # Prepare environment for linking on Windows\n      - if: ${{ env.isWindows == 'true' }}\n        name: Setup Memory Environment on Windows\n        run: >\n          wmic pagefileset where name=\"D:\\\\pagefile.sys\" set InitialSize=1024,MaximumSize=9216 &\n          net stop mongodb\n        shell: cmd\n        continue-on-error: true\n\n      - if: ${{ env.isWindows == 'true' }}\n        name: Install OpenSSL & cURL on Windows\n        run: |\n          echo \"set(VCPKG_BUILD_TYPE release)\" | Out-File -FilePath \"$env:VCPKG_INSTALLATION_ROOT\\triplets\\x64-windows.cmake\" -Encoding utf8 -Append\n          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcrypto.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libssl.lib\n          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\libcurl.lib\n          echo \"$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n\n      - name: Clean and download dependencies\n        run: ./gradlew clean ${{ env.gradleArgs }}\n\n      - name: Prepare deps test build\n        run: ./gradlew :mirai-deps-test:updateProjectVersionForLocalDepsTest ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Build and Publish Local Artifacts\n        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n\n      - name: Check Publication\n        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }} \"-Dmirai.deps.test.must.run=true\" \"-Porg.gradle.parallel=${{ matrix.parallelCompilation }}\"\n"
    }
  }
}