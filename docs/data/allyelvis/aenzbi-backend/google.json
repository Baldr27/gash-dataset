{
  "google": {
    "2024-06-10T00-10-44Z": []
  },
  "metadata": {
    "2024-06-10T00-10-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "main"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "setup-build-publish-deploy": 8
      },
      "line_count": 91,
      "workflow": "# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the \"main\" branch.\n#\n# To configure this workflow:\n#\n# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.\n#\n# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)\n#\n# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).\n#\n# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize\n\nname: Build and Deploy to GKE\n\non:\n  push:\n    branches: [ \"main\" ]\n\nenv:\n  PROJECT_ID: ${{ secrets.GKE_PROJECT }}\n  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry\n  GKE_CLUSTER: cluster-1    # TODO: update to cluster name\n  GKE_ZONE: us-central1-c   # TODO: update to cluster zone\n  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name\n  REPOSITORY: samples # TODO: update to Artifact Registry docker repository\n  IMAGE: static-site\n\njobs:\n  setup-build-publish-deploy:\n    name: Setup, Build, Publish, and Deploy\n    runs-on: ubuntu-latest\n    environment: production\n\n    permissions:\n      contents: 'read'\n      id-token: 'write'\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v4\n\n    # Configure Workload Identity Federation and generate an access token.\n    - id: 'auth'\n      name: 'Authenticate to Google Cloud'\n      uses: 'google-github-actions/auth@v0'\n      with:\n        token_format: 'access_token'\n        workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n        service_account: 'my-service-account@my-project.iam.gserviceaccount.com'\n\n    # Alternative option - authentication via credentials json\n    # - id: 'auth'\n    #   uses: 'google-github-actions/auth@v0'\n    #   with:\n    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'\n\n    - name: Docker configuration\n      run: |-\n        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev\n    # Get the GKE credentials so we can deploy to the cluster\n    - name: Set up GKE credentials\n      uses: google-github-actions/get-gke-credentials@v0\n      with:\n        cluster_name: ${{ env.GKE_CLUSTER }}\n        location: ${{ env.GKE_ZONE }}\n\n    # Build the Docker image\n    - name: Build\n      run: |-\n        docker build \\\n          --tag \"$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA\" \\\n          --build-arg GITHUB_SHA=\"$GITHUB_SHA\" \\\n          --build-arg GITHUB_REF=\"$GITHUB_REF\" \\\n          .\n    # Push the Docker image to Google Artifact Registry\n    - name: Publish\n      run: |-\n        docker push \"$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA\"\n    # Set up kustomize\n    - name: Set up Kustomize\n      run: |-\n        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64\n        chmod u+x ./kustomize\n    # Deploy the Docker image to the GKE cluster\n    - name: Deploy\n      run: |-\n        # replacing the image name in the k8s template\n        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA\n        ./kustomize build . | kubectl apply -f -\n        kubectl rollout status deployment/$DEPLOYMENT_NAME\n        kubectl get services -o wide\n"
    }
  }
}