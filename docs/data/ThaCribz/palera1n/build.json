{
  "build": {
    "2023-01-17T17-11-14Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 32,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-17T17-30-20Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-17T17-12-20Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 32,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-18T03-57-57Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-18T03-59-47Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-21T08-25-09Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-18T08-45-49Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-21T08-26-49Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 51,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-21T18-00-49Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 51,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-21T19-13-14Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T04-32-10Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 54,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T04-42-29Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 244,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T04-46-52Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 244,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T04-49-13Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 244,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T04-57-02Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 244,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T05-00-00Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T05-06-33Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-22T05-09-10Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 52
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-27T14-06-43Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 252,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 256,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 253,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 503,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 257,
          "startColumn": 5,
          "endLine": 290,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 291,
          "startColumn": 5,
          "endLine": 506,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 256,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 256,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 257,
          "startColumn": 5,
          "endLine": 290,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 291,
          "startColumn": 5,
          "endLine": 506,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 257,
          "startColumn": 5,
          "endLine": 290,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 291,
          "startColumn": 5,
          "endLine": 506,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 252,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 237,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 238,
          "startColumn": 5,
          "endLine": 269,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 270,
          "startColumn": 5,
          "endLine": 485,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 264,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 265,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 311,
          "startColumn": 5,
          "endLine": 539,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 252,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 255,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 256,
          "startColumn": 5,
          "endLine": 289,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 290,
          "startColumn": 5,
          "endLine": 505,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 253,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 503,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 265,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 252,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 253,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 503,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 252,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 264,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 253,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 502,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 265,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 311,
          "startColumn": 5,
          "endLine": 539,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 264,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 265,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 311,
          "startColumn": 5,
          "endLine": 539,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 52,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 53,
          "startColumn": 5,
          "endLine": 242,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T06-43-22Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 296,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 297,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 603,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T06-41-05Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 296,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 297,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 603,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T06-46-32Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 297,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 298,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 605,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T06-57-34Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 300,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 301,
          "startColumn": 5,
          "endLine": 346,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 347,
          "startColumn": 5,
          "endLine": 610,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-22-05Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 300,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 301,
          "startColumn": 5,
          "endLine": 346,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 347,
          "startColumn": 5,
          "endLine": 610,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-28-46Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 350,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 351,
          "startColumn": 5,
          "endLine": 614,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-29-52Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 350,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 351,
          "startColumn": 5,
          "endLine": 614,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-34-22Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 350,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 351,
          "startColumn": 5,
          "endLine": 614,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-45-48Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 305,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 306,
          "startColumn": 5,
          "endLine": 351,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 352,
          "startColumn": 5,
          "endLine": 615,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-36-49Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 350,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 351,
          "startColumn": 5,
          "endLine": 614,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-48-54Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 305,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 306,
          "startColumn": 5,
          "endLine": 351,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 352,
          "startColumn": 5,
          "endLine": 615,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T07-57-48Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 307,
          "startColumn": 5,
          "endLine": 352,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 353,
          "startColumn": 5,
          "endLine": 616,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T08-08-50Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 307,
          "startColumn": 5,
          "endLine": 352,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 353,
          "startColumn": 5,
          "endLine": 616,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T12-41-18Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 312,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 626,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-29T05-33-47Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 312,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 626,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-28T17-27-42Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 312,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 626,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-30T14-33-02Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 307,
          "startColumn": 5,
          "endLine": 352,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 353,
          "startColumn": 5,
          "endLine": 616,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-01T15-58-56Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 308,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 309,
          "startColumn": 5,
          "endLine": 354,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 355,
          "startColumn": 5,
          "endLine": 620,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T10-47-16Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 702,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T10-50-44Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 702,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T10-55-12Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 703,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T10-59-31Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 388,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 389,
          "startColumn": 5,
          "endLine": 702,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T10-58-53Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 703,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T11-09-54Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 388,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 389,
          "startColumn": 5,
          "endLine": 703,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T11-40-57Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 344,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 705,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T12-00-09Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 360,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 361,
          "startColumn": 5,
          "endLine": 406,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 407,
          "startColumn": 5,
          "endLine": 739,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T11-54-47Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 360,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 361,
          "startColumn": 5,
          "endLine": 406,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 407,
          "startColumn": 5,
          "endLine": 739,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T12-13-13Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 363,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 364,
          "startColumn": 5,
          "endLine": 409,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 410,
          "startColumn": 5,
          "endLine": 744,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T13-29-49Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 324,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 325,
          "startColumn": 5,
          "endLine": 370,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 371,
          "startColumn": 5,
          "endLine": 666,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T13-42-25Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 324,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 325,
          "startColumn": 5,
          "endLine": 370,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 371,
          "startColumn": 5,
          "endLine": 666,
          "endColumn": 63
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-04T19-25-12Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 312,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 313,
          "startColumn": 5,
          "endLine": 346,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 347,
          "startColumn": 5,
          "endLine": 631,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-05T05-20-31Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 313,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 314,
          "startColumn": 5,
          "endLine": 347,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 348,
          "startColumn": 5,
          "endLine": 632,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-06T07-53-02Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 36,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 37,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 341,
          "startColumn": 5,
          "endLine": 374,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 375,
          "startColumn": 5,
          "endLine": 659,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-06T08-08-14Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 376,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 377,
          "startColumn": 5,
          "endLine": 661,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-06T07-58-11Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 376,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 377,
          "startColumn": 5,
          "endLine": 661,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-06T08-33-59Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 376,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 377,
          "startColumn": 5,
          "endLine": 661,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-07T09-02-03Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 376,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 377,
          "startColumn": 5,
          "endLine": 661,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T08-50-12Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 323,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 324,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 642,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T09-04-45Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 360,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 361,
          "startColumn": 5,
          "endLine": 645,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T09-15-18Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 360,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 361,
          "startColumn": 5,
          "endLine": 645,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T09-44-36Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 38,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 39,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 327,
          "startColumn": 5,
          "endLine": 360,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 361,
          "startColumn": 5,
          "endLine": 645,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T10-07-59Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 39,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 40,
          "startColumn": 5,
          "endLine": 330,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 331,
          "startColumn": 5,
          "endLine": 366,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 367,
          "startColumn": 5,
          "endLine": 652,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T10-11-55Z": [
      {
        "region": {
          "startLine": 16,
          "startColumn": 5,
          "endLine": 45,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 46,
          "startColumn": 5,
          "endLine": 336,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 337,
          "startColumn": 5,
          "endLine": 372,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 373,
          "startColumn": 5,
          "endLine": 658,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-08T10-15-16Z": [
      {
        "region": {
          "startLine": 17,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 337,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 338,
          "startColumn": 5,
          "endLine": 373,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 374,
          "startColumn": 5,
          "endLine": 659,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-10T07-56-58Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 346,
          "startColumn": 5,
          "endLine": 381,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 382,
          "startColumn": 5,
          "endLine": 671,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-09T17-28-47Z": [
      {
        "region": {
          "startLine": 17,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 337,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 338,
          "startColumn": 5,
          "endLine": 373,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 374,
          "startColumn": 5,
          "endLine": 659,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-12T07-33-40Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 346,
          "startColumn": 5,
          "endLine": 381,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 382,
          "startColumn": 5,
          "endLine": 671,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-13T11-11-55Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 386,
          "startColumn": 5,
          "endLine": 675,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-14T17-22-36Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 386,
          "startColumn": 5,
          "endLine": 675,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-14T17-24-25Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 353,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 354,
          "startColumn": 5,
          "endLine": 389,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 390,
          "startColumn": 5,
          "endLine": 679,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-15T04-56-25Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 386,
          "startColumn": 5,
          "endLine": 666,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-15T04-46-15Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 342,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 343,
          "startColumn": 5,
          "endLine": 378,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 379,
          "startColumn": 5,
          "endLine": 659,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-20T12-00-33Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 386,
          "startColumn": 5,
          "endLine": 666,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T21-38-26Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 786,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T21-49-16Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 786,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T22-11-41Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 782,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T21-51-42Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 786,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T22-26-49Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 459,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 460,
          "startColumn": 5,
          "endLine": 773,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T22-45-24Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 460,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 461,
          "startColumn": 5,
          "endLine": 775,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T22-32-23Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 459,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 460,
          "startColumn": 5,
          "endLine": 774,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T22-59-32Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 460,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 461,
          "startColumn": 5,
          "endLine": 775,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-09-57Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 465,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 466,
          "startColumn": 5,
          "endLine": 780,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-17-17Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 782,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-23-24Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 772,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-29-29Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 772,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-47-30Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 772,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-21T23-54-45Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 772,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T00-05-24Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 466,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 467,
          "startColumn": 5,
          "endLine": 772,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T00-29-45Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T07-22-56Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T10-09-51Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T09-47-35Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T10-26-22Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T10-33-51Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 349,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 350,
          "startColumn": 5,
          "endLine": 470,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 471,
          "startColumn": 5,
          "endLine": 777,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T11-16-40Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 478,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 479,
          "startColumn": 5,
          "endLine": 785,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-19T03-22-38Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 358,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 359,
          "startColumn": 5,
          "endLine": 479,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 480,
          "startColumn": 5,
          "endLine": 787,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-23T14-13-21Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 478,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 479,
          "startColumn": 5,
          "endLine": 785,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-19T03-29-40Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 359,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 360,
          "startColumn": 5,
          "endLine": 480,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 481,
          "startColumn": 5,
          "endLine": 789,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-22T14-18-52Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 358,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 359,
          "startColumn": 5,
          "endLine": 479,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 480,
          "startColumn": 5,
          "endLine": 787,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-22T14-19-00Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 478,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 479,
          "startColumn": 5,
          "endLine": 785,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T00-09-06Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 478,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 479,
          "startColumn": 5,
          "endLine": 787,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 788,
          "startColumn": 5,
          "endLine": 797,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T01-04-38Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 818,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T00-11-12Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 478,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 479,
          "startColumn": 5,
          "endLine": 787,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 788,
          "startColumn": 5,
          "endLine": 797,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T01-15-28Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 817,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T01-27-03Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T02-15-47Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T01-29-59Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 5
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T02-49-57Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T03-03-55Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T03-27-03Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T03-30-24Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-15T03-44-10Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-27T12-56-58Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-24T21-41-14Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 357,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 358,
          "startColumn": 5,
          "endLine": 487,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 488,
          "startColumn": 5,
          "endLine": 796,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 797,
          "startColumn": 5,
          "endLine": 816,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T16-03-00Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 832,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T16-53-58Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 843,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T17-33-52Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 843,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T17-15-30Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 843,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T17-48-41Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 843,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T18-00-41Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 844,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T18-03-00Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 844,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-29T18-21-39Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 833,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-03T23-06-40Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 833,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-27T11-12-40Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 498,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 499,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 832,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-28T19-38-43Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 498,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 499,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 832,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-01T18-34-18Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 498,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 499,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 832,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-14T17-24-54Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 498,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 499,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 832,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-14T17-43-48Z": [
      {
        "region": {
          "startLine": 26,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 365,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 366,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 812,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 813,
          "startColumn": 5,
          "endLine": 833,
          "endColumn": 6
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-17T17-04-32Z": []
  },
  "metadata": {
    "2023-01-17T17-11-14Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 4
      },
      "line_count": 32,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1064951808537153627/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1064951809002705007/ramdisk.dmg https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu)\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n"
    },
    "2023-01-17T17-30-20Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 5
      },
      "line_count": 38,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1064951808537153627/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1064951809002705007/ramdisk.dmg https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-17T17-12-20Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 4
      },
      "line_count": 32,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1064951808537153627/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1064951809002705007/ramdisk.dmg https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n"
    },
    "2023-01-18T03-57-57Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 50,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos https://cdn.discordapp.com/attachments/672628720497852459/1065116692067397743/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065117683361792100/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n      \n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-macos\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-macos\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-18T03-59-47Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 50,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos https://cdn.discordapp.com/attachments/672628720497852459/1065116692067397743/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065117683361792100/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n      \n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-21T08-25-09Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 50,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1065189871251111966/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065189871636983848/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-18T08-45-49Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 50,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos https://cdn.discordapp.com/attachments/672628720497852459/1065189871251111966/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065189871636983848/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-21T08-26-49Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 51,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1065189871251111966/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065189871636983848/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-21T18-00-49Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 51,
      "workflow": "name: Build palera1n macOS\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1065189871251111966/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1065189871636983848/ramdisk.dmg\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-21T19-13-14Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 54,
      "workflow": "name: Build palera1n macOS\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435007754801242/binpack.dmg \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435008115527710/ramdisk.dmg\n\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v2\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-22T04-32-10Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build-macOS": 7
      },
      "line_count": 54,
      "workflow": "name: Build palera1n macOS\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435007754801242/binpack.dmg \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435008115527710/ramdisk.dmg\n\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n\n      - name: Upload macOS universal build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n\n      - name: Upload macOS x86_64 build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-macOS (x86_64)\n          path: palera1n-x86_64\n\n      - name: Upload macOS arm64 build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-macOS (arm64)\n          path: palera1n-arm64\n\n      - name: Upload macOS universal debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-macos.dSYM\n          path: palera1n-macos.dSYM\n"
    },
    "2023-01-22T04-42-29Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 244,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435007754801242/binpack.dmg \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435008115527710/ramdisk.dmg\n\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/\n          cp palera1n-x86_64 ready/\n          cp palera1n-arm64 ready/\n          cp palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.discordapp.com/attachments/672628720497852459/1064954768021274694/checkra1n-kpf-pongo \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435007754801242/binpack.dmg \\\n            https://cdn.discordapp.com/attachments/672628720497852459/1066435008115527710/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug palera1n-linux.debug\n          cp palera1n-linux.debug ready/\n          mv src/palera1n src/palera1n-linux\n          cp src/palera1n-linux ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T04-46-52Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 244,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/\n          cp palera1n-x86_64 ready/\n          cp palera1n-arm64 ready/\n          cp palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug palera1n-linux.debug\n          cp palera1n-linux.debug ready/\n          mv src/palera1n src/palera1n-linux\n          cp src/palera1n-linux ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T04-49-13Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 244,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/\n          cp palera1n-x86_64 ready/\n          cp palera1n-arm64 ready/\n          cp -R palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug palera1n-linux.debug\n          cp palera1n-linux.debug ready/\n          mv src/palera1n src/palera1n-linux\n          cp src/palera1n-linux ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T04-57-02Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 244,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root-macos.tgz\n          tar xf dep_root.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/\n          cp palera1n-x86_64 ready/\n          cp palera1n-arm64 ready/\n          cp -R palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug palera1n-linux.debug\n          cp palera1n-linux.debug ready/\n          mv src/palera1n src/palera1n-${{ env.CHECKRA1N_NAME }}\n          cp src/palera1n-${{ env.CHECKRA1N_NAME }} ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T05-00-00Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 242,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root-macos.tgz\n          tar xf dep_root-macos.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/\n          cp palera1n-x86_64 ready/\n          cp palera1n-arm64 ready/\n          cp -R palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-linux.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T05-06-33Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 242,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root-macos.tgz\n          tar xf dep_root-macos.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp palera1n-x86_64 ready/palera1n-macos-x86_64\n          cp palera1n-arm64 ready/palera1n-macos-arm64\n          cp -R palera1n-macos.dSYM ready/\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-linux.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-22T05-09-10Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 242,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n\n          cd ..\n          curl -LO https://static.palera.in/deps/c-rewrite/dep_root-macos.tgz\n          tar xf dep_root-macos.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp palera1n-x86_64 ready/palera1n-macos-x86_64\n          cp palera1n-arm64 ready/palera1n-macos-arm64\n          zip -r ready/palera1n-macos-dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://static.palera.in/deps/c-rewrite/binpack.dmg \\\n            https://static.palera.in/deps/c-rewrite/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-linux.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.STATIC_FTP_HOST }}\n          port: 6061\n          username: nebula\n          password: ${{ secrets.STATIC_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/upload/artifacts/c-rewrite'\n"
    },
    "2023-01-27T14-06-43Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build-macOS": 5,
        "build-Linux": 18
      },
      "line_count": 242,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n\n          cd ..\n          curl -LO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/dep_root_macos.tgz\n          tar xf dep_root_macos.tgz\n          make -j5 download-checkra1n\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu) macos-dist\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp palera1n-x86_64 ready/palera1n-macos-x86_64\n          cp palera1n-arm64 ready/palera1n-macos-arm64\n          zip -r ready/palera1n-macos-dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      OSSL_VERSION: 3.0.7\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n\n      - name: Download toolchain\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n          tar -xf ${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-armv4\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"OSSL_ARCH=linux-aarch64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://www.openssl.org/source/openssl-${{ env.OSSL_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf openssl-${{ env.OSSL_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build OpenSSL\n        run: |\n          cd openssl-${{ env.OSSL_VERSION }}\n          LDFLAGS=\"${{ env.LDFLAGS }} -latomic\" ./Configure ${{ env.OSSL_ARCH }}\n          sed -i 's/-m64//g' Makefile\n          make -j$(nproc) LDFLAGS=\"${{ env.LDFLAGS }} -latomic\"\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -ij$(nproc)\n          make -i install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-openssl openssl_LIBS=\"-lssl -lcrypto\" openssl_CFLAGS=\" \"\n          make -j$(nproc)\n          make install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-01-28T06-43-22Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 603,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"-Os\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T06-41-05Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 603,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"-Os\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T06-46-32Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 605,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"-Os\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T06-57-34Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 610,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=${{ env.CFLAGS }} -Wno-error-implicit-function-declaration\"\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"-Os\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            STRIP=${{ env.CROSS_COMPILE }}strip\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-22-05Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 610,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=${{ env.CFLAGS }} -Wno-error-implicit-function-declaration\"\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"-Os\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=install --strip-program=${{ matrix.triple }}-strip\"\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-28-46Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 614,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\"\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CC_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPP_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=install --strip-program=${{ matrix.triple }}-strip\"\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-29-52Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 614,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\"\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CC_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPP_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=install --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-34-22Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 614,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CC_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPP_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-45-48Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 615,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic)\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-36-49Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 614,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-48-54Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 615,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T07-57-48Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 616,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T08-08-50Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 616,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T12-41-18Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 626,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-29T05-33-47Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 626,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://github.com/guacaplushy/checkp4le/raw/main/binaries/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-28T17-27-42Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 626,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          cd src\n          curl -LOOO https://cdn.nickchan.lol/palera1n/c-rewrite/deps/checkra1n-kpf-pongo \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/binpack.dmg \\\n            https://cdn.nickchan.lol/palera1n/c-rewrite/deps/ramdisk.dmg\n          cd ..\n          make -j5 download-checkra1n\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-01-30T14-33-02Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 616,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-01T15-58-56Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 20,
        "darwin-dist": 4,
        "build-Linux": 22
      },
      "line_count": 620,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T10-47-16Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 702,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T10-50-44Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 702,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T10-55-12Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 703,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T10-59-31Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 702,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T10-58-53Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 703,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T11-09-54Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 703,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T11-40-57Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 705,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T12-00-09Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 23,
        "darwin-dist": 4,
        "build-Linux": 26
      },
      "line_count": 739,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T11-54-47Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 23,
        "darwin-dist": 4,
        "build-Linux": 26
      },
      "line_count": 739,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-gpm-support \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T12-13-13Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 23,
        "darwin-dist": 4,
        "build-Linux": 26
      },
      "line_count": 744,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed ncurses gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          echo $(echo $(brew --cellar)/ncurses/*/bin/tic | sed 's|/tic||') >> $GITHUB_PATH\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"${{ env.CC }}\" \\\n            --with-build-cflags=\"${{ env.CFLAGS_FOR_NUILD }}\" \\\n            --with-build-cpp=\"${{ env.CC }} -E\" \\\n            --with-build-cppflags=\"${{ env.CPPFLAGS_FOR_BUILD }}\" \\\n            --with-build-ldflags=\"${{ env.LDFLAGS_FOR_BUILD }}\" \\\n            --with-pthread \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-tic-path=$(echo $(brew --cellar)/ncurses/*/bin/tic) \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/opt/procursus/share/terminfo\" \\\n            --with-terminfo-dirs=\"/var/jb/usr/share/terminfo:/opt/procursus/share/terminfo:/opt/local/share/terminfo:/opt/homebrew/share/terminfo:/usr/local/share/terminfo:/opt/sw/share/terminfo:/sw/share/terminfo:/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\" || (cat config.log && exit 1)\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      NCURSES_VERSION: 6.4\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/ncurses/ncurses-${{ env.NCURSES_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xf ncurses-${{ env.NCURSES_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build ncurses\n        run: |\n          cd ncurses-${{ env.NCURSES_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-build-cc=\"cc\" \\\n            --with-build-cflags=\" \" \\\n            --with-build-cpp=\"cc -E\" \\\n            --with-build-cppflags=\" \" \\\n            --with-build-ldflags=\" \" \\\n            --enable-const \\\n            --enable-ext-colors \\\n            --enable-ext-mouse \\\n            --enable-ext-putwin \\\n            --enable-wattr-macros \\\n            --with-pthread \\\n            --disable-overwrite \\\n            --without-debug \\\n            --without-tests \\\n            --enable-sigwinch \\\n            --enable-const \\\n            --enable-symlinks \\\n            --enable-termcap \\\n            --enable-pc-files \\\n            --without-x11-rgb \\\n            --with-pkg-config-libdir=\"${{ env.PREFIX }}/lib/pkgconfig\" \\\n            --includedir=\"${{ env.PREFIX }}/include\" \\\n            --enable-widec \\\n            --with-default-terminfo-dir=\"/usr/share/terminfo\" \\\n            --with-terminfo-dirs=\"/usr/share/terminfo:/lib/terminfo:/usr/lib/terminfo:/usr/local/share/terminfo:/usr/local/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo\" \\\n            LDFLAGS=\"${{ env.LDFLAGS }}\" \\\n            PKG_CONFIG_LIBDIR=\"${{ env.PREFIX }}/lib/pkgconfig\"\n            gmake -j$(sysctl -n hw.ncpu)\n            gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n            cd ..\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T13-29-49Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 666,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T13-42-25Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 22,
        "darwin-dist": 4,
        "build-Linux": 25
      },
      "line_count": 666,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.MINEEK_FTP_HOST }}\n          port: 22\n          username: mineekfiles\n          password: ${{ secrets.MINEEK_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/uploads/palera1n/artifacts/palera1n-c'\n"
    },
    "2023-02-04T19-25-12Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 632,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-05T05-20-31Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 633,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-06T07-53-02Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 660,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: sudo apt install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp palera1n.1.html ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt remove -y libssl-dev libreadline-dev\n          sudo apt install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-06T08-08-14Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 662,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp palera1n.1.html mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-06T07-58-11Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 662,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp palera1n.1.html ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-06T08-33-59Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 662,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-07T09-02-03Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 662,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            curl -Lo libusb.patch https://github.com/ProcursusTeam/Procursus/raw/5f4f302f6cb81ce10c7d92ffefd75c004b5da18f/build_patch/libusb/0001-Get-rid-of-some-macro-checks.patch\n            cat libusb.patch | patch -sN -d . -p1\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev --enable-log\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            ./configure ${{ env.CONFIGURE_ARGS }} --with-iokit=no\n          else\n            ./configure ${{ env.CONFIGURE_ARGS }}\n          fi\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T08-50-12Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 643,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T09-04-45Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 646,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path)\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T09-15-18Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 646,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -flto=full\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os -flto=full\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os -flto=full\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os -flto=full\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os -flto=full\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os -flto=full\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T09-44-36Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 646,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T10-07-59Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 653,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T10-11-55Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 659,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-08T10-15-16Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 660,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            http://www.nico.schottelius.org/software/gpm/archives/gpm-${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf gpm-${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-10T07-56-58Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 671,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          cmake .. -DSTATIC=1 -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DSTATIC=1\n          make -j$(sysctl -n hw.ncpu)\n          cd ..\n          mkdir -p ready\n          mv build/src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          CC=\"${{ matrix.triple }}-gcc\" cmake .. -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH=${{ env.DESTDIR }}${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n          -DCMAKE_C_FLAGS=\"-I${{ env.DESTDIR }}${{ env.PREFIX }}/include \\\n          -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -Wl,-rpath,${{ env.PREFIX }}/lib\" -DSTATIC=1\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\"\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug build/src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded build/src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug build/src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv build/src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-09T17-28-47Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 24
      },
      "line_count": 660,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          if [ \"${{ matrix.os }}\" = \"macosx\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu)\n          elif [ \"${{ matrix.os }}\" = \"iphoneos\" ]; then\n            CC=\"xcrun -sdk iphoneos cc\" gmake -j$(sysctl -n hw.ncpu) FAKE_PLATFORM=2 FAKE_SDK=14.0 FAKE_MINOS=14.0\n          fi\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          make -j5 download-deps\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\" palera1n\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n"
    },
    "2023-02-12T07-33-40Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 671,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          cmake .. -DSTATIC=1 -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DSTATIC=1\n          make -j$(sysctl -n hw.ncpu)\n          cd ..\n          mkdir -p ready\n          mv build/src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          ldid -s palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          CC=\"${{ matrix.triple }}-gcc\" cmake .. -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH=${{ env.DESTDIR }}${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n          -DCMAKE_C_FLAGS=\"-I${{ env.DESTDIR }}${{ env.PREFIX }}/include \\\n          -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -Wl,-rpath,${{ env.PREFIX }}/lib\" -DSTATIC=1\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\"\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug build/src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded build/src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug build/src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv build/src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-13T11-11-55Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 675,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          cmake .. -DSTATIC=1 -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DSTATIC=1\n          make -j$(sysctl -n hw.ncpu)\n          cd ..\n          mkdir -p ready\n          mv build/src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          CC=\"${{ matrix.triple }}-gcc\" cmake .. -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH=${{ env.DESTDIR }}${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n          -DCMAKE_C_FLAGS=\"-I${{ env.DESTDIR }}${{ env.PREFIX }}/include \\\n          -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -Wl,-rpath,${{ env.PREFIX }}/lib\" -DSTATIC=1\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\"\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug build/src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded build/src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug build/src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv build/src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-14T17-22-36Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 20,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 675,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          cmake .. -DSTATIC=1 -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DSTATIC=1\n          make -j$(sysctl -n hw.ncpu)\n          cd ..\n          mkdir -p ready\n          mv build/src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          CC=\"${{ matrix.triple }}-gcc\" cmake .. -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH=${{ env.DESTDIR }}${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n          -DCMAKE_C_FLAGS=\"-I${{ env.DESTDIR }}${{ env.PREFIX }}/include \\\n          -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -Wl,-rpath,${{ env.PREFIX }}/lib\" -DSTATIC=1\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\"\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug build/src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded build/src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug build/src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv build/src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-14T17-24-25Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 679,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          cmake .. -DSTATIC=1 -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DSTATIC=1\n          make -j$(sysctl -n hw.ncpu)\n          cd ..\n          mkdir -p ready\n          mv build/src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          mkdir build\n          cd build\n          CC=\"${{ matrix.triple }}-gcc\" cmake .. -DCMAKE_BUILD_TYPE=Release \\\n          -DCMAKE_INSTALL_PREFIX=${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH=${{ env.DESTDIR }}${{ env.PREFIX }} \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \\\n          -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n          -DCMAKE_C_FLAGS=\"-I${{ env.DESTDIR }}${{ env.PREFIX }}/include \\\n          -L${{ env.DESTDIR }}${{ env.PREFIX }}/lib -Wl,-rpath,${{ env.PREFIX }}/lib\" -DSTATIC=1\n          make -j$(nproc) CC=\"${{ matrix.triple }}-gcc\"\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug build/src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded build/src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug build/src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv build/src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-15T04-56-25Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 666,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=14.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=14.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-15T04-46-15Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 21,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 659,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 14.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-02-20T12-00-33Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 3,
        "build-Linux": 23
      },
      "line_count": 666,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T21-38-26Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 786,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 var/jb/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 var/jb/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          # Linux amd64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-x86_64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Linux arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T21-49-16Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 786,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 var/jb/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 var/jb/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          # Linux amd64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          sed 's|@DEB_ARCH@|amd64|g' -i DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          install -Dm644 ../ready/palera1n-macos-x86_64 usr/bin/palera1n\n          install -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Linux arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ${{ github.workspace }}/packaging/control DEBIAN/control\n\n          sed 's|@DEB_ARCH@|arm64|g' -i DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          install -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          install -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T22-11-41Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 782,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control static.DEBIAN/control\n          cd stage\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control static.DEBIAN/control\n          cd stage\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control static.DEBIAN/control\n          cd stage\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control static.DEBIAN/control\n          cd stage\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 var/jb/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 var/jb/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          install -Dm644 ../ready/palera1n-${{ env.CHECKRA1N_NAME }} usr/bin/palera1n\n          install -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T21-51-42Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 786,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ../ready/palera1n-macos-arm64 var/jb/usr/bin/palera1n\n          ginstall -Dm644 ../ready/palera1n.1 var/jb/usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          # Linux amd64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          sed 's|@DEB_ARCH@|amd64|g' -i DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          install -Dm644 ../ready/palera1n-macos-x86_64 usr/bin/palera1n\n          install -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Linux arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cd stage\n          cp ../packaging/control DEBIAN/control\n\n          sed 's|@DEB_ARCH@|arm64|g' -i DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          install -Dm644 ../ready/palera1n-macos-arm64 usr/bin/palera1n\n          install -Dm644 ../ready/palera1n.1 usr/share/man/man1/palera1n.1\n\n          cd ..\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T22-26-49Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 773,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          ls\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 ready/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T22-45-24Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 775,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          curl -LO https://raw.githubusercontent.com/palera1n/palera1n/main/packaging/control\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T22-32-23Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 774,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          ls\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T22-59-32Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 5,
        "build-Linux": 24
      },
      "line_count": 775,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          curl -LO https://raw.githubusercontent.com/palera1n/palera1n/main/packaging/control\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 ready/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-09-57Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 780,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed 's|@DEB_VERSION@|$(cat {{ github.workspace }}/version)|g' -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-17-17Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 782,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(cat version)\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          version=$(cat version)\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-23-24Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 772,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(cat version)\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(cat version)\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-29-29Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 772,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(cat version)\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(cat version)\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage .\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-47-30Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 772,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --tags --always --dirty | sed 's|-|~|' | sed 's|-|.|g' | sed 's|.g|.|g' | sed 's|^v||g')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --tags --always --dirty | sed 's|-|~|' | sed 's|-|.|g' | sed 's|.g|.|g' | sed 's|^v||g')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-21T23-54-45Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 772,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7)\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7)\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T00-05-24Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 772,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/usr/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T00-29-45Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T07-22-56Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T10-09-51Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${version}_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T09-47-35Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_$version_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -b stage palera1n_$version_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_$version_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_$version_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_$version_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T10-26-22Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_${version}_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${version}_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T10-33-51Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": null,
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 777,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-22T11-16-40Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 785,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-04-19T03-22-38Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 787,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-03-23T14-13-21Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 785,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-04-19T03-29-40Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 789,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git fetch origin bfc97788f081584ced9cd35d85b69b3fec6b907c\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git fetch origin bfc97788f081584ced9cd35d85b69b3fec6b907c\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-04-22T14-18-52Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 787,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          git checkout bfc97788f081584ced9cd35d85b69b3fec6b907c\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-04-22T14-19-00Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 4,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24
      },
      "line_count": 785,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n\n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n"
    },
    "2023-05-15T00-09-06Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24,
        "discord-alert": 1
      },
      "line_count": 797,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Send Discord build message\n        if: github.ref == 'refs/heads/master'\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -5 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Build $BUILD\\\",\\\"description\\\":\\\"**Branch:** $BRANCH_NAME\\\\n**Changes:**\\\\n$COMMITMESSAGE\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/$GITHUB_RUN_ID\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\"},\\\"thumbnail\\\":{\\\"url\\\":\\\"https://github.com/palera1n.png\\\"}}],\\\"username\\\":\\\"Github Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T01-04-38Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 818,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        if: github.ref == 'refs/heads/master'\n        run: |\n          echo \"${{ github.event.repository.updated_at}}\"\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${BUILD}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\"},\\\"thumbnail\\\":{\\\"url\\\":\\\"https://github.com/palera1n.png\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T00-11-12Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 6,
        "build-Linux": 24,
        "discord-alert": 1
      },
      "line_count": 797,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps: \n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Send Discord build message\n        if: github.ref == 'refs/heads/master'\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -5 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Build $BUILD\\\",\\\"description\\\":\\\"**Branch:** $BRANCH_NAME\\\\n**Changes:**\\\\n$COMMITMESSAGE\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/$GITHUB_RUN_ID\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\"},\\\"thumbnail\\\":{\\\"url\\\":\\\"https://github.com/palera1n.png\\\"}}],\\\"username\\\":\\\"Github Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T01-15-28Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 817,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          echo \"${{ github.event.repository.updated_at}}\"\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${BUILD}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\"},\\\"thumbnail\\\":{\\\"url\\\":\\\"https://github.com/palera1n.png\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T01-27-03Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${BUILD}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date +'%Y-%m-%dT%H:%M:%S')\\\"},\\\"thumbnail\\\":{\\\"url\\\":\\\"https://github.com/palera1n.png\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T02-15-47Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%Y-%m-%dT%H:%M:%S.000Z\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-15T01-29-59Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date +'%Y-%m-%dT%H:%M:%S')\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    "
    },
    "2023-05-15T02-49-57Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":1487872,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"'$(date -u +\"%FT%TZ\")'\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-15T03-03-55Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag:\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Branch:\\\",\\\"value\\\":\\\"- \\`${BRANCH_NAME}\\`\\\"},{\\\"name\\\":\\\"Changes:\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts:\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-15T03-27-03Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:main] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Changes\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-15T03-30-24Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:main] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Changes\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-15T03-44-10Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${BRANCH_NAME}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Changes\\\",\\\"value\\\":\\\"$(echo $COMMITMESSAGE | awk '{printf \"%s\\\\n\", $0}')\\\"},{\\\"name\\\":\\\"Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-27T12-56-58Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${BRANCH_NAME}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-24T21-41-14Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 4,
        "build-darwin": 22,
        "darwin-dist": 8,
        "build-Linux": 24,
        "discord-alert": 4
      },
      "line_count": 816,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.3.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${BRANCH_NAME}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n-macos-universal)\\n- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/palera1n.1.html)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"https://github.com/palera1n/palera1n\\\", \\\"icon_url\\\": \\\"https://media.discordapp.net/attachments/1054239098006683688/1107471339176071288/palera1n_ios_copy.png?width=1208&height=1208\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T16-03-00Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "discord-alert": 4
      },
      "line_count": 832,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  discord-alert:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        uses: nelonoel/branch-name@v1.0.1\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${BRANCH_NAME}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${BRANCH_NAME}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T16-53-58Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 843,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          \"printf '%s' '${{ secrets.NICKCHAN_SFTP_KEY }}' > privkey.pem\" \n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} ${{ secrets.NICKCHAN_FTP_HOST }}\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T17-33-52Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 843,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          printf '%s' '${{ secrets.NICKCHAN_FTP_KEY }}' > privkey.pem\n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} ${{ secrets.NICKCHAN_FTP_HOST }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T17-15-30Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 843,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          printf '%s' '${{ secrets.NICKCHAN_FTP_KEY }}' > privkey.pem\n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} ${{ secrets.NICKCHAN_FTP_HOST }}\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T17-48-41Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 843,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          printf '%s' '${{ secrets.NICKCHAN_FTP_KEY }}' > privkey.pem\n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} ${{ secrets.NICKCHAN_FTP_HOST }}\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T18-00-41Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 844,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          printf '%s' '${{ secrets.NICKCHAN_FTP_KEY }}' > privkey.pem\n          chmod 600 privkey.pem\n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} ${{ secrets.NICKCHAN_FTP_HOST }}\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T18-03-00Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 5
      },
      "line_count": 844,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Create symlink\n        run: |\n          printf '%s' '${{ secrets.NICKCHAN_FTP_KEY }}' > privkey.pem\n          chmod 600 privkey.pem\n          dir='/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref-branch }}'\n          (\n              echo \"rm $dir/latest\"\n              echo \"ln -s $dir/${{ github.run_number }} $dir/latest\"\n          ) | sftp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i privkey.pem -P ${{ secrets.NICKCHAN_FTP_PORT }} palera1n@${{ secrets.NICKCHAN_FTP_HOST }}\n          rm -f privkey.pem\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-05-29T18-21-39Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 833,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: '/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}'\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-06-03T23-06-40Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 833,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-ios\n          zip -r9 ready/palera1n-ios.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-ios stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-ios](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-ios)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-06-27T11-12-40Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 832,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          zip -r9 ready/palera1n-iphoneos-arm64.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-iphoneos-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-iphoneos-arm64)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-06-28T19-38-43Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 832,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          zip -r9 ready/palera1n-iphoneos-arm64.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          privateKey: ${{ secrets.NICKCHAN_FTP_KEY }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-iphoneos-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-iphoneos-arm64)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-07-01T18-34-18Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 832,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          zip -r9 ready/palera1n-iphoneos-arm64.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v2.0.2\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-iphoneos-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-iphoneos-arm64)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-07-14T17-24-54Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 832,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          zip -r9 ready/palera1n-iphoneos-arm64.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-iphoneos-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-iphoneos-arm64)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-07-14T17-43-48Z": {
      "triggers": {
        "push": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "pull_request": {
          "paths": [
            "src/**",
            "docs/**",
            "patches/**",
            "include/**",
            "Makefile",
            "CMakeLists.txt",
            ".github/workflows/build.yml"
          ]
        },
        "workflow_dispatch": null
      },
      "num_jobs": 5,
      "steps_per_job": {
        "build-docs": 5,
        "build-darwin": 23,
        "darwin-dist": 9,
        "build-Linux": 25,
        "finish-build": 4
      },
      "line_count": 833,
      "workflow": "name: Build palera1n\n\non:\n  push:\n    paths:\n      - 'src/**'\n      - 'docs/**'\n      - 'patches/**'\n      - 'include/**'\n      - 'Makefile'\n      - 'CMakeLists.txt'\n      - '.github/workflows/build.yml'\n  pull_request:\n    paths:\n        - 'src/**'\n        - 'docs/**'\n        - 'patches/**'\n        - 'include/**'\n        - 'Makefile'\n        - 'CMakeLists.txt'\n        - '.github/workflows/build.yml'\n  workflow_dispatch:\n\njobs:\n  build-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install mandoc make\n\n      - name: Build Documentation\n        run: |\n          make -j$(nproc) docs\n          mkdir ready\n          cp docs/*.html docs/mandoc.css docs/palera1n.1 ready\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref_name }}/${{ github.run_number }}\"\n\n  build-darwin:\n    strategy:\n      matrix:\n        include:\n          - arch: x86_64\n            gnu_triple: x86_64-apple-darwin\n            os: macosx\n            minos: 10.8\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: macosx\n            minos: 11.0\n          - arch: arm64\n            gnu_triple: aarch64-apple-darwin\n            os: iphoneos\n            minos: 7.0\n    runs-on: macos-12\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies (packages)\n        run: |\n          sudo /usr/local/bin/pip3 install jsonschema jinja2\n          brew install make autoconf automake pkg-config gnu-sed gettext\n          sudo rm -rf /usr/local/Frameworks/Python*\n          curl -LO https://github.com/ProcursusTeam/ldid/releases/download/v2.1.5-procursus7/ldid_macosx_x86_64\n          sudo install -m755 ldid_macosx_x86_64 /usr/local/bin/ldid\n\n      - name: Download dependencies (embedded binaries)\n        run: |\n          echo \"SDK=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\" >> $GITHUB_ENV\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Select correct Xcode\n        run: |\n          sudo xcode-select -s /Applications/Xcode_14.2.app\n\n      - name: Setup environment\n        run: |\n          mkdir sysroot\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--prefix=/usr/local --disable-shared --enable-static --build=x86_64-apple-darwin --host=${{ matrix.gnu_triple }}\" >> $GITHUB_ENV\n          echo \"CC=$(xcrun --find cc)\" >> $GITHUB_ENV\n          echo \"CXX=$(xcrun --find c++)\" >> $GITHUB_ENV\n          echo \"CPP=$(xcrun --find cc) -E\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Os -g -flto=full -Wl,-object_path_lto,lto.o\" >> $GITHUB_ENV\n          echo \"CPPFLAGS=-g -Os -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isysroot ${{ env.SDK }} -isystem $(pwd)/sysroot/usr/local/include -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-stdlib=libc++ -g -Os -isysroot ${{ env.SDK }} -arch ${{ matrix.arch }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -isystem $(pwd)/sysroot/usr/local/include -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,-dead_strip -arch ${{ matrix.arch }} -isysroot ${{ env.SDK }} -m${{ matrix.os }}-version-min=${{ matrix.minos }} -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CXXFLAGS_FOR_BUILD=-stdlib=libc++ -arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Os\" >> $GITHUB_ENV\n          echo \"CPPFLAGS_FOR_BUILD=-arch $(uname -m) -isysroot $(xcrun -sdk macosx --show-sdk-path) -Wno-error-implicit-function-declaration -Os\" >> $GITHUB_ENV\n          echo \"LDFLAGS_FOR_BUILD=-Wl,-dead_strip\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Prepare iPhoneOS environment\n        if: matrix.os == 'iphoneos'\n        run: |\n          echo \"FAKE_PLATFORM=2\" >> $GITHUB_ENV\n          echo \"FAKE_SDK=7.0\" >> $GITHUB_ENV\n          echo \"FAKE_MINOS=7.0\" >> $GITHUB_ENV\n\n      - name: Prepare headers\n        if: matrix.os != 'macosx'\n        run: |\n          mkdir -p sysroot/{{,System}/Library/Frameworks,/usr/{local/include/{bsm,objc,os/internal,sys,firehose,CoreFoundation,FSEvents,IOKit/kext,libkern,kern,arm,{mach/,}machine,CommonCrypto,Security,CoreSymbolication,Kernel/{kern,IOKit,libkern},rpc,rpcsvc,xpc/private,ktrace,mach-o,dispatch},lib/pkgconfig,/local/lib}}\n          MACOSX_SYSROOT=$(xcrun -sdk macosx --show-sdk-path)\n          TARGET_SYSROOT=$(xcrun -sdk ${{ matrix.os }} --show-sdk-path)\n          cp -af ${MACOSX_SYSROOT}/usr/include/{arpa,bsm,hfs,net,xpc,netinet,servers,timeconv.h,launch.h} sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/objc/objc-runtime.h sysroot/usr/local/include/objc\n          cp -af ${MACOSX_SYSROOT}/usr/include/libkern/{OSDebug.h,OSKextLib.h,OSReturn.h,OSThermalNotification.h,OSTypes.h,machine} sysroot/usr/local/include/libkern\n          cp -af ${MACOSX_SYSROOT}/usr/include/kern sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/sys/{tty*,ptrace,kern*,random,reboot,user,vnode,disk,vmmeter,conf}.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Kernel.framework/Versions/Current/Headers/sys/disklabel.h sysroot/usr/local/include/sys\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/{AppleConvergedIPCKeys.h,IOBSD.h,IOCFBundle.h,IOCFPlugIn.h,IOCFURLAccess.h,IOKitServer.h,IORPC.h,IOSharedLock.h,IOUserServer.h,audio,avc,firewire,graphics,hid,hidsystem,i2c,iokitmig.h,kext,ndrvsupport,network,ps,pwr_mgt,sbp2,scsi,serial,storage,stream,usb,video} sysroot/usr/local/include/IOKit\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/Security.framework/Headers/{mds_schema,oidsalg,SecKeychainSearch,certextensions,Authorization,eisl,SecDigestTransform,SecKeychainItem,oidscrl,cssmcspi,CSCommon,cssmaci,SecCode,CMSDecoder,oidscert,SecRequirement,AuthSession,SecReadTransform,oids,cssmconfig,cssmkrapi,SecPolicySearch,SecAccess,cssmtpi,SecACL,SecEncryptTransform,cssmapi,cssmcli,mds,x509defs,oidsbase,SecSignVerifyTransform,cssmspi,cssmkrspi,SecTask,cssmdli,SecAsn1Coder,cssm,SecTrustedApplication,SecCodeHost,SecCustomTransform,oidsattr,SecIdentitySearch,cssmtype,SecAsn1Types,emmtype,SecTransform,SecTrustSettings,SecStaticCode,emmspi,SecTransformReadTransform,SecKeychain,SecDecodeTransform,CodeSigning,AuthorizationPlugin,cssmerr,AuthorizationTags,CMSEncoder,SecEncodeTransform,SecureDownload,SecAsn1Templates,AuthorizationDB,SecCertificateOIDs,cssmapple}.h sysroot/usr/local/include/Security\n          cp -af ${MACOSX_SYSROOT}/usr/include/{ar,bootstrap,launch,libc,libcharset,localcharset,nlist,NSSystemDirectories,tzfile,vproc}.h sysroot/usr/local/include\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/{*.defs,{mach_vm,shared_region}.h} sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/usr/include/mach/machine/*.defs sysroot/usr/local/include/mach/machine\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpc/pmap_clnt.h sysroot/usr/local/include/rpc\n          cp -af ${MACOSX_SYSROOT}/usr/include/rpcsvc/yp{_prot,clnt}.h sysroot/usr/local/include/rpcsvc\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/machine/thread_state.h sysroot/usr/local/include/mach/machine\n          cp -af ${TARGET_SYSROOT}/usr/include/mach/arm sysroot/usr/local/include/mach\n          cp -af ${MACOSX_SYSROOT}/System/Library/Frameworks/IOKit.framework/Headers/* sysroot/usr/local/include/IOKit\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/stdlib.h > sysroot/usr/local/include/stdlib.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/time.h > sysroot/usr/local/include/time.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/unistd.h > sysroot/usr/local/include/unistd.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/task.h > sysroot/usr/local/include/mach/task.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/mach/mach_host.h > sysroot/usr/local/include/mach/mach_host.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/ucontext.h > sysroot/usr/local/include/ucontext.h\n          gsed -E s/'__IOS_PROHIBITED|__TVOS_PROHIBITED|__WATCHOS_PROHIBITED'//g < ${TARGET_SYSROOT}/usr/include/signal.h > sysroot/usr/local/include/signal.h\n          gsed -E /'__API_UNAVAILABLE'/d < ${TARGET_SYSROOT}/usr/include/pthread.h > sysroot/usr/local/include/pthread.h\n          gsed -i -E s/'__API_UNAVAILABLE\\(.*\\)'// sysroot/usr/local/include/IOKit/IOKitLib.h\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          SDKROOT=\"${{ env.SDK }}\" cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Darwin \\\n            -DCMAKE_C_COMPILER=\"${{ env.CC }}\" \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DMBEDTLS_PYTHON_EXECUTABLE=\"/usr/local/bin/python3\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DMBEDTLS_FATAL_WARNINGS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          gmake -j$(sysctl -n hw.ncpu) \\\n             SDKROOT=\"${{ env.SDK }}\"\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          CC=clang CXX=clang++ ./configure ${{ env.CONFIGURE_ARGS }} ac_cv_type_sig_atomic_t=no\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery\n        run: |\n          sudo cp -a sysroot/usr/local/* /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          if [ \"${{ matrix.os }}\" != \"macosx\" ]; then\n            gsed -i '/case kIOUSBTransactionTimeout/d' src/libirecovery.c\n          fi\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(sysctl -n hw.ncpu) LIBS=\"-lncurses\"\n          make -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.dylib' -delete\n          find dep_root -name '*.la' -delete\n          gmake -j$(sysctl -n hw.ncpu)\n          mkdir -p ready\n          mv src/palera1n palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          dsymutil palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          strip palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          if [ \"${{ matrix.os }}\" == \"macosx\" ]; then\n            ldid -S palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          else\n            ldid -Ssrc/usb.xml palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          fi\n          mkdir -p ready\n          tar -zcf ready/dep_root-${{ matrix.os }}-${{ matrix.arch }}.tgz dep_root\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} build\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}\n          retention-days: 1\n\n      - name: Upload ${{ matrix.os }} thin ${{ matrix.arch }} debug symbols\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/upload-artifact@v3\n        with:\n          name: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          path: palera1n-${{ matrix.os }}-${{ matrix.arch }}.dSYM\n          retention-days: 1\n      \n  darwin-dist:\n    if: ${{ github.event_name != 'pull_request' }}\n    runs-on: macos-latest\n    needs: build-darwin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Procursus\n        uses: beerpiss/procursus-action@v2.0.2\n        with:\n          packages: sed coreutils\n          cache: true\n          mirror: 'https://procursus.itsnebula.net/'\n\n      - name: Download all Darwin artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Prepare artifact\n        run: |\n          find .\n          lipo -create -arch arm64 ./palera1n-macosx-arm64/palera1n-macosx-arm64 -arch x86_64 ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 -output palera1n-macos\n          mkdir -p palera1n-macos.dSYM/Contents/Resources/DWARF\n          cp ./palera1n-macosx-x86_64.dSYM/Contents/Info.plist palera1n-macos.dSYM/Contents\n          lipo -create -arch arm64 palera1n-macosx-arm64.dSYM/Contents/Resources/DWARF/palera1n-macosx-arm64 -arch x86_64 palera1n-macosx-x86_64.dSYM/Contents/Resources/DWARF/palera1n-macosx-x86_64 -output palera1n-macos.dSYM/Contents/Resources/DWARF/palera1n-macos\n          mkdir ready\n          cp palera1n-macos ready/palera1n-macos-universal\n          cp ./palera1n-macosx-x86_64/palera1n-macosx-x86_64 ready/palera1n-macos-x86_64\n          cp ./palera1n-macosx-arm64/palera1n-macosx-arm64 ready/palera1n-macos-arm64\n          cp ./palera1n-iphoneos-arm64/palera1n-iphoneos-arm64 ready/palera1n-iphoneos-arm64\n          zip -r9 ready/palera1n-iphoneos-arm64.dSYM.zip palera1n-iphoneos-arm64.dSYM\n          zip -r9 ready/palera1n-macos.dSYM.zip palera1n-macos.dSYM\n\n      - name: Build debs\n        run: |\n          make -j$(sysctl -n hw.ncpu) docs\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          # Darwin x86_64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-amd64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-x86_64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-amd64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # Darwin arm64\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/opt/procursus/bin\n          mkdir -p stage/opt/procursus/usr/share/man/man1\n          cp packaging/control.macosx stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|darwin-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-macos-arm64 stage/opt/procursus/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/opt/procursus/usr/share/man/man1/palera1n.1\n          chmod +x stage/opt/procursus/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_darwin-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n          # iPhoneOS (rootless)\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/var/jb/usr/bin\n          mkdir -p stage/var/jb/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          gsed 's|@DEB_ARCH@|iphoneos-arm64|g' -i stage/DEBIAN/control\n          gsed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          ginstall -Dm644 ready/palera1n-iphoneos-arm64 stage/var/jb/usr/bin/palera1n\n          ginstall -Dm644 docs/palera1n.1 stage/var/jb/usr/share/man/man1/palera1n.1\n          chmod +x stage/var/jb/usr/bin/palera1n\n\n          dpkg-deb -Zzstd -b stage palera1n_iphoneos-arm64.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n      \n      - name: Save build tag\n        run: echo \"$(git describe --dirty --tags --abbrev=7 | sed 's|-dirty||')\" > build-tag.txt\n      \n      - name: Upload build tag\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-tag\n          path: build-tag.txt\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  build-Linux:\n    strategy:\n      matrix:\n        triple:\n        - i486-linux-musl\n        - x86_64-linux-musl\n        - armel-linux-musleabi\n        - aarch64-linux-musl\n    runs-on: ubuntu-latest\n    env:\n      MBEDTLS_VERSION: 3.4.0\n      LIBUSB_VERSION: 1.0.26\n      READLINE_VERSION: 8.2\n      SLANG_VERSION: 2.3.3\n      NEWT_VERSION: 0.52.23\n      GPM_VERSION: 1.20.7\n      POPT_VERSION: 1.19\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install build dependencies (packages)\n        run: |\n          sudo apt-get remove -y libssl-dev libreadline-dev\n          sudo apt-get install -y pkg-config autoconf automake autopoint mandoc\n          sudo pip3 install jsonschema jinja2\n\n      - name: Download toolchain checksum\n        run: |\n          curl -LO https://musl.cc/SHA512SUMS\n          echo \"TOOLCHAIN_CHECKSUM=\"$(grep ${{ matrix.triple }}-cross.tgz SHA512SUMS | cut -d' ' -f1) >> $GITHUB_ENV\n\n      - name: Download toolchain (cached)\n        id: toolchain_cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ matrix.triple }}-cross.tgz\n          key: ${{ matrix.triple }}-${{ env.TOOLCHAIN_CHECKSUM }}-toolchain\n\n      - name: Download toolchain\n        if: steps.toolchain_cache.outputs.cache-hit != 'true'\n        run: |\n          curl -LO https://musl.cc/${{ matrix.triple }}-cross.tgz\n\n      - name: Setup environment\n        run: |\n          tar -xf ${{ matrix.triple }}-cross.tgz\n          mkdir sysroot\n          echo \"$(pwd)/${{ matrix.triple }}-cross/bin\" >> $GITHUB_PATH\n          case ${{ matrix.triple }} in\n            i486-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=i386\" >> $GITHUB_ENV\n              ;;\n            x86_64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-x86_64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=amd64\" >> $GITHUB_ENV\n              ;;\n            armel-linux-musleabi)\n              echo \"CHECKRA1N_NAME=linux-armel\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=armel\" >> $GITHUB_ENV\n              ;;\n            aarch64-linux-musl)\n              echo \"CHECKRA1N_NAME=linux-arm64\" >> $GITHUB_ENV\n              echo \"ARCH_NAME=arm64\" >> $GITHUB_ENV\n              ;;\n          esac\n          echo \"PKG_CONFIG_PATH=$(pwd)/sysroot/usr/local/lib/pkgconfig\" >> $GITHUB_ENV\n          echo \"CFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"CXXFLAGS=-g -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"LDFLAGS=-g -Wl,--gc-sections -fdata-sections -ffunction-sections -I$(pwd)/sysroot/usr/local/include -L$(pwd)/sysroot/usr/local/lib\" >> $GITHUB_ENV\n          echo \"INSTALL=$(command -v install) --strip-program=${{ matrix.triple }}-strip\" >> $GITHUB_ENV\n          echo \"DESTDIR=$(pwd)/sysroot\" >> $GITHUB_ENV\n          echo \"PREFIX=/usr/local\" >> $GITHUB_ENV\n          echo \"CONFIGURE_ARGS=--build=x86_64-linux-gnu --host=${{ matrix.triple }} --prefix=/usr/local --disable-shared --enable-static\" >> $GITHUB_ENV\n          echo \"CROSS_COMPILE=${{ matrix.triple }}-\" >> $GITHUB_ENV\n          mkdir -p $(pwd)/sysroot/usr/local/lib\n          ln -sf $(pwd)/sysroot/usr/local/lib{,64}\n\n      - name: Download dependencies (source code)\n        run: |\n          curl -LOOOOOOO \\\n            https://github.com/Mbed-TLS/mbedtls/archive/refs/tags/v${{ env.MBEDTLS_VERSION }}.tar.gz \\\n            https://github.com/libusb/libusb/releases/download/v${{ env.LIBUSB_VERSION }}/libusb-${{ env.LIBUSB_VERSION }}.tar.bz2 \\\n            https://mirror-hk.koddos.net/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz \\\n            https://www.jedsoft.org/releases/slang/slang-${{ env.SLANG_VERSION }}.tar.bz2 \\\n            https://releases.pagure.org/newt/newt-${{ env.NEWT_VERSION }}.tar.gz \\\n            https://github.com/telmich/gpm/archive/refs/tags/${{ env.GPM_VERSION }}.tar.gz \\\n            https://github.com/rpm-software-management/popt/archive/refs/tags/popt-${{ env.POPT_VERSION }}-release.tar.gz\n\n          tar -xf v${{ env.MBEDTLS_VERSION }}.tar.gz\n          tar -xjf libusb-${{ env.LIBUSB_VERSION }}.tar.bz2\n          tar -xf readline-${{ env.READLINE_VERSION }}.tar.gz\n          tar -xjf slang-${{ env.SLANG_VERSION }}.tar.bz2\n          tar -xf newt-${{ env.NEWT_VERSION }}.tar.gz\n          tar -xf ${{ env.GPM_VERSION }}.tar.gz\n          tar -xf popt-${{ env.POPT_VERSION }}-release.tar.gz\n          git clone --depth=1 https://github.com/libimobiledevice/libplist\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice-glue\n          git clone --depth=1 https://github.com/libimobiledevice/libirecovery\n          git clone --depth=1 https://github.com/libimobiledevice/libusbmuxd\n          git clone --depth=1 https://github.com/libimobiledevice/libimobiledevice\n\n      - name: Build Mbed TLS\n        run: |\n          cd mbedtls-${{ env.MBEDTLS_VERSION }}\n          cat ../patches/mbedtls/0001-Allow-empty-x509-cert-issuer.patch | patch -sN -d . -p1\n          mkdir build\n          cd build\n          cmake .. \\\n            -DCMAKE_BUILD_TYPE=Release \\\n            -DCMAKE_CROSSCOMPILING=true \\\n            -DCMAKE_SYSTEM_NAME=Linux \\\n            -DCMAKE_SYSTEM_PROCESSOR=$(echo ${{ matrix.triple }} | cut -d- -f1) \\\n            -DCMAKE_C_COMPILER='${{ env.CROSS_COMPILE }}gcc' \\\n            -DCMAKE_C_FLAGS='${{ env.CFLAGS }}'  \\\n            -DCMAKE_CXX_FLAGS='${{ env.CXXFLAGS }}' \\\n            -DCMAKE_FIND_ROOT_PATH=\"${{ env.DESTDIR }}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"${{ env.PREFIX }}\" \\\n            -DENABLE_TESTING=OFF \\\n            -DENABLE_PROGRAMS=OFF \\\n            -DCMAKE_INSTALL_SYSCONFDIR=\"/etc\"\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libusb\n        run: |\n          cd libusb-${{ env.LIBUSB_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }} --disable-udev\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build readline\n        run: |\n          cd readline-${{ env.READLINE_VERSION }}\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build S-Lang\n        run: |\n          cd slang-${{ env.SLANG_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-x \\\n            --without-pcre \\\n            --without-onig \\\n            --without-z \\\n            --without-png \\\n            --without-iconv\n          gmake -j$(sysctl -n hw.ncpu) static\n          gmake -j$(sysctl -n hw.ncpu) install-static DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build GPM\n        run: |\n          cd gpm-${{ env.GPM_VERSION }}\n          cat ../patches/gpm/*.patch | patch -sN -d . -p1\n          ./autogen.sh\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }}\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build popt\n        run: |\n          cd popt-popt-${{ env.POPT_VERSION }}-release\n          autoreconf -fiv\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --without-libiconv-prefix \\\n            --without-libintl-prefix \\\n            --disable-nls \\\n            --disable-werror\n          gmake -j$(sysctl -n hw.ncpu)\n          gmake -j$(sysctl -n hw.ncpu) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build newt\n        run: |\n          cd newt-${{ env.NEWT_VERSION }}\n          ./configure \\\n            ${{ env.CONFIGURE_ARGS }} \\\n            --with-readline=gnu \\\n            --without-python \\\n            --without-tcl \\\n            --disable-nls \\\n            --with-gpm-support\n          gmake -j$(sysctl -n hw.ncpu) libnewt.a\n          mkdir -p ${{ env.DESTDIR }}/usr/local/{lib/pkgconfig,include}\n          install -m644 libnewt.pc ${{ env.DESTDIR }}/usr/local/lib/pkgconfig\n          install -m644 libnewt.a ${{ env.DESTDIR }}/usr/local/lib\n          install -m644 newt.h ${{ env.DESTDIR }}/usr/local/include\n          cd ..\n\n      - name: Build libplist\n        run: |\n          cd libplist\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --without-cython\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice-glue\n        run: |\n          cd libimobiledevice-glue\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libirecovery (sorta)\n        run: |\n          sudo mv /usr/local /usr/local.bak\n          sudo ln -s ${{ env.DESTDIR }}${{ env.PREFIX }} /usr/local\n          cd libirecovery\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -ij$(nproc)\n          make -ij$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          install -m644 src/.libs/libirecovery-1.0.a ${{ env.DESTDIR }}${{ env.PREFIX }}/lib\n          cd ..\n\n      - name: Build libusbmuxd\n        run: |\n          cd libusbmuxd\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }}\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n\n      - name: Build libimobiledevice\n        run: |\n          cd libimobiledevice\n          autoreconf -fiv\n          ./configure ${{ env.CONFIGURE_ARGS }} --with-mbedtls --enable-debug\n          echo -e 'all:\\ninstall:' > tools/Makefile\n          make -j$(nproc)\n          make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}\n          cd ..\n          sudo rm /usr/local\n          sudo mv /usr/local.bak /usr/local\n\n      - name: Build palera1n\n        run: |\n          cp -a sysroot/${{ env.PREFIX }}/{include,lib} dep_root\n          find dep_root -name '*.so' -delete\n          find dep_root -name '*.la' -delete\n          CC=\"${{ matrix.triple }}-gcc\" make -j$(nproc)\n\n      - name: Seperate debug symbols\n        run: |\n          ${{ matrix.triple }}-objcopy --only-keep-debug src/palera1n palera1n.debug\n          ${{ matrix.triple }}-strip --strip-debug --strip-unneeded src/palera1n\n          ${{ matrix.triple }}-objcopy --add-gnu-debuglink=palera1n.debug src/palera1n\n          chmod -x palera1n.debug\n      \n      - name: Prepare artifact\n        run: |\n          mkdir ready\n          mv palera1n.debug ready/palera1n-${{ env.CHECKRA1N_NAME }}.debug\n          mv src/palera1n ready/palera1n-${{ env.CHECKRA1N_NAME }}\n          tar -zcf ready/dep_root_${{ matrix.triple }}.tgz dep_root\n\n      - name: Build debs\n        run: |\n          version=$(git describe --dirty --tags --abbrev=7 | sed 's|^v||' | sed 's|-beta|~beta|')\n\n          make -j$(nproc) docs\n          mkdir -p stage/DEBIAN\n          mkdir -p stage/usr/bin\n          mkdir -p stage/usr/share/man/man1\n          cp packaging/control stage/DEBIAN/control\n\n          sed 's|@DEB_ARCH@|${{ env.ARCH_NAME }}|g' -i stage/DEBIAN/control\n          sed \"s|@DEB_VERSION@|$version|g\" -i stage/DEBIAN/control\n          \n          install -Dm644 ready/palera1n-${{ env.CHECKRA1N_NAME }} stage/usr/bin/palera1n\n          install -Dm644 docs/palera1n.1 stage/usr/share/man/man1/palera1n.1\n          chmod +x stage/usr/bin/palera1n\n\n          dpkg-deb -b stage palera1n_${{ env.ARCH_NAME }}.deb\n          mv palera1n*.deb ready/\n          rm -rf stage\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Upload artifact\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: wangyucode/sftp-upload-action@v1.4.8\n        with:\n          host: ${{ secrets.NICKCHAN_FTP_HOST }}\n          port: ${{ secrets.NICKCHAN_FTP_PORT }}\n          username: palera1n\n          password: ${{ secrets.NICKCHAN_FTP_PASS }}\n          forceUpload: true\n          dryRun: false\n          localDir: 'ready/'\n          remoteDir: \"/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch || github.ref }}/${{ github.run_number }}\"\n\n  finish-build:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'pull_request' }}\n    needs: [build-docs, build-darwin, darwin-dist, build-Linux]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      \n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7\n\n      - name: Download build tag\n        uses: actions/download-artifact@v3\n        with:\n          name: build-tag\n\n      - name: Send Discord build message\n        run: |\n          COMMITMESSAGE=`git log --pretty=format:'- \\`%h\\` %s' -1 --reverse` &&\n          (curl \"${{ secrets.DISCORD_WEBHOOK }}\" -sS -H \"Content-Type:application/json\" -X POST -d \"{\\\"content\\\":null,\\\"embeds\\\":[{\\\"title\\\":\\\"[palera1n:${{ steps.branch-name.outputs.ref_branch }}] Nightly Build ${{ github.run_number }}\\\",\\\"url\\\":\\\"https://github.com/palera1n/palera1n/actions/runs/${GITHUB_RUN_ID}\\\",\\\"color\\\":2829617,\\\"fields\\\":[{\\\"name\\\":\\\"Build tag\\\",\\\"value\\\":\\\"- \\`$(cat build-tag.txt | sed 's|\\n||')\\`\\\"},{\\\"name\\\":\\\"Destination\\\",\\\"value\\\":\\\"- https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}\\\"},{\\\"name\\\":\\\"Documentation\\\",\\\"value\\\":\\\"- [palera1n.1.html](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n.1.html)\\\"},{\\\"name\\\":\\\"Main Artifacts\\\",\\\"value\\\":\\\"- [palera1n-iphoneos-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-iphoneos-arm64)\\n- [palera1n-linux-arm64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-arm64)\\n- [palera1n-linux-armel](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-armel)\\n- [palera1n-linux-x86](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/$${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86)\\n- [palera1n-linux-x86_64](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-linux-x86_64)\\n- [palera1n-macos-universal](https://cdn.nickchan.lol/palera1n/artifacts/c-rewrite/${{ steps.branch-name.outputs.ref_branch }}/${{ github.run_number }}/palera1n-macos-universal)\\\"}],\\\"footer\\\":{\\\"text\\\":\\\"${{ github.actor }}\\\", \\\"icon_url\\\": \\\"https://github.com/${{ github.actor }}.png\\\",\\\"timestamp\\\":\\\"$(date -u +\"%FT%TZ\")\\\"}}],\\\"username\\\":\\\"GitHub Actions\\\",\\\"avatar_url\\\":\\\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\\\"}\")\n    \n"
    },
    "2023-01-17T17-04-32Z": {
      "triggers": {
        "push": null,
        "pull_request": null,
        "workflow_dispatch": null,
        "build-macOS": {
          "runs-on": "macos-latest",
          "steps": [
            {
              "name": "Checkout",
              "uses": "actions/checkout@v3"
            },
            {
              "name": "Download dependencies",
              "run": "cd src\ncurl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064951533411762246/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1064951808537153627/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1064951809002705007/ramdisk.dmg https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos\ncd ..\ncurl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\ntar xf dep_root.tgz\n"
            },
            {
              "name": "Build",
              "run": "make -j$(sysctl -n hw.ncpu)\n"
            },
            {
              "name": "Upload artifact",
              "uses": "actions/upload-artifact@v3.1.0",
              "with": {
                "name": "palera1n-macOS",
                "path": "palera1n-macos"
              }
            }
          ]
        }
      },
      "num_jobs": 0,
      "steps_per_job": {},
      "line_count": 31,
      "workflow": "name: Build palera1n\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\n  build-macOS:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download dependencies\n        run: |\n          cd src\n          curl -LOOOO https://cdn.discordapp.com/attachments/672628720497852459/1064951533411762246/checkra1n-kpf-pongo https://cdn.discordapp.com/attachments/672628720497852459/1064951808537153627/binpack.dmg https://cdn.discordapp.com/attachments/672628720497852459/1064951809002705007/ramdisk.dmg https://assets.checkra.in/downloads/preview/0.1337.1/checkra1n-macos\n          cd ..\n          curl -LO https://cdn.discordapp.com/attachments/672628720497852459/1064948547268661248/dep_root.tgz\n          tar xf dep_root.tgz\n\n      - name: Build\n        run: |\n          make -j$(sysctl -n hw.ncpu)\n      \n      - name: Upload artifact\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: palera1n-macOS\n          path: palera1n-macos\n"
    }
  }
}