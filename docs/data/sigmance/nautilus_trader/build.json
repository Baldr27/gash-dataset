{
  "build": {
    "2020-07-18T01-12-27Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 32,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-15-20Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 37
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-17-08Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 31,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-24-45Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 31,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-21-16Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 31,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-41-08Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 36,
          "endColumn": 31
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-42-38Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 36,
          "endColumn": 31
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T01-51-34Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 36,
          "endColumn": 31
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T08-46-37Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 31
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2020-07-18T09-14-05Z": [
      {
        "region": {
          "startLine": 10,
          "startColumn": 5,
          "endLine": 36,
          "endColumn": 31
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T12-11-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 165,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T12-12-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 165,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T20-37-06Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T12-15-29Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 165,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T21-02-20Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T21-03-07Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-28T20-14-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 32
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-02T03-29-29Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T20-52-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T21-02-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-10T09-26-21Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T21-08-44Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-10T09-30-00Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-20T07-06-15Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 19,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 111,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-20T07-14-53Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 21,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 22,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T05-41-12Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 32,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 33,
          "startColumn": 5,
          "endLine": 124,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T21-29-17Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 118,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T05-44-31Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T21-32-21Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 118,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T21-57-36Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 116,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T22-00-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 116,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T22-21-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T22-12-38Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 101,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T03-36-14Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-23T19-55-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T04-10-45Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T04-31-11Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 101,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-11-01T04-04-43Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-11-01T04-12-43Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-01-19Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-19-47Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 104,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-31-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-28T23-53-31Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-29T00-29-24Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-01-02T21-13-16Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-01-12T04-02-40Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T07-06-59Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 106,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 107,
          "startColumn": 5,
          "endLine": 142,
          "endColumn": 39
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T08-51-26Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T07-43-26Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-25T06-05-24Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-04-23T21-52-01Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-09T06-36-23Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 114,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-09T08-38-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-10T10-03-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-16T08-09-46Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-20T08-05-08Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 120,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-21T21-11-32Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-20T11-35-32Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-20T11-55-38Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-41-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 120,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-52-29Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-54-00Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-56-54Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 120,
          "endColumn": 40
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T02-41-52Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 106,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-03-07Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-26-58Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-34-41Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-38-21Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T06-08-24Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T05-08-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T07-23-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T07-50-09Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 124,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T22-33-07Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 124,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-21T07-28-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-21T14-35-24Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-28T07-19-42Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 124,
          "startColumn": 5,
          "endLine": 210,
          "endColumn": 78
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 9,
          "endLine": 153,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v5.2](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2022-09-01T00-37-28Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 124,
          "startColumn": 5,
          "endLine": 210,
          "endColumn": 78
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 9,
          "endLine": 153,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v5.2](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2022-09-02T05-12-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-02T11-56-45Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 149,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-02T12-49-10Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 153,
          "endColumn": 55
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 123,
          "startColumn": 9,
          "endLine": 128,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v5.2](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2022-09-02T13-24-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-08T11-25-17Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-19T03-27-48Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T05-31-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-20T10-57-48Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T06-00-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 112,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T05-34-57Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 112,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T06-13-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-02T11-45-12Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-02T12-04-36Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-07T11-06-06Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 47
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T06-36-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 118,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T05-54-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 26
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T06-50-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T07-02-25Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-22T06-12-51Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-23T00-55-36Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-23T05-34-51Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-01T01-51-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-02T03-09-24Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-08T11-34-52Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 118,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-08T12-02-07Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T00-49-09Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T01-05-32Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 220,
          "endColumn": 26
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T01-12-57Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-17T12-16-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 127,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-29T04-37-13Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-29T04-53-44Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T05-11-04Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T05-17-01Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T05-19-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T05-34-06Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 138,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T05-41-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 138,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-02-55Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-22-21Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-37-14Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 122,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-57-15Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-27T02-41-35Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-01T10-32-15Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-01T19-23-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-01T19-50-58Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-04T23-17-22Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-04T23-24-48Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-09T10-17-34Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-12T17-29-14Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-22T10-19-24Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-23T06-19-06Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-23T07-24-31Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-25T01-28-30Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-25T01-54-07Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-25T19-35-21Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-25T20-16-38Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-28T09-36-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-29T09-07-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-30T01-47-57Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-12T07-37-48Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-12T11-26-51Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-23T03-08-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-25T10-56-58Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-25T11-36-13Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-26T09-25-53Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-26T10-40-41Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-27T00-23-48Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-27T03-52-30Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-27T03-53-22Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-27T09-09-20Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-29T02-46-35Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-29T05-02-46Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-29T12-13-10Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-02T07-13-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-07T09-36-23Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-07T10-02-05Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-08T06-35-38Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-11T20-33-19Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-11T21-08-28Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-17T05-39-58Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-18T01-29-23Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 137,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-18T01-35-42Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 137,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-18T02-03-04Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-18T01-44-51Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-04T03-31-38Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-15T06-19-54Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 126,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-22T13-26-47Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T11-50-01Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T21-01-34Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-08-25T22-01-23Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-08T11-00-27Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-17T09-28-29Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-22T07-17-05Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 112,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-22T08-50-06Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-06T08-19-08Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T01-10-13Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T05-27-29Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-23T08-22-08Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-02T07-56-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-02T08-16-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-16T02-33-08Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-18T21-49-37Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-18T23-20-46Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-20T06-37-40Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-30T07-41-15Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-30T08-28-18Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 125,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-12-16T03-43-44Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-12-19T20-33-06Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T06-04-23Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T07-12-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T09-30-25Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 137,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T09-44-44Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T21-48-22Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 118,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T21-13-09Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 130,
          "startColumn": 5,
          "endLine": 219,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-09-53Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-21-28Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-04T08-19-54Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-14T08-47-08Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-17T21-03-10Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-17T10-55-56Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-19T21-09-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 223,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-11T08-12-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 118,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 119,
          "startColumn": 5,
          "endLine": 201,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 202,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-11T08-21-36Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 124,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 301,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-11T08-23-43Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 123,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 124,
          "startColumn": 5,
          "endLine": 211,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 212,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-26T06-44-31Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 356,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-28T12-13-22Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 337,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-28T21-54-02Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-29T08-49-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 327,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-05-20T02-29-28Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-05-25T04-25-17Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-16T22-24-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-17T00-20-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 149,
          "startColumn": 5,
          "endLine": 236,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 237,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-17T00-34-24Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 150,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 151,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 328,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-23T09-40-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 150,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 151,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 240,
          "startColumn": 5,
          "endLine": 332,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-23T09-46-50Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 150,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 151,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 240,
          "startColumn": 5,
          "endLine": 330,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-23T10-10-02Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 150,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 151,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 330,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-07T08-08-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 163,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 164,
          "startColumn": 5,
          "endLine": 251,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 252,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-09T07-23-14Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 163,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 164,
          "startColumn": 5,
          "endLine": 264,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 265,
          "startColumn": 5,
          "endLine": 369,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-07T08-20-12Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 163,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 164,
          "startColumn": 5,
          "endLine": 264,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 265,
          "startColumn": 5,
          "endLine": 369,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-09T07-36-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 270,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 271,
          "startColumn": 5,
          "endLine": 381,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-04T08-47-06Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 271,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 272,
          "startColumn": 5,
          "endLine": 382,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-04T23-52-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 270,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 271,
          "startColumn": 5,
          "endLine": 381,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-07T07-02-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 270,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 271,
          "startColumn": 5,
          "endLine": 380,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-08T03-10-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 270,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 271,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-07T07-38-16Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 270,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 271,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-09T09-29-12Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 280,
          "startColumn": 5,
          "endLine": 394,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-08T03-43-48Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 169,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 170,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 280,
          "startColumn": 5,
          "endLine": 394,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-10T07-48-56Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 171,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 172,
          "startColumn": 5,
          "endLine": 282,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 283,
          "startColumn": 5,
          "endLine": 398,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-12T06-50-24Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 280,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 281,
          "startColumn": 5,
          "endLine": 395,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-19T06-40-47Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 393,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-21T01-38-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 390,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-01T13-26-38Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 283,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 284,
          "startColumn": 5,
          "endLine": 398,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-27T22-04-43Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 390,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-06T06-27-24Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-02T13-00-41Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-08T17-49-18Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-06T06-48-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-09T01-58-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 414,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-10T19-53-45Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 168,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 169,
          "startColumn": 5,
          "endLine": 271,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 272,
          "startColumn": 5,
          "endLine": 382,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-12T06-57-32Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 167,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 168,
          "startColumn": 5,
          "endLine": 269,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 270,
          "startColumn": 5,
          "endLine": 378,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T03-42-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T06-15-49Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T07-07-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T07-55-31Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T11-02-06Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-28T22-53-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 173,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 174,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 384,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-29T12-45-23Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 174,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 175,
          "startColumn": 5,
          "endLine": 276,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 277,
          "startColumn": 5,
          "endLine": 385,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-29T21-07-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-30T07-31-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-30T08-43-47Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-30T09-09-41Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-30T09-11-44Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-03T09-01-59Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-11T00-56-26Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-12T10-06-05Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-08T22-51-18Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 184,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 185,
          "startColumn": 5,
          "endLine": 298,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 299,
          "startColumn": 5,
          "endLine": 416,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-17T19-45-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 175,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 176,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-11T07-01-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 184,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 185,
          "startColumn": 5,
          "endLine": 298,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 299,
          "startColumn": 5,
          "endLine": 416,
          "endColumn": 30
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-22T20-35-00Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 184,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 185,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 404,
          "endColumn": 33
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T00-56-05Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 272,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 273,
          "startColumn": 5,
          "endLine": 430,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 431,
          "startColumn": 5,
          "endLine": 533,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 534,
          "startColumn": 5,
          "endLine": 903,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T00-57-33Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 272,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 273,
          "startColumn": 5,
          "endLine": 430,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 431,
          "startColumn": 5,
          "endLine": 533,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 534,
          "startColumn": 5,
          "endLine": 903,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T07-28-17Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 272,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 273,
          "startColumn": 5,
          "endLine": 430,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 431,
          "startColumn": 5,
          "endLine": 533,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 534,
          "startColumn": 5,
          "endLine": 903,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T01-53-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 272,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 273,
          "startColumn": 5,
          "endLine": 430,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 431,
          "startColumn": 5,
          "endLine": 533,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 534,
          "startColumn": 5,
          "endLine": 903,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T07-59-44Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 272,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 273,
          "startColumn": 5,
          "endLine": 430,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 431,
          "startColumn": 5,
          "endLine": 533,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 534,
          "startColumn": 5,
          "endLine": 903,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T09-20-16Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 64,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 65,
          "startColumn": 5,
          "endLine": 268,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 269,
          "startColumn": 5,
          "endLine": 426,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 427,
          "startColumn": 5,
          "endLine": 529,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 530,
          "startColumn": 5,
          "endLine": 899,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T19-28-02Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 267,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 268,
          "startColumn": 5,
          "endLine": 425,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 426,
          "startColumn": 5,
          "endLine": 528,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 529,
          "startColumn": 5,
          "endLine": 898,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T04-26-27Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 267,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 268,
          "startColumn": 5,
          "endLine": 425,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 426,
          "startColumn": 5,
          "endLine": 528,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 529,
          "startColumn": 5,
          "endLine": 898,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T04-37-41Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 267,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 268,
          "startColumn": 5,
          "endLine": 425,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 426,
          "startColumn": 5,
          "endLine": 528,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 529,
          "startColumn": 5,
          "endLine": 898,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T06-49-38Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 445,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 446,
          "startColumn": 5,
          "endLine": 548,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 549,
          "startColumn": 5,
          "endLine": 918,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T08-03-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 446,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 447,
          "startColumn": 5,
          "endLine": 549,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 550,
          "startColumn": 5,
          "endLine": 919,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T20-12-52Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 446,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 447,
          "startColumn": 5,
          "endLine": 549,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 550,
          "startColumn": 5,
          "endLine": 921,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-01T04-52-42Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 78,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 79,
          "startColumn": 5,
          "endLine": 293,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 294,
          "startColumn": 5,
          "endLine": 461,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 462,
          "startColumn": 5,
          "endLine": 564,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 565,
          "startColumn": 5,
          "endLine": 936,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-02T20-53-01Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 78,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 79,
          "startColumn": 5,
          "endLine": 293,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 294,
          "startColumn": 5,
          "endLine": 461,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 462,
          "startColumn": 5,
          "endLine": 564,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 565,
          "startColumn": 5,
          "endLine": 936,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-04T20-42-19Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 68,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 69,
          "startColumn": 5,
          "endLine": 283,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 284,
          "startColumn": 5,
          "endLine": 451,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 452,
          "startColumn": 5,
          "endLine": 554,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 555,
          "startColumn": 5,
          "endLine": 926,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-04T21-02-28Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 68,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 69,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 275,
          "startColumn": 5,
          "endLine": 442,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 443,
          "startColumn": 5,
          "endLine": 545,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 546,
          "startColumn": 5,
          "endLine": 917,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-05T21-34-14Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 95,
          "startColumn": 5,
          "endLine": 317,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 318,
          "startColumn": 5,
          "endLine": 501,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 502,
          "startColumn": 5,
          "endLine": 617,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 618,
          "startColumn": 5,
          "endLine": 989,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-06T21-10-19Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 97,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 98,
          "startColumn": 5,
          "endLine": 323,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 324,
          "startColumn": 5,
          "endLine": 510,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 511,
          "startColumn": 5,
          "endLine": 629,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 630,
          "startColumn": 5,
          "endLine": 1001,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-07T07-32-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 97,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 98,
          "startColumn": 5,
          "endLine": 323,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 324,
          "startColumn": 5,
          "endLine": 510,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 511,
          "startColumn": 5,
          "endLine": 629,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 630,
          "startColumn": 5,
          "endLine": 1001,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-09T23-54-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 329,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 330,
          "startColumn": 5,
          "endLine": 516,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 517,
          "startColumn": 5,
          "endLine": 635,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 636,
          "startColumn": 5,
          "endLine": 1007,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-10T00-16-07Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 329,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 330,
          "startColumn": 5,
          "endLine": 516,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 517,
          "startColumn": 5,
          "endLine": 635,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 636,
          "startColumn": 5,
          "endLine": 1007,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-14T08-16-49Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 328,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 329,
          "startColumn": 5,
          "endLine": 514,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 515,
          "startColumn": 5,
          "endLine": 633,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 634,
          "startColumn": 5,
          "endLine": 1005,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-15T22-56-23Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 277,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 278,
          "startColumn": 5,
          "endLine": 502,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 503,
          "startColumn": 5,
          "endLine": 688,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 689,
          "startColumn": 5,
          "endLine": 807,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 808,
          "startColumn": 5,
          "endLine": 1179,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-16T02-19-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 103,
          "startColumn": 5,
          "endLine": 276,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 277,
          "startColumn": 5,
          "endLine": 501,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 502,
          "startColumn": 5,
          "endLine": 687,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 688,
          "startColumn": 5,
          "endLine": 806,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 807,
          "startColumn": 5,
          "endLine": 1178,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-17T05-24-18Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 103,
          "startColumn": 5,
          "endLine": 276,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 277,
          "startColumn": 5,
          "endLine": 501,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 502,
          "startColumn": 5,
          "endLine": 687,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 688,
          "startColumn": 5,
          "endLine": 806,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 807,
          "startColumn": 5,
          "endLine": 1178,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-18T01-01-17Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 103,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 685,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 686,
          "startColumn": 5,
          "endLine": 804,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 805,
          "startColumn": 5,
          "endLine": 1176,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-18T07-15-22Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 103,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 685,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 686,
          "startColumn": 5,
          "endLine": 804,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 805,
          "startColumn": 5,
          "endLine": 1176,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-18T07-38-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 102,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 103,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 499,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 500,
          "startColumn": 5,
          "endLine": 685,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 686,
          "startColumn": 5,
          "endLine": 804,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 805,
          "startColumn": 5,
          "endLine": 1176,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-20T21-01-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 105,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 106,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 502,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 503,
          "startColumn": 5,
          "endLine": 692,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 693,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 1183,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-18T21-19-39Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 105,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 106,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 502,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 503,
          "startColumn": 5,
          "endLine": 688,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 689,
          "startColumn": 5,
          "endLine": 807,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 808,
          "startColumn": 5,
          "endLine": 1179,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-20T21-22-25Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 105,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 106,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 502,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 503,
          "startColumn": 5,
          "endLine": 692,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 693,
          "startColumn": 5,
          "endLine": 811,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 812,
          "startColumn": 5,
          "endLine": 1183,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-20T22-52-10Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 108,
          "startColumn": 5,
          "endLine": 282,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 283,
          "startColumn": 5,
          "endLine": 508,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 509,
          "startColumn": 5,
          "endLine": 704,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 705,
          "startColumn": 5,
          "endLine": 829,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 830,
          "startColumn": 5,
          "endLine": 1201,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T21-43-30Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 232,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 233,
          "startColumn": 5,
          "endLine": 268,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 269,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T10-56-37Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 108,
          "startColumn": 5,
          "endLine": 282,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 283,
          "startColumn": 5,
          "endLine": 508,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 509,
          "startColumn": 5,
          "endLine": 704,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 705,
          "startColumn": 5,
          "endLine": 829,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 830,
          "startColumn": 5,
          "endLine": 1208,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 1209,
          "startColumn": 5,
          "endLine": 1582,
          "endColumn": 54
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T22-13-20Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 232,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 233,
          "startColumn": 5,
          "endLine": 268,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 269,
          "startColumn": 5,
          "endLine": 291,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 292,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T23-13-56Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 232,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 233,
          "startColumn": 5,
          "endLine": 268,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 269,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 295,
          "startColumn": 5,
          "endLine": 316,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-25T05-02-10Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 232,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 233,
          "startColumn": 5,
          "endLine": 268,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 269,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 295,
          "startColumn": 5,
          "endLine": 316,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-25T06-06-00Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 118,
          "startColumn": 5,
          "endLine": 191,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 192,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 275,
          "startColumn": 5,
          "endLine": 300,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 301,
          "startColumn": 5,
          "endLine": 322,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-25T05-23-12Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 46,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 47,
          "startColumn": 5,
          "endLine": 117,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 118,
          "startColumn": 5,
          "endLine": 191,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 192,
          "startColumn": 5,
          "endLine": 238,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 239,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 275,
          "startColumn": 5,
          "endLine": 300,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 301,
          "startColumn": 5,
          "endLine": 322,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-31T20-56-53Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 120,
          "startColumn": 5,
          "endLine": 194,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 195,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 278,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 279,
          "startColumn": 5,
          "endLine": 304,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 305,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-02-05T04-32-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 120,
          "startColumn": 5,
          "endLine": 194,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 195,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 288,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 289,
          "startColumn": 5,
          "endLine": 315,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 316,
          "startColumn": 5,
          "endLine": 338,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-02-05T22-20-47Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 47,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 48,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 120,
          "startColumn": 5,
          "endLine": 194,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 195,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 288,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 289,
          "startColumn": 5,
          "endLine": 315,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 316,
          "startColumn": 5,
          "endLine": 338,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-01-02T21-09-57Z": []
  },
  "metadata": {
    "2020-07-18T01-12-27Z": {
      "triggers": {
        "release": {
          "types": [
            "created"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "deploy": 6
      },
      "line_count": 32,
      "workflow": "name: build\n\non:\n  release:\n    types: [created]\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python3 setup.py build_ext --inplace\n      - name: Test\n        run: |\n          bash scripts/run_tests.sh\n      - name: Post Build\n          python scripts/cleanup.py\n"
    },
    "2020-07-18T01-15-20Z": {
      "triggers": {
        "release": {
          "types": [
            "created"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "deploy": 6
      },
      "line_count": 33,
      "workflow": "name: build\n\non:\n  release:\n    types: [created]\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python3 setup.py build_ext --inplace\n      - name: Test\n        run: |\n          bash scripts/run_tests.sh\n      - name: Post Build\n        run: |\n          python scripts/cleanup.py\n"
    },
    "2020-07-18T01-17-08Z": {
      "triggers": {
        "release": {
          "types": [
            "created"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "deploy": 6
      },
      "line_count": 31,
      "workflow": "name: build\n\non:\n  release:\n    types: [created]\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python3 setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Post Build\n        run: python scripts/cleanup.py\n"
    },
    "2020-07-18T01-24-45Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 6
      },
      "line_count": 31,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python3 setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Post Build\n        run: python scripts/cleanup.py\n"
    },
    "2020-07-18T01-21-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "deploy": 6
      },
      "line_count": 31,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python3 setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Post Build\n        run: python scripts/cleanup.py\n"
    },
    "2020-07-18T01-41-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 6
      },
      "line_count": 36,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Publish\n        env:\n          TWINE_USERNAME: __token__\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist bdist_wheel\n          twine upload dist/*\n"
    },
    "2020-07-18T01-42-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 6
      },
      "line_count": 36,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist bdist_wheel\n          twine upload dist/*\n"
    },
    "2020-07-18T01-51-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 6
      },
      "line_count": 36,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist\n          twine upload dist/*\n"
    },
    "2020-07-18T08-46-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 7
      },
      "line_count": 40,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build_ext --inplace\n      - name: Test\n        run: |\n          pip install pytest-cov\n          pytest --ignore=tests/performance_tests/ --cov=./ --cov-report=xml\n      - name: Upload Codecov\n        uses: codecov/codecov-action@v1\n      - name: Publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist\n          twine upload dist/*\n"
    },
    "2020-07-18T09-14-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "master"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 6
      },
      "line_count": 36,
      "workflow": "name: build\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          sudo apt-get install redis-server\n          sudo redis-server --daemonize yes\n      - name: Build\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build_ext --inplace\n      - name: Test\n        run: bash scripts/run_tests.sh\n      - name: Publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist\n          twine upload dist/*\n"
    },
    "2021-09-26T12-11-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13,
        "docs": 11
      },
      "line_count": 165,
      "workflow": "name: build\n\n# Build and test NautilusTrader then build and deploy the docs\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n\n  docs:\n    needs: [ build-test ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools poetry\n\n      # Export package requirements\n      - name: Export package requirements\n        run: poetry export --extras docs --without-hashes -f requirements.txt > requirements.txt\n\n      # Install package dependencies\n      - name: Install package dependencies\n        run: pip install -r requirements.txt\n\n      # Install extra docs dependencies\n      - name: Install extra docs dependencies\n        run: pip install toml numpydoc sphinx sphinx-rtd-theme\n\n      # Build project\n      - name: Build project\n        run: python build.py\n\n      # Build docs\n      - name: Build docs\n        run: catchsegv sphinx-build docs/source docs/build\n\n      # Add nojeckyll\n      - name: Add nojeckyll\n        run: touch docs/build/.nojekyll\n\n      # Add CNAME\n      - name: Add CNAME\n        run: echo \"api.nautilustrader.io\" >> docs/build/CNAME\n\n      # Publish API docs\n      - name: Publish API docs\n        uses: s0/git-publish-subdir-action@develop\n        env:\n          REPO: self\n          BRANCH: gh-pages\n          FOLDER: docs/build\n          SQUASH_HISTORY: false\n          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}\n"
    },
    "2021-09-26T12-12-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13,
        "docs": 11
      },
      "line_count": 165,
      "workflow": "name: build\n\n# Build and test NautilusTrader then build and deploy the docs\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n\n  docs:\n    needs: [ build ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools poetry\n\n      # Export package requirements\n      - name: Export package requirements\n        run: poetry export --extras docs --without-hashes -f requirements.txt > requirements.txt\n\n      # Install package dependencies\n      - name: Install package dependencies\n        run: pip install -r requirements.txt\n\n      # Install extra docs dependencies\n      - name: Install extra docs dependencies\n        run: pip install toml numpydoc sphinx sphinx-rtd-theme\n\n      # Build project\n      - name: Build project\n        run: python build.py\n\n      # Build docs\n      - name: Build docs\n        run: catchsegv sphinx-build docs/source docs/build\n\n      # Add nojeckyll\n      - name: Add nojeckyll\n        run: touch docs/build/.nojekyll\n\n      # Add CNAME\n      - name: Add CNAME\n        run: echo \"api.nautilustrader.io\" >> docs/build/CNAME\n\n      # Publish API docs\n      - name: Publish API docs\n        uses: s0/git-publish-subdir-action@develop\n        env:\n          REPO: self\n          BRANCH: gh-pages\n          FOLDER: docs/build\n          SQUASH_HISTORY: false\n          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}\n"
    },
    "2021-09-26T20-37-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader then build and deploy the docs\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n"
    },
    "2021-09-26T12-15-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13,
        "docs": 11
      },
      "line_count": 165,
      "workflow": "name: build\n\n# Build and test NautilusTrader then build and deploy the docs\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n\n  docs:\n    needs: [ build ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools poetry\n\n      # Export package requirements\n      - name: Export package requirements\n        run: poetry export --extras docs --without-hashes -f requirements.txt > requirements.txt\n\n      # Install package dependencies\n      - name: Install package dependencies\n        run: pip install -r requirements.txt\n\n      # Install extra docs dependencies\n      - name: Install extra docs dependencies\n        run: pip install toml numpydoc sphinx sphinx-rtd-theme\n\n      # Build project\n      - name: Build project\n        run: python build.py\n\n      # Build docs\n      - name: Build docs\n        run: catchsegv sphinx-build docs/source docs/build\n\n      # Add nojeckyll\n      - name: Add nojeckyll\n        run: touch docs/build/.nojekyll\n\n      # Add CNAME\n      - name: Add CNAME\n        run: echo \"api.nautilustrader.io\" >> docs/build/CNAME\n\n      # Publish API docs\n      - name: Publish API docs\n        uses: s0/git-publish-subdir-action@develop\n        env:\n          REPO: self\n          BRANCH: gh-pages\n          FOLDER: docs/build\n          SQUASH_HISTORY: false\n          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}\n"
    },
    "2021-09-26T21-02-20Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result (Linux)\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n"
    },
    "2021-09-26T21-03-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (UNIX)\n      - name: Run tests (UNIX)\n        if: runner.os != 'Windows'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run code coverage (Linux)\n      - name: Run code coverage (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result (Linux)\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n"
    },
    "2021-09-28T20-14-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 13
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n      - name: Store benchmark result (Linux)\n        if: runner.os == 'Linux'\n        uses: rhysd/github-action-benchmark@v1\n        with:\n          name: Benchmark with pytest-benchmark\n          tool: \"pytest\"\n          output-file-path: output.json\n          github-token: ${{ secrets.GHPAGES_ACCESS }}\n          auto-push: true\n          # Show alert with commit comment on detecting possible performance regression\n          alert-threshold: '200%'\n          comment-always: true\n          fail-on-alert: false\n"
    },
    "2021-10-02T03-29-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-06T20-52-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9, 3.10]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-06T21-02-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9, 3.10.0 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-10T09-26-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 112,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n\n"
    },
    "2021-10-06T21-08-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-10T09-30-00Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.0\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-20T07-06-15Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 111,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n      - uses: pre-commit/action@v2.0.3\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-20T07-14-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 3,
        "build": 12
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n      - uses: pre-commit/action@v2.0.3\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T05-41-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "pre-commit": 4,
        "build": 12
      },
      "line_count": 124,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Cache pre-commit\n      - name: Cache pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: .cache/pre-commit\n          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n  build:\n    needs: [ pre-commit ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T21-29-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 118,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: |\n          pre-commit run --all-files\n          ls .cache/pre-commit\n\n      # Setup cached Poetry environment\n      - name: Setup cached Poetry environment\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T05-44-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 115,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Cache pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: .cache/pre-commit\n          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T21-32-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 118,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: |\n          pre-commit run --all-files\n          ls ~/.cache/pre-commit\n\n      # Setup cached Poetry environment\n      - name: Setup cached Poetry environment\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T21-57-36Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 116,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry environment\n      - name: Setup cached Poetry environment\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T22-00-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 116,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry environment\n      - name: Setup cached Poetry environment\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-test-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n      # Store benchmark results (Linux)\n#      - name: Store benchmark result (Linux)\n#        if: runner.os == 'Linux'\n#        uses: rhysd/github-action-benchmark@v1\n#        with:\n#          name: Benchmark with pytest-benchmark\n#          tool: \"pytest\"\n#          output-file-path: output.json\n#          github-token: ${{ secrets.GHPAGES_ACCESS }}\n#          auto-push: true\n#          # Show alert with commit comment on detecting possible performance regression\n#          alert-threshold: '200%'\n#          comment-always: true\n#          fail-on-alert: false\n"
    },
    "2021-10-22T22-21-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 102,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml') }}-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-build${{ hashFiles('.github/workflows/*.yml') }}-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-build$-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-10-22T22-12-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 101,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml')-${{ hashFiles('.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry environment\n      - name: Setup cached Poetry environment\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml')-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-10-28T03-36-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 102,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-build${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-build$-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-10-23T19-55-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 102,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-build${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-build$-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-10-28T04-10-45Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-10-28T04-31-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 101,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-11-01T04-04-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n          python -m pip install poetry --pre\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-11-01T04-12-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-12-01T11-01-19Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-12-01T11-19-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 104,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-12-01T11-31-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-12-28T23-53-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2021-12-29T00-29-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-01-02T21-13-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-01-12T04-02-40Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-03-24T07-06-59Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 14,
        "build-docker-images": 7
      },
      "line_count": 142,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n\n\n  build-docker-images:\n    needs: [ build ]\n    name: build-docker-images - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Build trader dockerfile\n      - name: Build trader dockerfile\n        run: make docker-build\n\n      # Push trader dockerfile\n      - name: Push trader dockerfile\n        run: make docker-push\n\n      # Build jupyterlab dockerfile\n      - name: Build jupyterlab dockerfile\n        run: make docker-build-jupyter\n\n      # Push jupyterlab dockerfile\n      - name: Push dockerfile\n        run: make docker-push-jupyter\n"
    },
    "2022-03-24T08-51-26Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 102,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-03-24T07-43-26Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-03-25T06-05-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 103,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-04-23T21-52-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 110,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-09T06-36-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 114,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation TODO: Temporarily test pip install as part of normal build\n      - name: Test pip installation\n        run: pip install .\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-09T08-38-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation TODO: Temporarily test pip install as part of normal build\n      - name: Test pip installation\n        run: pip install .\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-10T10-03-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 115,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-16T08-09-46Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n      - name: Run core tests\n        run: (cd nautilus_core && cargo test)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-20T08-05-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 120,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # TODO(cs): Temporarily pause pre-commit\n#      # Setup cached pre-commit\n#      - name: Setup cached pre-commit\n#        id: cache-pre-commit\n#        uses: actions/cache@v2\n#        with:\n#          path: ~/.cache/pre-commit\n#          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n#          restore-keys: |\n#            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n#\n#      # Run pre-commit\n#      - name: Run pre-commit\n#        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n      - name: Run core tests\n        run: (cd nautilus_core && cargo test)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-05-21T21-11-32Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n      - name: Run core tests\n        run: (cd nautilus_core && cargo test)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-20T11-35-32Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n      - name: Run core tests\n        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-20T11-55-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-23T02-41-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 120,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x86, x64]\n        os: [ ubuntu-latest, macos-11, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-23T02-52-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-23T02-54-00Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 119,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-07-23T02-56-54Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 120,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_with_integration\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_with_integration -- no-parallel\n\n      # Run performance tests (Linux)\n      - name: Run performance tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs performance_tests\n"
    },
    "2022-08-20T02-41-52Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 106,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T03-03-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Setup cached Poetry\n        id: cached-poetry-dependencies\n        uses: actions/cache@v2\n        with:\n          path: .venv\n          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      # Install dependencies\n      - name: Install dependencies\n        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n        run: poetry install --no-interaction --no-root\n\n      # Install project\n      - name: Install project\n        run: poetry install --no-interaction\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T03-26-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Setup cached Poetry\n#      - name: Setup cached Poetry\n#        id: cached-poetry-dependencies\n#        uses: actions/cache@v2\n#        with:\n#          path: .venv\n#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      # Install dependencies\n      - name: Install dependencies\n        if: steps.cached-poetry.outputs.cache-hit != 'true'\n        run: poetry install --no-interaction --no-root\n\n      # Install project\n      - name: Install project\n        run: poetry install --no-interaction\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T04-34-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 134,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Setup cached Poetry\n#      - name: Setup cached Poetry\n#        id: cached-poetry-dependencies\n#        uses: actions/cache@v2\n#        with:\n#          path: .venv\n#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      # Install dependencies\n#      - name: Install dependencies\n#        if: steps.cached-poetry.outputs.cache-hit != 'true'\n#        run: poetry install --no-interaction --no-root\n#\n#      # Install project\n#      - name: Install project\n#        run: poetry install --no-interaction\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T04-38-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n\n      # Setup cached Poetry\n#      - name: Setup cached Poetry\n#        id: cached-poetry-dependencies\n#        uses: actions/cache@v3\n#        with:\n#          path: .venv\n#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      # Install dependencies\n#      - name: Install dependencies\n#        if: steps.cached-poetry.outputs.cache-hit != 'true'\n#        run: poetry install --no-interaction --no-root\n#\n#      # Install project\n#      - name: Install project\n#        run: poetry install --no-interaction\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T06-08-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T05-08-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Setup cached Poetry\n#      - name: Setup cached Poetry\n#        id: cached-poetry-dependencies\n#        uses: actions/cache@v3\n#        with:\n#          path: .venv\n#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      # Install dependencies\n#      - name: Install dependencies\n#        if: steps.cached-poetry.outputs.cache-hit != 'true'\n#        run: poetry install --no-interaction --no-root\n#\n#      # Install project\n#      - name: Install project\n#        run: poetry install --no-interaction\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run core tests\n#      - name: Run core tests\n#        run: (cd nautilus_core && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T07-23-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks\n      - name: Run nautilus_core cargo checks\n        run: |\n          (cd nautilus_core && cargo fmt --check)\n          (cd nautilus_core && cargo clippy)\n\n      # Run nautilus_core tests\n#      - name: Run nautilus_core cargo tests\n#        run: |\n#          (cd nautilus_core/common && cargo test --no-default-features)\n#          (cd nautilus_core/core && cargo test --no-default-features)\n#          (cd nautilus_core/model && cargo test --no-default-features)\n#          (cd nautilus_core/persistence && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T07-50-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 124,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --check)\n          (cd nautilus_core && cargo clippy)\n\n      # Run nautilus_core tests\n#      - name: Run nautilus_core cargo tests\n#        run: |\n#          (cd nautilus_core/common && cargo test --no-default-features)\n#          (cd nautilus_core/core && cargo test --no-default-features)\n#          (cd nautilus_core/model && cargo test --no-default-features)\n#          (cd nautilus_core/persistence && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-20T22-33-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 124,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests\n#      - name: Run nautilus_core cargo tests\n#        run: |\n#          (cd nautilus_core/common && cargo test --no-default-features)\n#          (cd nautilus_core/core && cargo test --no-default-features)\n#          (cd nautilus_core/model && cargo test --no-default-features)\n#          (cd nautilus_core/persistence && cargo test --no-default-features)\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-21T07-28-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 121,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-21T14-35-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-08-28T07-19-42Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 17,
        "docker": 13
      },
      "line_count": 210,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n\n  docker:\n    name: build-docker-images\n    runs-on: ubuntu-latest\n    needs: build\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Build docker images\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Login to GHCR\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.PACKAGES_TOKEN }}\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v5.2\n\n      # Build nautilus_trader docker image (develop)\n      - name: Build nautilus_trader image (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        id: docker_build_trader_develop\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/nautilus_trader.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:develop\n          cache-from: type=gha\n          cache-to: type=gha\n      - name: Digest nautilus_trader image\n        run: echo ${{ steps.docker_build_trader_develop.outputs.digest }}\n\n      # Build nautilus_trader docker image (latest)\n      - name: Build nautilus_trader image (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        id: docker_build_trader_latest\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/nautilus_trader.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:latest\n          cache-from: type=gha\n          cache-to: type=gha\n      - name: Digest nautilus_trader image\n        run: echo ${{ steps.docker_build_trader_latest.outputs.digest }}\n\n      # Build jupyterlab docker image (develop)\n      - name: Build jupyterlab image (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        id: docker_build_jupyterlab_develop\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/jupyterlab.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:develop\n          cache-from: type=gha\n          cache-to: type=gha\n          build-args: |\n            GIT_TAG=${{ steps.branch-name.outputs.current_branch }}\n      - name: Digest jupyterlab image\n        run: echo ${{ steps.docker_build_jupyterlab_develop.outputs.digest }}\n\n      # Build jupyterlab docker image (latest)\n      - name: Build jupyterlab image (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        id: docker_build_jupyterlab_latest\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/jupyterlab.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:latest\n          cache-from: type=gha\n          cache-to: type=gha\n          build-args: |\n            GIT_TAG=latest\n      - name: Digest jupyterlab image\n        run: echo ${{ steps.docker_build_jupyterlab_latest.outputs.digest }}\n"
    },
    "2022-09-01T00-37-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 17,
        "docker": 13
      },
      "line_count": 210,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n\n  docker:\n    name: build-docker-images\n    runs-on: ubuntu-latest\n    needs: build\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Build docker images\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Login to GHCR\n        uses: docker/login-action@v1\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.PACKAGES_TOKEN }}\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v5.2\n\n      # Build nautilus_trader docker image (develop)\n      - name: Build nautilus_trader image (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        id: docker_build_trader_develop\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/nautilus_trader.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:develop\n          cache-from: type=gha\n          cache-to: type=gha\n      - name: Digest nautilus_trader image\n        run: echo ${{ steps.docker_build_trader_develop.outputs.digest }}\n\n      # Build nautilus_trader docker image (latest)\n      - name: Build nautilus_trader image (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        id: docker_build_trader_latest\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/nautilus_trader.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/nautilus_trader:latest\n          cache-from: type=gha\n          cache-to: type=gha\n      - name: Digest nautilus_trader image\n        run: echo ${{ steps.docker_build_trader_latest.outputs.digest }}\n\n      # Build jupyterlab docker image (develop)\n      - name: Build jupyterlab image (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        id: docker_build_jupyterlab_develop\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/jupyterlab.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:develop\n          cache-from: type=gha\n          cache-to: type=gha\n          build-args: |\n            GIT_TAG=${{ steps.branch-name.outputs.current_branch }}\n      - name: Digest jupyterlab image\n        run: echo ${{ steps.docker_build_jupyterlab_develop.outputs.digest }}\n\n      # Build jupyterlab docker image (latest)\n      - name: Build jupyterlab image (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        id: docker_build_jupyterlab_latest\n        uses: docker/build-push-action@v2\n        with:\n          file: \".docker/jupyterlab.dockerfile\"\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/jupyterlab:latest\n          cache-from: type=gha\n          cache-to: type=gha\n          build-args: |\n            GIT_TAG=latest\n      - name: Digest jupyterlab image\n        run: echo ${{ steps.docker_build_jupyterlab_latest.outputs.digest }}\n"
    },
    "2022-09-02T05-12-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 121,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-09-02T11-56-45Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 22
      },
      "line_count": 149,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n\n      # Build docs (develop)\n      - name: Build docs (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        run: poetry run sphinx-build docs docs/build/html -b html\n\n      # Build docs (latest)\n      - name: Build docs (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        run: poetry run sphinx-build docs docs/build/html -b html\n\n      # Add nojeckyll\n      - name: Add nojeckyll\n        run: touch docs/build/html/.nojekyll\n\n      # Add CNAME\n      - name: Add CNAME\n        run: echo \"docs.nautilustrader.io\" >> docs/build/html/CNAME\n\n      # Publish docs\n      - name: Publish docs\n        uses: s0/git-publish-subdir-action@develop\n        env:\n          REPO: self\n          BRANCH: gh-pages\n          FOLDER: docs/build/html\n          SQUASH_HISTORY: false\n          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}\n"
    },
    "2022-09-02T12-49-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 23
      },
      "line_count": 153,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v5.2\n\n      # Build docs (develop)\n      - name: Build docs (develop)\n        if: ${{ steps.branch-name.outputs.current_branch == 'develop' }}\n        run: poetry run sphinx-build docs docs/build/html -b html\n\n      # Build docs (latest)\n      - name: Build docs (latest)\n        if: ${{ steps.branch-name.outputs.current_branch == 'master' }}\n        run: poetry run sphinx-build docs docs/build/html -b html\n\n      # Add nojeckyll\n      - name: Add nojeckyll\n        run: touch docs/build/html/.nojekyll\n\n      # Add CNAME\n      - name: Add CNAME\n        run: echo \"docs.nautilustrader.io\" >> docs/build/html/CNAME\n\n      # Publish docs\n      - name: Publish docs\n        uses: s0/git-publish-subdir-action@develop\n        env:\n          REPO: self\n          BRANCH: gh-pages\n          FOLDER: docs/build/html\n          SQUASH_HISTORY: false\n          GITHUB_TOKEN: ${{ secrets.GHPAGES_ACCESS }}\n"
    },
    "2022-09-02T13-24-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 121,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-09-08T11-25-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 121,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [ master, develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x64, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-19T03-27-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-23T05-31-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-20T10-57-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup cached Poetry\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-23T06-00-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 112,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-23T05-34-57Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 112,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-10-23T06-13-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-12-02T11-45-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-12-02T12-04-36Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-12-07T11-06-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 113,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs tests_all\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: nox -rs tests_all\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: nox -rs tests_all -- no-parallel\n"
    },
    "2022-12-10T06-36-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 118,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: scripts/test.sh\n        shell: bash\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: scripts/test.sh\n        shell: bash\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: scripts/test.sh\n        shell: pwsh\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2022-12-10T05-54-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 102,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests\n      - name: Run tests\n        run: make pytest\n"
    },
    "2022-12-10T06-50-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 115,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: pwsh scripts/test.sh\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2022-12-10T07-02-25Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --extras \"betfair docker ib redis\"\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2022-12-22T06-12-51Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --extras \"betfair docker ib redis\"\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2022-12-23T00-55-36Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --extras \"betfair docker ib redis\"\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2022-12-23T05-34-51Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --extras \"betfair docker ib redis\"\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-01T01-51-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --extras \"betfair docker ib redis\"\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-02T03-09-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-08T11-34-52Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 118,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      LD_LIBRARY_PATH: $LD_LIBRARY_PATH:/nautilus_trader/core/rust/libs\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-08T12-02-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 117,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-14T00-49-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-14T01-05-32Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 17,
        "build-linux-arm64": 14
      },
      "line_count": 220,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n\n  build-linux-arm64:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu20.04]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n\n    name: build - Python ${{ matrix.python-version }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: uraimo/run-on-arch-action@v2\n        name: Run commands\n        with:\n          arch: armv7\n          distro: ${{ matrix.os }}\n          # Not required, but speeds up builds by storing container images in\n          # a GitHub package registry.\n          githubToken: ${{ github.token }}\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-arm64-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-arm64-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-arm64-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        run: make pytest\n"
    },
    "2023-01-14T01-12-57Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-17T12-16-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 127,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-29T04-37-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make test-examples\n          make pytest\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make test-examples\n          make pytest\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-01-29T04-53-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T05-11-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 129,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"{dir}={$(poetry config cache-dir)}\" >> $GITHUB_OUTPUT\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T05-17-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 129,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"{dir}={$(poetry config cache-dir)}\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T05-19-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 129,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T05-34-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 19
      },
      "line_count": 138,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Appendche-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T05-41-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 19
      },
      "line_count": 138,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core checks (Linux & macOS)\n      - name: Run nautilus_core cargo checks\n        if: runner.os != 'Windows'\n        run: |\n          (cd nautilus_core && cargo fmt --all -- --check)\n          (cd nautilus_core && cargo clippy -- -D warnings)\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T06-02-55Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T06-22-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 132,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          target: aarch64-apple-darwin\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T06-37-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 122,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          target: x86_64-apple-darwin\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-19T06-57-15Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-02-27T02-41-35Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-01T10-32-15Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # TODO(cs): Temporarily pausing macos and windows CI\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-01T19-23-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-01T19-50-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-04T23-17-22Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 130,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Install Memurai (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install memurai-developer.install\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          # make test-examples // TODO(cs): Pending accounting investigation\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-04T23-24-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-09T10-17-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-12T17-29-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-22T10-19-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-23T06-19-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-23T07-24-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-25T01-28-30Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]  # [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-25T01-54-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-25T19-35-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-25T20-16-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]  # macos-latest\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-28T09-36-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-29T09-07-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]  # macos-latest\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-03-30T01-47-57Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-12T07-37-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-12T11-26-51Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-23T03-08-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-25T10-56-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-25T11-36-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-26T09-25-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-26T10-40-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-27T00-23-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests -k \"not no_ci\" --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-27T03-52-30Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-27T03-53-22Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-27T09-09-20Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-29T02-46-35Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-29T05-02-46Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-04-29T12-13-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-02T07-13-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-07T09-36-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-07T10-02-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-08T06-35-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 133,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os == 'Linux'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os == 'Windows'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: 1.69.0 # Issues on Windows with toolchain version 1.70.0\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-11T20-33-19Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 132,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        # if: runner.os == 'Linux'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # - name: Set up Rust tool-chain (macOS)\n      #   if: runner.os == 'macOS'\n      #   uses: actions-rs/toolchain@v1\n      #   with:\n      #     toolchain: stable\n      #     components: rustfmt, clippy\n      #\n      # - name: Set up Rust tool-chain (Liux/Windows)\n      #   if: runner.os == 'Windows'\n      #   uses: actions-rust-lang/setup-rust-toolchain@v1\n      #   with:\n      #     toolchain: 1.69.0 # Issues on Windows with toolchain version 1.70.0\n      #     components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-11T21-08-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-17T05-39-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-18T01-29-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 19
      },
      "line_count": 137,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Setup for Windows builds\n      - name: Set up MSVC environment\n        if: runner.os == 'Windows'\n        uses: microsoft/setup-msbuild@v1.0.1\n\n      - name: Install Visual Studio Build Tools\n        if: runner.os == 'Windows'\n        run: |\n          choco install visualstudio2019buildtools --package-parameters \"--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64\"\n          refreshenv\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-18T01-35-42Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 19
      },
      "line_count": 137,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Setup for Windows builds\n      - name: Set up MSVC environment\n        if: runner.os == 'Windows'\n        uses: microsoft/setup-msbuild@v1.1\n\n      - name: Install Visual Studio Build Tools\n        if: runner.os == 'Windows'\n        run: |\n          choco install visualstudio2019buildtools --package-parameters \"--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64\"\n          refreshenv\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-18T02-03-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-06-18T01-44-51Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Setup for Windows builds\n      - name: Set up MSVC environment\n        if: runner.os == 'Windows'\n        uses: microsoft/setup-msbuild@v1.1\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-07-04T03-31-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-07-15T06-19-54Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 126,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, \"windows-latest\"]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux/Windows) stable\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Install and run database dependencies\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run nautilus_core tests (Linux & macOS)\n      - name: Run nautilus_core cargo tests\n        if: runner.os != 'Windows'\n        run: make cargo-test\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (macOS)\n      - name: Run tests (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests (Windows) without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-07-22T13-26-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-07-30T11-50-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-07-30T21-01-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-08-25T22-01-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-09-08T11-00-27Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-09-17T09-28-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 107,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-09-22T07-17-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 112,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Setup poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-09-22T08-50-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 110,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-10-06T08-19-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 110,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-10-07T01-10-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 110,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-10-07T05-27-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-10-23T08-22-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 123,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-02T07-56-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-02T08-16-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-16T02-33-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]  # macos-latest\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-18T21-49-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]  # macos-latest\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-18T23-20-46Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # macos-latest, windows-latest\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-20T06-37-40Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-30T07-41-15Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-11-30T08-28-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 125,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-12-16T03-43-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2023-12-19T20-33-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-01-06T06-04-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 133,
      "workflow": "name: build\n\n# Build and test NautilusTrader\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-01-06T07-12-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-01-06T09-30-25Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 137,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        include:\n          - os: ubuntu-latest\n            python-version: [\"3.10\", \"3.11\", \"3.12\"]\n          - os: windows-latest\n            python-version: [\"3.10\", \"3.11\", \"3.12\"]\n          - os: macos-latest\n            python-version: [\"3.10\", \"3.11\", \"3.12\"]\n            if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-01-06T09-44-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 131,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-01-06T21-48-22Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 16,
        "build-macos": 14
      },
      "line_count": 207,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-03T21-13-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 17,
        "build-macos": 14
      },
      "line_count": 219,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-03T22-09-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-03T22-21-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-04T08-19-54Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-14T08-47-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # windows-latest\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-17T21-03-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]  # windows-latest\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-17T10-55-56Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-02-19T21-09-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 18,
        "build-macos": 14
      },
      "line_count": 223,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          make pytest\n          make test-examples\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-11T08-12-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 17,
        "build-windows": 12,
        "build-macos": 14
      },
      "line_count": 291,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-11T08-21-36Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 12,
        "build-macos": 15
      },
      "line_count": 301,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-11T08-23-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 15
      },
      "line_count": 306,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (Linux)\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Redis (macOS)\n        run: |\n          brew install redis\n          redis-server --daemonize yes\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-26T06-44-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 15
      },
      "line_count": 356,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-28T12-13-22Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 15
      },
      "line_count": 337,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-28T21-54-02Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-04-29T08-49-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 327,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master'\n    # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-05-20T02-29-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-05-25T04-25-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-16T22-24-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-17T00-20-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-17T00-34-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 17,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 328,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-23T09-40-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 17,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 332,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      CFLAGS: -arch arm64\n      LDFLAGS: -arch arm64\n      CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-23T09-46-50Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 17,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 330,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-06-23T10-10-02Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 17,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 330,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-08-07T08-08-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 13,
        "build-macos": 14
      },
      "line_count": 343,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Setup cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-08-09T07-23-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 369,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest --force\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest --force\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-08-07T08-20-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 369,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          cargo install cargo-nextest\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-08-09T07-36-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 381,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-04T08-47-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 382,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python  # Temporary work around\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-04T23-52-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 381,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # CARGO_BUILD_TARGET: aarch64-apple-darwin\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          # target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-07T07-02-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 15
      },
      "line_count": 380,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-08T03-10-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 16
      },
      "line_count": 385,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free up disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-07T07-38-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 14,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free up disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-09T09-29-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 16,
        "build-macos": 16
      },
      "line_count": 394,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-08T03-43-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 16,
        "build-macos": 16
      },
      "line_count": 394,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-10T07-48-56Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 16,
        "build-macos": 16
      },
      "line_count": 398,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-12T06-50-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 16,
        "build-macos": 16
      },
      "line_count": 395,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-19T06-40-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 16,
        "build-macos": 16
      },
      "line_count": 393,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-21T01-38-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 390,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-01T13-26-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 398,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-09-27T22-04-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 390,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-06T06-27-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 16,
        "build-macos": 17
      },
      "line_count": 414,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit==3.8.0 msgspec  # Temporarily pin pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-02T13-00-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 16,
        "build-macos": 17
      },
      "line_count": 414,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-08T17-49-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 16,
        "build-macos": 17
      },
      "line_count": 414,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-06T06-48-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 16,
        "build-macos": 17
      },
      "line_count": 414,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit==3.8.0 msgspec  # Temporarily pin pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit==3.8.0 msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit==3.8.0 msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-09T01-58-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 16,
        "build-macos": 17
      },
      "line_count": 414,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n          target: aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-10T19-53-45Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 382,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [arm64]\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n          rustup target add aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-12T06-57-32Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 378,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T03-42-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      - name: Run benchmarks (Linux)\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T06-15-49Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      - name: Run benchmarks (Linux)\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --codspeed\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T07-07-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      - name: Run benchmarks (Linux)\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: poetry run pytest tests/performance_tests --codspeed\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T07-55-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # - name: Run benchmarks (Linux)\n      #   uses: CodSpeedHQ/action@v3\n      #   with:\n      #     token: ${{ secrets.CODSPEED_TOKEN }}\n      #     run: poetry run pytest tests/performance_tests --codspeed\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T11-02-06Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      - name: Run benchmarks (Linux)\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: poetry run pytest tests/performance_tests --codspeed\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-28T22-53-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 384,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      - name: Run benchmarks (Linux)\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-29T12-45-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 385,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Temporarily disable\n      # - name: Run benchmarks (Linux)\n      #   uses: CodSpeedHQ/action@v3\n      #   with:\n      #     token: ${{ secrets.CODSPEED_TOKEN }}\n      #     run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-29T21-07-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version }} == \"3.12\"\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-30T07-31-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version }} == \"3.12\"\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-30T08-43-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == \"3.12\" }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-30T09-09-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: matrix.python-version == \"3.12\"\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-10-30T09-11-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-11-03T09-01-59Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 18,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      # - name: Run benchmarks (Linux)\n      #   if: ${{ matrix.python-version == '3.12' }}\n      #   uses: CodSpeedHQ/action@v3\n      #   with:\n      #     token: ${{ secrets.CODSPEED_TOKEN }}\n      #     run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-11-11T00-56-26Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec pytest-codspeed\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-11-12T10-06-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-12-08T22-51-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 20,
        "build-windows": 17,
        "build-macos": 17
      },
      "line_count": 416,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (Windows)\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-11-17T19-45-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 19,
        "build-windows": 15,
        "build-macos": 16
      },
      "line_count": 386,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-12-11T07-01-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build": 20,
        "build-windows": 17,
        "build-macos": 17
      },
      "line_count": 416,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (Windows)\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n"
    },
    "2024-12-22T20-35-00Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "build-linux": 20,
        "build-macos": 17,
        "build-windows": 15
      },
      "line_count": 404,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core cargo tests (Linux)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (Linux)\n        run: |\n          make pytest\n          make test-examples\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks (Linux)\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: make test-performance\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Free disk space (macOS)\n        run: |\n          sudo rm -rf ~/Library/Caches/*\n          sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n          sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n      - name: Run nautilus_core cargo tests (macOS)\n        run: |\n          if ! command -v cargo-nextest &> /dev/null\n          then\n              echo \"cargo-nextest not found, installing...\"\n              cargo install cargo-nextest\n          else\n              echo \"cargo-nextest is already installed\"\n          fi\n          make cargo-test\n\n      - name: Run tests (macOS)\n        run: |\n          make pytest\n          make test-examples\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: debug\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (Windows)\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Free disk space (Windows)\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests (Windows)\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n"
    },
    "2024-12-24T00-56-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 24,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 904,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: $github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Run examples\n        if: ${{ matrix.python-version == '3.12' }}\n        run: make test-examples\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Links for nautilus-trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Links for nautilus-trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T00-57-33Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 24,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 904,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Run examples\n        if: ${{ matrix.python-version == '3.12' }}\n        run: make test-examples\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Links for nautilus-trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Links for nautilus-trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T07-28-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 24,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 904,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Run examples\n        if: ${{ matrix.python-version == '3.12' }}\n        run: make test-examples\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Links for nautilus-trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Links for nautilus-trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T01-53-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 904,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      # - name: Run examples\n      #   if: ${{ matrix.python-version == '3.12' }}\n      #   run: make test-examples\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Links for nautilus-trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Links for nautilus-trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T07-59-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 24,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 904,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Run examples\n        if: ${{ matrix.python-version == '3.12' }}\n        run: make test-examples\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T09-20-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 900,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    if: github.ref == 'refs/heads/develop'\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-24T19-28-02Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 899,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\".a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up .a wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.a\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.a.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+\\.a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-25T04-26-27Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 900,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]];\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n\n"
    },
    "2024-12-25T04-37-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 899,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n            new_version=\"${current_version%-*}${suffix}\"\n          else\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n            new_version=\"${current_version%-*}${suffix}\"\n          fi\n\n          if [[ \"$current_version\" != *\"$suffix\"* ]]; then\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-25T06-49-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 919,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      - name: Run benchmarks\n        if: ${{ matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-25T08-03-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 920,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      # TODO: Change to ubuntu-latest when GitHub stabilizes\n      - name: Run benchmarks\n        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"${index_file}\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"${index_file}\"\n            echo \"No existing index.html found, creating a new one...\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found hash for $file\"\n              fi\n            done < \"$index_file\"\n            echo \"Total hashes found: ${#existing_hashes[@]}\"\n          fi\n\n          # Fetch existing wheels from the bucket\n          echo \"Fetching existing wheels from the bucket...\"\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # Find local wheel files\n          mkdir -p dist/all\n          local_files=$(find dist/all -type f -name \"*.whl\" -exec basename {} \\;)\n\n          # Merge existing files with local wheels\n          all_files=$(echo -e \"${existing_files}\\n${local_files}\" | sort -u)\n\n          # Prepare a new HTML file (temp file for atomic update)\n          temp_html=$(mktemp)\n          echo '<!DOCTYPE html>' > \"$temp_html\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$temp_html\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"$temp_html\"\n\n          # Add files to the index\n          for file in $all_files; do\n            hash=\"${existing_hashes[\"$file\"]:-}\"\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"Using existing hash for $file: $hash\"\n            elif [[ -f \"dist/all/$file\" ]]; then\n              # Calculate hash for local file\n              hash=$(sha256sum \"dist/all/$file\" | awk '{print $1}')\n              echo \"Calculated hash for local file $file: $hash\"\n            else\n              # File isn't local and has no known hash -> download, compute\n              echo \"Downloading missing wheel to compute hash for $file...\"\n              tmpfile=$(mktemp)\n              if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                echo \"Calculated hash after download for $file: $hash\"\n              else\n                echo \"Warning: Could not download $file for hashing.\"\n                hash=\"\"\n              fi\n              rm -f \"$tmpfile\"\n            fi\n\n            # Escape special HTML characters in the filename\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n\n            if [[ -n \"$hash\" ]]; then\n              echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            else\n              echo \"<a href=\\\"$escaped_file\\\">$escaped_file</a><br>\" >> \"$temp_html\"\n            fi\n          done\n\n          echo '</body></html>' >> \"$temp_html\"\n\n          # Replace the old index.html atomically\n          mv \"$temp_html\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2024-12-25T20-12-52Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 9,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 922,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      # TODO: Change to ubuntu-latest when GitHub stabilizes\n      - name: Run benchmarks\n        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2025-01-01T04-52-42Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 9,
        "pre-commit-feedback": 1,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 937,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  pre-commit-feedback:\n    needs: [pre-commit]\n    if: failure() && needs.pre-commit.result == 'failure' && github.event_name == 'pull_request'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add PR comment\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      # TODO: Change to ubuntu-latest when GitHub stabilizes\n      - name: Run benchmarks\n        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2025-01-02T20-53-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 9,
        "pre-commit-feedback": 1,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 937,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    name: pre-commit - python ${{ matrix.python-version }}\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: |\n          # pre-commit run --hook-stage manual gitlint-ci\n          pre-commit run --all-files\n\n  pre-commit-feedback:\n    needs: [pre-commit]\n    if: failure() && needs.pre-commit.result == 'failure' && github.event_name == 'pull_request'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add PR comment\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      # TODO: Change to ubuntu-latest when GitHub stabilizes\n      - name: Run benchmarks\n        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2025-01-04T20-42-19Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 10,
        "build-linux": 23,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 927,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      # Run codspeed for latest python-version only\n      # TODO: Change to ubuntu-latest when GitHub stabilizes\n      - name: Run benchmarks\n        if: ${{ matrix.os == 'ubuntu-24.04' && matrix.python-version == '3.12' }}\n        uses: CodSpeedHQ/action@v3\n        with:\n          token: ${{ secrets.CODSPEED_TOKEN }}\n          run: pytest tests/performance_tests --benchmark-disable-gc --codspeed\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2025-01-04T21-02-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 10,
        "build-linux": 22,
        "build-macos": 21,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 918,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04]  # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug  # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: '*.whl'\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n"
    },
    "2025-01-05T21-34-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 12,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 989,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ runner.os }}-sccache-pre-commit-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ runner.os }}-sccache-pre-commit-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04] # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-06T21-10-19Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 12,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1001,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04] # TODO: Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-07T07-32-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 12,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1001,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-09T23-54-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1007,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit fails\n        if: failure()  # Explicitly fail the job if pre-commit failed\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-10T00-16-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1007,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: failure()\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests --new-first --failed-first\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests --new-first --failed-first\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-14T08-16-49Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 5,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1005,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files\n\n      - name: Add PR comment on failure\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: failure()\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n        env:\n          PARALLEL_BUILD: false\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-15T22-56-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-low-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1179,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: |\n          pre-commit run --all-files || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-low-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build low-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test-low-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-16T02-19-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-low-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1178,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-low-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build low-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test-low-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-17T05-24-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-low-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1178,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-low-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build low-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test-low-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: |\n          make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-18T01-01-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-low-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1176,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-low-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build low-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test-high-precision\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test-high-precision\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-18T07-15-22Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1176,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build low-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-18T07-38-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1176,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-20T21-01-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1183,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' and github.ref_name == 'develop')\n      or (github.event_name == 'pull_request' and github.base_ref == 'develop') )\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-18T21-19-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1179,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-20T21-22-25Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 19,
        "build-linux": 23,
        "build-macos": 22,
        "build-windows": 14,
        "publish-wheels": 10
      },
      "line_count": 1183,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      # - name: Free disk space  # Continue to monitor\n      #   uses: jlumbroso/free-disk-space@main\n      #   with:\n      #     tool-cache: true\n      #     android: false\n      #     dotnet: false\n      #     haskell: false\n      #     large-packages: true\n      #     docker-images: true\n      #     swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space  # Continue to monitor\n      #   run: |\n      #     sudo rm -rf ~/Library/Caches/*\n      #     sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\n      #     sudo rm -rf /Library/Developer/CommandLineTools\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry-plugin-export pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      # - name: Free disk space # Continue to monitor\n      #   run: |\n      #     rm -rf \"/c/Program Files/dotnet\"\n      #     rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-20T22-52-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 6,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 21,
        "build-linux": 25,
        "build-macos": 23,
        "build-windows": 15,
        "publish-wheels": 10
      },
      "line_count": 1201,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels:\n    name: publish-packages\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          mkdir -p ~/.aws\n          echo \"[default]\" > ~/.aws/credentials\n          echo \"aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}\" >> ~/.aws/credentials\n          echo \"aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}\" >> ~/.aws/credentials\n          echo \"[default]\" > ~/.aws/config\n          echo \"region=${{ env.CLOUDFLARE_R2_REGION }}\" >> ~/.aws/config\n          echo \"output=json\" >> ~/.aws/config\n          echo \"AWS CLI configuration completed\"\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-24T21-43-30Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 1,
        "publish-wheels": 1
      },
      "line_count": 310,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Common tests\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Common tests\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Common tests\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-24T10-56-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 13,
        "build-linux-standard-precision": 21,
        "build-linux": 25,
        "build-macos": 23,
        "build-windows": 15,
        "publish-wheels-develop": 10,
        "publish-wheels": 10
      },
      "line_count": 1582,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [\"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install cargo-nextest\n        uses: taiki-e/install-action@v2\n        with:\n          tool: nextest\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Update version in pyproject.toml\n        run: |\n          current_version=$(grep '^version = ' pyproject.toml | cut -d '\"' -f2)\n          if [[ -z \"$current_version\" ]]; then\n            echo \"Error: Failed to extract version from pyproject.toml\" >&2\n            exit 1\n          fi\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the branch name\n          echo \"Branch name: ${branch_name}\"\n          base_version=$(echo \"$current_version\" | sed -E 's/(\\.dev[0-9]{8}\\+[0-9]+|a[0-9]{8})$//')\n\n          suffix=\"\"\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            # Develop branch: use dev versioning with build number\n            suffix=\".dev$(date +%Y%m%d)+${{ github.run_number }}\"\n          elif [[ \"$branch_name\" == \"nightly\" ]]; then\n            # Nightly branch: use alpha versioning\n            suffix=\"a$(date +%Y%m%d)\"\n          else\n            echo \"Not modifying version\"\n          fi\n\n          if [[ -n \"$suffix\" && \"$current_version\" != *\"$suffix\"* ]]; then\n            new_version=\"${base_version}${suffix}\"\n            if sed -i.bak \"s/^version = \\\".*\\\"/version = \\\"${new_version}\\\"/\" pyproject.toml; then\n              echo \"Version updated to ${new_version}\"\n              rm -f pyproject.toml.bak\n            else\n              echo \"Error: Failed to update version in pyproject.toml\" >&2\n              exit 1\n            fi\n          fi\n\n      - name: Generate updated lock file\n        run: poetry lock --no-update\n\n      - name: Build Python wheel\n        run: |\n          poetry build --format wheel\n          ls -lh dist/\n\n      - name: Install Python wheel\n        run: |\n          python -m pip install --upgrade poetry-plugin-export\n          poetry export --with test --all-extras --format requirements.txt --output requirements-test.txt\n          python -m pip install -r requirements-test.txt\n          pip install \"$(ls dist/*.whl)\"\n\n      - name: Run tests\n        run: pytest --ignore=tests/performance_tests\n\n      - name: Set release output\n        if: github.event_name == 'push'\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload wheel artifact\n        if: github.event_name == 'push'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ env.ASSET_NAME }}\n          path: ${{ env.ASSET_PATH }}\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs: [pre-commit]\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: \"C:\\\\.cache\\\\sccache\"\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: sccache\n      CMAKE_C_COMPILER_LAUNCHER: sccache\n      CMAKE_CXX_COMPILER_LAUNCHER: sccache\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Cache Python site-packages\n        id: cached-site-packages\n        uses: actions/cache@v4\n        with:\n          path: ~/.local/lib/python${{ matrix.python-version }}/site-packages\n          key: ${{ runner.os }}-${{ matrix.python-version }}-site-packages\n          restore-keys: |\n            ${{ runner.os }}-site-packages-\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    # needs: [build-linux, build-macos]  # Reinstate this when macos runs on every build again\n    needs: [build-linux]\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          # Install specific AWS CLI version known to work with R2\n          curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.34.zip\" -o \"awscliv2.zip\"\n          unzip awscliv2.zip\n          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n\n          mkdir -p ~/.aws\n          envsubst < .github/aws/credentials.ini > ~/.aws/credentials\n          envsubst < .github/aws/config.ini > ~/.aws/config\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs: [build-linux, build-macos]\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download built wheels\n        uses: actions/download-artifact@v4\n        with:\n          path: dist/\n          pattern: \"*.whl\"\n\n      - name: Configure AWS CLI for Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Configuring AWS CLI for Cloudflare R2...\"\n\n          # Install specific AWS CLI version known to work with R2\n          curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.34.zip\" -o \"awscliv2.zip\"\n          unzip awscliv2.zip\n          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n\n          mkdir -p ~/.aws\n          envsubst < .github/aws/credentials.ini > ~/.aws/credentials\n          envsubst < .github/aws/config.ini > ~/.aws/config\n\n      - name: Upload new wheels to Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Uploading new wheels to Cloudflare R2...\"\n\n          echo \"Initial dist/ contents:\"\n          ls -la dist/\n          find dist/ -type f -name \"*.whl\" -ls\n\n          # Create clean directory for real files\n          mkdir -p dist/all\n\n          # Copy all files into dist/all/ to resolve symlinks\n          find dist/ -type f -name \"*.whl\" -exec cp -L {} dist/all/ \\;\n\n          # First check for any wheels\n          if ! find dist/all/ -type f -name \"*.whl\" >/dev/null 2>&1; then\n            echo \"No wheels found in dist/all/, exiting\"\n            exit 1\n          fi\n\n          echo \"Contents of dist/all/:\"\n          ls -la dist/all/\n\n          wheel_count=0\n          for file in dist/all/*.whl; do\n            echo \"File details for $file:\"\n            ls -l \"$file\"\n            file \"$file\"\n\n            if [ ! -f \"$file\" ]; then\n              echo \"Warning: '$file' is not a regular file, skipping\"\n              continue\n            fi\n\n            wheel_count=$((wheel_count + 1))\n            echo \"Found wheel: $file\"\n            echo \"sha256:$(sha256sum \"$file\" | awk '{print $1}')\"\n\n            echo \"Uploading $file...\"\n            for i in {1..3}; do\n              if aws s3 cp \"$file\" \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" \\\n                --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n                --content-type \"application/zip\"; then\n                echo \"Successfully uploaded $file\"\n                break\n              else\n                echo \"Upload failed for $file, retrying ($i/3)...\"\n                sleep 5\n              fi\n\n              if [ $i -eq 3 ]; then\n                echo \"Failed to upload $file after 3 attempts\"\n              fi\n            done\n          done\n\n          if [ \"$wheel_count\" -eq 0 ]; then\n            echo \"No wheel files found in dist directory\"\n            exit 1\n          fi\n\n          echo \"Successfully uploaded $wheel_count wheel files\"\n\n      - name: Remove old wheels from Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Cleaning up old wheels in Cloudflare R2...\"\n\n          branch_name=\"${GITHUB_REF_NAME}\"  # Get the current branch\n          files=$(aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} | awk '{print $4}')\n          if [ -z \"$files\" ]; then\n            echo \"No files found for cleanup\"\n            exit 0\n          fi\n\n          echo \"Current wheels:\"\n          echo \"$files\"\n          echo \"---\"\n\n          # Skip index.html\n          files=$(echo \"$files\" | grep -v \"^index\\.html$\")\n\n          # Clean up dev wheels on the develop branch\n          if [[ \"$branch_name\" == \"develop\" ]]; then\n            echo \"Cleaning up .dev wheels for the develop branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep \"\\.dev\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all dev wheels for this platform\n              matching_files=$(echo \"$files\" | grep \"\\.dev.*-${platform_tag}\\.whl$\" | sort -t'+' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Keep only the latest version\n              latest=$(echo \"$matching_files\" | tail -n 1)\n              echo \"Latest version to keep: $latest\"\n\n              # Delete all but the latest\n              for file in $matching_files; do\n                if [[ \"$file\" != \"$latest\" ]]; then\n                  echo \"Deleting old .dev wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                else\n                  echo \"Keeping wheel: $file\"\n                fi\n              done\n            done\n            echo \"Finished cleaning up .dev wheels\"\n          fi\n\n          # Clean up alpha (.a) wheels on the nightly branch\n          if [[ \"$branch_name\" == \"nightly\" ]]; then\n            echo \"Cleaning up alpha wheels for the nightly branch...\"\n            echo \"All files before filtering:\"\n            echo \"$files\"\n\n            # First find unique platform suffixes\n            platform_tags=$(echo \"$files\" | grep -E \"a[0-9]{8}\" | sed -E 's/.*-(cp[^.]+).whl$/\\1/' | sort -u)\n            echo \"Found platform tags:\"\n            echo \"$platform_tags\"\n\n            for platform_tag in $platform_tags; do\n              echo \"Processing platform: $platform_tag\"\n\n              # Get all alpha wheels for this platform\n              matching_files=$(echo \"$files\" | grep -E \"a[0-9]{8}.*-${platform_tag}\\.whl$\" | sort -t'a' -k2 -V)\n\n              echo \"Matching files:\"\n              echo \"$matching_files\"\n\n              # Extract unique versions (dates) from matching files\n              versions=$(echo \"$matching_files\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\" | sort -n)\n              echo \"Unique versions (dates) for platform: $versions\"\n\n              # Retain only the last 3 versions\n              versions_to_keep=$(echo \"$versions\" | tail -n 3)\n              echo \"Versions to keep: $versions_to_keep\"\n\n              # Delete files not in the last 3 versions\n              for file in $matching_files; do\n                file_version=$(echo \"$file\" | sed -E \"s/^.+-[0-9]+\\.[0-9]+\\.[0-9]+a([0-9]{8})-.+\\.whl$/\\1/\")\n                if echo \"$versions_to_keep\" | grep -qx \"$file_version\"; then\n                  echo \"Keeping wheel: $file\"\n                else\n                  echo \"Deleting old .a wheel: $file\"\n                  if ! aws s3 rm \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/$file\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n                    echo \"Warning: Failed to delete $file, skipping...\"\n                  fi\n                fi\n              done\n            done\n            echo \"Finished cleaning up .a wheels\"\n          fi\n\n      - name: Generate index.html\n        run: |\n          set -euo pipefail\n          echo \"Generating package index...\"\n\n          bucket_path=\"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\"\n          index_file=\"index.html\"\n\n          # Create a temporary directory for downloads\n          TEMP_DIR=$(mktemp -d)\n          trap 'rm -rf \"$TEMP_DIR\"' EXIT\n\n          # Download existing index.html if it exists\n          if aws s3 ls \"${bucket_path}${index_file}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" >/dev/null 2>&1; then\n            echo \"Existing index.html found, downloading...\"\n            aws s3 cp \"${bucket_path}${index_file}\" . --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"\n          else\n            echo \"No existing index.html found, creating a new one...\"\n            echo '<!DOCTYPE html>' > \"$index_file\"\n            echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"$index_file\"\n            echo '<body><h1>Packages for nautilus_trader</h1></body></html>' >> \"$index_file\"\n          fi\n\n          # Extract existing hashes from index.html\n          declare -A existing_hashes=()\n          if [[ -f \"$index_file\" ]]; then\n            echo \"Extracting existing hashes from index.html...\"\n            while IFS= read -r line; do\n              if [[ $line =~ href=\\\"([^\\\"#]+)#sha256=([a-f0-9]{64}) ]]; then\n                file=\"${BASH_REMATCH[1]}\"\n                hash=\"${BASH_REMATCH[2]}\"\n                existing_hashes[\"$file\"]=\"$hash\"\n                echo \"Found existing hash for $file\"\n              fi\n            done < \"$index_file\"\n          fi\n\n          # Create new index.html\n          echo '<!DOCTYPE html>' > \"${index_file}.new\"\n          echo '<html><head><title>NautilusTrader Packages</title></head>' >> \"${index_file}.new\"\n          echo '<body><h1>Packages for nautilus_trader</h1>' >> \"${index_file}.new\"\n\n          # Map to store final hashes we'll use\n          declare -A final_hashes=()\n\n          # First, calculate hashes for all new/updated wheels\n          # These will override any existing hashes for the same filename\n          for file in dist/all/*.whl; do\n            if [[ -f \"$file\" ]]; then\n              filename=$(basename \"$file\")\n              hash=$(sha256sum \"$file\" | awk '{print $1}')\n              final_hashes[\"$filename\"]=\"$hash\"\n              echo \"Calculated hash for new/updated wheel $filename: $hash\"\n            fi\n          done\n\n          # Get list of all wheel files in bucket\n          existing_files=$(aws s3 ls \"${bucket_path}\" --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\" | grep '\\.whl$' | awk '{print $4}')\n\n          # For existing files, use hash from index if we don't have a new one\n          for file in $existing_files; do\n            if [[ -z \"${final_hashes[$file]:-}\" ]]; then  # Only if we don't have a new hash\n              if [[ -n \"${existing_hashes[$file]:-}\" ]]; then\n                final_hashes[\"$file\"]=\"${existing_hashes[$file]}\"\n                echo \"Using existing hash for $file: ${existing_hashes[$file]}\"\n              else\n                # Only download and calculate if we have no hash at all\n                echo \"No existing hash found, downloading wheel to compute hash for $file...\"\n                tmpfile=\"$TEMP_DIR/$file\"\n                if aws s3 cp \"${bucket_path}${file}\" \"$tmpfile\" \\\n                  --endpoint-url=\"${{ secrets.CLOUDFLARE_R2_URL }}\"; then\n                  hash=$(sha256sum \"$tmpfile\" | awk '{print $1}')\n                  final_hashes[\"$file\"]=\"$hash\"\n                  echo \"Calculated hash for missing file $file: $hash\"\n                else\n                  echo \"Warning: Could not download $file for hashing, skipping...\"\n                fi\n              fi\n            fi\n          done\n\n          # Sort files for consistent ordering\n          readarray -t sorted_files < <(printf '%s\\n' \"${!final_hashes[@]}\" | sort)\n\n          # Generate index entries using sorted list\n          for file in \"${sorted_files[@]}\"; do\n            hash=\"${final_hashes[$file]}\"\n            escaped_file=$(echo \"$file\" | sed 's/&/\\&amp;/g; s/</\\&lt;/g; s/>/\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g')\n            echo \"<a href=\\\"$escaped_file#sha256=$hash\\\">$escaped_file</a><br>\" >> \"${index_file}.new\"\n          done\n\n          echo '</body></html>' >> \"${index_file}.new\"\n          mv \"${index_file}.new\" \"$index_file\"\n          echo \"Index generation complete\"\n\n      - name: Upload index.html to Cloudflare R2\n        run: |\n          for i in {1..3}; do\n            if aws s3 cp index.html \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" \\\n              --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }} \\\n              --content-type \"text/html; charset=utf-8\"; then\n              echo \"Successfully uploaded index.html\"\n              break\n            else\n              echo \"Failed to upload index.html, retrying ($i/3)...\"\n              sleep 5\n            fi\n          done\n\n          if [ $i -eq 3 ]; then\n            echo \"Failed to upload index.html after 3 attempts\"\n            exit 1\n          fi\n\n      - name: Verify uploaded files in Cloudflare R2\n        run: |\n          set -euo pipefail\n          echo \"Verifying uploaded files in Cloudflare R2...\"\n\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"Failed to list files in R2 bucket\"\n          fi\n\n          # Verify index.html exists\n          if ! aws s3 ls \"s3://${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/simple/nautilus-trader/index.html\" --endpoint-url=${{ secrets.CLOUDFLARE_R2_URL }}; then\n            echo \"index.html not found in R2 bucket\"\n          fi\n          echo \"Verification completed successfully\"\n\n      - name: Clean up local artifacts\n        run: |\n          set -euo pipefail\n          ls -lh dist/ || echo \"No dist directory found\"\n          rm -rf dist/* 2>/dev/null || true\n          echo \"Cleanup completed\"\n\n      - name: Fetch and delete artifacts for current run\n        if: success()\n        run: |\n          set -euo pipefail\n          echo \"Fetching artifacts for the current run\"\n\n          response=$(curl -s -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github+json\" \\\n            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)\n\n          # Extract artifact IDs\n          ids=$(echo \"$response\" | jq -r '.artifacts[].id // empty')\n          if [[ -z \"$ids\" ]]; then\n            echo \"No artifact IDs found for the current run\"\n            exit 0\n          fi\n\n          echo \"Artifact IDs to delete: $ids\"\n\n          # Delete artifacts\n          for id in $ids; do\n            echo \"Deleting artifact ID $id\"\n            response=$(curl -s -o /dev/null -w \"%{http_code}\" -X DELETE \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -H \"Accept: application/vnd.github+json\" \\\n              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id)\n\n            if [ \"$response\" -ne 204 ]; then\n              echo \"Warning: Failed to delete artifact ID $id (HTTP $response)\"\n            else\n              echo \"Successfully deleted artifact ID $id\"\n            fi\n          done\n\n          echo \"Artifact deletion process completed\"\n"
    },
    "2025-01-24T22-13-20Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 1,
        "publish-wheels": 1
      },
      "line_count": 310,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-24T23-13-56Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 316,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-25T05-02-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 316,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Common test setup\n        uses: ./.github/actions/common-tests\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-25T06-06-00Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 322,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-25T05-23-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 322,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run nautilus_core tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-01-31T20-56-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 3,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 326,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n          free-disk-space: \"true\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take 1-1.5 hrs again)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug # Not building wheels, so debug is fine\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      # Run tests without parallel build (avoids linker errors)\n      - name: Run tests\n        run: |\n          poetry install --with test --all-extras\n          poetry run pytest --ignore=tests/performance_tests\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when macos runs on every build again\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-02-05T04-32-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 5,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 338,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n          free-disk-space: \"true\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take ~1-1.5 hrs)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause windows jobs on develop branch for now (they take ~1 hr)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when/if macos runs on every build\n      # - build-windows # Reinstate this when/if windows runs on every build\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n      - build-windows\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2025-02-05T22-20-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "master",
            "nightly",
            "develop"
          ]
        },
        "pull_request": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 7,
      "steps_per_job": {
        "pre-commit": 5,
        "build-linux-standard-precision": 6,
        "build-linux": 7,
        "build-macos": 6,
        "build-windows": 5,
        "publish-wheels-develop": 2,
        "publish-wheels": 2
      },
      "line_count": 338,
      "workflow": "name: build\n\non:\n  push:\n    branches: [master, nightly, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  pre-commit:\n    name: pre-commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n          free-disk-space: \"true\"\n\n      - name: Run pre-commit\n        continue-on-error: true\n        run: make pre-commit || echo \"PRECOMMIT_FAILED=true\" > $GITHUB_ENV\n\n      # https://docs.github.com/en/rest/issues/comments#create-an-issue-comment\n      - name: Add PR comment on failure\n        if: env.PRECOMMIT_FAILED == 'true' && github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          github-token: ${{ secrets.BUILD_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Thank you for your contribution! \ud83d\ude4f\\n\\nThe pre-commit checks failed, but this is easy to fix. You\\'ll need to run:\\n\\n```bash\\nmake pre-commit\\n# or\\npre-commit run --all-files\\n```\\n\\nThis will automatically fix most formatting issues. Just commit any changes and push again.\\n\\nSee our [CONTRIBUTING.md](https://github.com/nautechsystems/nautilus_trader/blob/develop/CONTRIBUTING.md) guide for more details.'\n            })\n\n      - name: Fail job if pre-commit failed\n        if: env.PRECOMMIT_FAILED == 'true'\n        run: |\n          echo \"Pre-commit checks failed, exiting\"\n          exit 1\n\n  build-linux-standard-precision:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - standard-precision (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: debug\n      HIGH_PRECISION: false\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests (with standard-precision)\n        run: make cargo-test-standard-precision\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n  build-linux:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-22.04\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-macos:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - macos-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause macOS jobs on develop branch for now (they take ~1-1.5 hrs)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run Rust tests\n        run: make cargo-test\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  build-windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - windows-latest\n        python-version:\n          - \"3.11\"\n          - \"3.12\"\n    defaults:\n      run:\n        shell: bash\n    name: build - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    # Pause windows jobs on develop branch for now (they take ~1 hr)\n    if: >\n      !( (github.event_name == 'push' && github.ref_name == 'develop')\n      || (github.event_name == 'pull_request' && github.base_ref == 'develop') )\n    needs:\n      - pre-commit\n    env:\n      BUILD_MODE: release\n      HIGH_PRECISION: false\n      PARALLEL_BUILD: false\n      RUST_BACKTRACE: 1\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Build and install wheel\n        uses: ./.github/actions/common-wheel-build\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Run tests\n        run: |\n          pytest --ignore=tests/performance_tests\n\n      - name: Upload wheel artifact\n        uses: ./.github/actions/upload-artifact-wheel\n\n  publish-wheels-develop:\n    name: publish-wheels-develop\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      # - build-macos # Reinstate this when/if macos runs on every build\n      # - build-windows # Reinstate this when/if windows runs on every build\n    # if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    if: >\n      github.event_name == 'push' &&\n      github.ref == 'refs/heads/develop'\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n\n  # Temporary additional publish step while macos wheels are paused on develop branch\n  publish-wheels:\n    name: publish-wheels\n    runs-on: ubuntu-latest\n    needs:\n      - build-linux\n      - build-macos\n      - build-windows\n    if: >\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/nightly' || github.ref == 'refs/heads/master')\n    env:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}\n      CLOUDFLARE_R2_BUCKET_NAME: \"packages\"\n      CLOUDFLARE_R2_REGION: \"auto\"\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Publish wheels\n        uses: ./.github/actions/publish-wheels\n"
    },
    "2022-01-02T21-09-57Z": {
      "triggers": {},
      "num_jobs": 0,
      "steps_per_job": {},
      "line_count": 103,
      "workflow": null,
      "parse_error": "Invalid YAML structure"
    }
  }
}