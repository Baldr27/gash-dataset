{
  "coverage": {
    "2022-08-20T02-41-52Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 88,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-03-07Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 95,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-34-41Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 98,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-38-21Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-26-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 87,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T05-08-28Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-08T11-25-17Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-19T03-27-48Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 86,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T05-31-04Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 86,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T06-13-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 87,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-04T02-43-16Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 87,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-04T03-41-51Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 87,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T05-54-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 85,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T06-36-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 86,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T06-45-56Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 86,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T06-50-11Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 85,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-02-55Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 100,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T00-49-09Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-37-14Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T07-00-25Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-02T10-39-46Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-17T05-39-58Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-04T03-31-38Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-22T13-26-47Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 71,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T11-50-01Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 71,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-22T14-14-03Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 71,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T21-01-34Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 71,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-08-25T22-01-23Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 71,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-22T07-17-05Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 76,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-06T08-19-08Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 76,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T01-10-13Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 76,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-12-16T03-43-44Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T05-27-29Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 90,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-12-19T22-25-16Z": [
      {
        "region": {
          "startLine": 11,
          "startColumn": 5,
          "endLine": 94,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T07-12-58Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 92,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T07-39-09Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 92,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-01-06T09-18-44Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 92,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T21-13-09Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-09-53Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 106,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-04T08-19-54Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 106,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-21-28Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 106,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-04-28T21-54-02Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-05-20T02-29-28Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-16T22-24-37Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-17T00-20-11Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-17T00-34-24Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-07T08-20-12Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 146,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-08-08T21-16-36Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-27T22-04-43Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-02T13-00-41Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 141,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-09T07-12-43Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 146,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-10T19-53-45Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 136,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-20T04-40-47Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 136,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-11T07-15-43Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 136,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-12T19-28-30Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 136,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-17T19-45-58Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 136,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-08T22-51-18Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 146,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-11T05-49-23Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 146,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-11T09-45-03Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 146,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T09-45-53Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 139,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-02T20-53-01Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 139,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-04T21-00-04Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-05T21-34-14Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 145,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-06T21-10-19Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 148,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-08T11-55-39Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 149,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-14T08-06-31Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 25
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-16T09-15-31Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-17T05-24-18Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-20T22-52-10Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T21-43-30Z": [
      {
        "region": {
          "startLine": 9,
          "startColumn": 5,
          "endLine": 67,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ]
  },
  "metadata": {
    "2022-08-20T02-41-52Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 88,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-08-20T03-03-07Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 95,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cache-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-08-20T04-34-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 98,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-08-20T04-38-21Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 94,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-08-20T03-26-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 87,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.github/workflows/*.yml', '.pre-commit-config.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-08-20T05-08-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 94,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-09-08T11-25-17Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 94,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x64 ]\n        os: [ ubuntu-latest ]\n        python-version: [ \"3.10\" ]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-10-19T03-27-48Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 86,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-10-23T05-31-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 86,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-10-23T06-13-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 87,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-04T02-43-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 87,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-04T03-41-51Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 87,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests (Linux)\n      - name: Run tests (Linux)\n        if: runner.os == 'Linux'\n        run: nox -rs coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report (Linux)\n        if: runner.os == 'Linux'\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-10T05-54-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 85,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-10T06-36-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 86,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: scripts/test-coverage.sh\n        shell: bash\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-10T06-45-56Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 86,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: scripts/test-coverage.sh\n        shell: bash\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2022-12-10T06-50-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 85,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-02-19T06-02-55Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 100,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-01-14T00-49-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 93,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-02-19T06-37-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-02-19T07-00-25Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-03-02T10-39-46Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-06-17T05-39-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-07-04T03-31-38Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup cached pre-commit\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      # Run pre-commit\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install and run database dependencies\n      - name: Install Redis (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      # Run tests with coverage\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # Upload coverage report to codecov (Linux)\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-07-22T13-26-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 71,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-07-30T11-50-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 71,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-07-22T14-14-03Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 71,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-07-30T21-01-34Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 71,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-08-25T22-01-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 71,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-09-22T07-17-05Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 76,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-10-06T08-19-08Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 76,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-10-07T01-10-13Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 12
      },
      "line_count": 76,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-12-16T03-43-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 94,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-10-07T05-27-29Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 90,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2023-12-19T22-25-16Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 94,
      "workflow": "name: coverage\n\n# Run code coverage analysis for NautilusTrader\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-01-06T07-12-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 92,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-01-06T07-39-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "develop"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 92,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [develop]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-01-06T09-18-44Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 92,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-02-03T21-13-09Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 103,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-02-03T22-09-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 106,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-02-04T08-19-54Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 106,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-02-03T22-21-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 106,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Redis\n        run: |\n          sudo apt-get install redis-server\n          redis-server --daemonize yes\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-04-28T21-54-02Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-05-20T02-29-28Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-06-16T22-24-37Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-06-17T00-20-11Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 131,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Install TA-Lib (Linux)\n        run: |\n          make install-talib\n          poetry run pip install numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-06-17T00-34-24Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 133,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Setup cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-08-07T08-20-12Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 146,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Set up cached cargo\n        id: cached-cargo\n        uses: actions/cache@v4\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry/index/\n            ~/.cargo/registry/cache/\n            ~/.cargo/git/db/\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: ${{ runner.os }}-cargo-\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-08-08T21-16-36Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 133,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.10\"]  # Fails on 3.11 due Cython\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-09-27T22-04-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 133,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Set up cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-10-02T13-00-41Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 141,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-10-09T07-12-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 146,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-10-10T19-53-45Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 136,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-10-20T04-40-47Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 136,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          files: ./coverage.xml\n          verbose: true\n"
    },
    "2024-11-11T07-15-43Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 136,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          fail_ci_if_error: true\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-11-12T19-28-30Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 136,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-11-17T19-45-58Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 136,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-12-08T22-51-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 146,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-12-11T05-49-23Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly-pause"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 146,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly-pause]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-12-11T09-45-03Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 146,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # ta-lib Python install currently broken\n      # https://github.com/TA-Lib/ta-lib-python/issues/655\n      # - name: Install TA-Lib (Linux)\n      #   run: |\n      #     make install-talib\n      #     poetry run pip install setuptools numpy==1.26.4 ta-lib\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2024-12-25T09-45-53Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 139,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-02T20-53-01Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 18
      },
      "line_count": 139,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached pre-commit\n        id: cached-pre-commit\n        uses: actions/cache@v4\n        with:\n          path: ~/.cache/pre-commit\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\n\n      - name: Run pre-commit\n        run: pre-commit run --all-files\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-04T21-00-04Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 129,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-05T21-34-14Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 145,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-06T21-10-19Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 17
      },
      "line_count": 148,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-08T11-55-39Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 14
      },
      "line_count": 149,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest]\n        python-version: [\"3.11\"]\n    name: build - python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      # TODO: Pause the below for now pending inventigation on why it started failing?\n      # - name: Install Nautilus CLI and run init postgres\n      #   run: |\n      #     make install-cli\n      #     nautilus database init --schema ${{ github.workspace }}/schema\n      #   env:\n      #     POSTGRES_HOST: localhost\n      #     POSTGRES_PORT: 5432\n      #     POSTGRES_USERNAME: postgres\n      #     POSTGRES_PASSWORD: pass\n      #     POSTGRES_DATABASE: nautilus\n      #\n      # - name: Run tests with coverage\n      #   run: make pytest-coverage\n      #\n      # - name: Upload coverage report\n      #   uses: codecov/codecov-action@v4\n      #   with:\n      #     # fail_ci_if_error: true  # leave commented until flakiness improves\n      #     token: ${{ secrets.CODECOV_TOKEN }}\n      #     verbose: true\n"
    },
    "2025-01-14T08-06-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 16
      },
      "line_count": 131,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4.2.0\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v4\n        with:\n          # fail_ci_if_error: true  # leave commented until flakiness improves\n          token: ${{ secrets.CODECOV_TOKEN }}\n          verbose: true\n"
    },
    "2025-01-16T09-15-31Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 132,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4.2.0\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # TODO: Temporarily pause coverage report due pending test data repair\n      # - name: Upload coverage report\n      #   uses: codecov/codecov-action@v4\n      #   with:\n      #     # fail_ci_if_error: true  # leave commented until flakiness improves\n      #     token: ${{ secrets.CODECOV_TOKEN }}\n      #     verbose: true\n"
    },
    "2025-01-17T05-24-18Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 132,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4.2.0\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # TODO: Temporarily pause coverage report due pending test data repair\n      # - name: Upload coverage report\n      #   uses: codecov/codecov-action@v4\n      #   with:\n      #     # fail_ci_if_error: true  # leave commented until flakiness improves\n      #     token: ${{ secrets.CODECOV_TOKEN }}\n      #     verbose: true\n"
    },
    "2025-01-20T22-52-10Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 15
      },
      "line_count": 134,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4.2.0\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4.2.0\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # TODO: Temporarily pause coverage report due pending test data repair\n      # - name: Upload coverage report\n      #   uses: codecov/codecov-action@v4\n      #   with:\n      #     # fail_ci_if_error: true  # leave commented until flakiness improves\n      #     token: ${{ secrets.CODECOV_TOKEN }}\n      #     verbose: true\n"
    },
    "2025-01-24T21-43-30Z": {
      "triggers": {
        "push": {
          "branches": [
            "nightly"
          ]
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 5
      },
      "line_count": 67,
      "workflow": "name: coverage\n\non:\n  push:\n    branches: [nightly]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    services:\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DB: nautilus\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n\n      - name: Cached test data\n        id: cached-testdata-large\n        uses: actions/cache@v4.2.0\n        with:\n          path: tests/test_data/large\n          key: ${{ runner.os }}-large-files-${{ hashFiles('tests/test_data/large/checksums.json') }}\n          restore-keys: ${{ runner.os }}-large-files-\n\n      - name: Install Nautilus CLI and run init postgres\n        run: |\n          make install-cli\n          nautilus database init --schema ${{ github.workspace }}/schema/sql\n        env:\n          POSTGRES_HOST: localhost\n          POSTGRES_PORT: 5432\n          POSTGRES_USERNAME: postgres\n          POSTGRES_PASSWORD: pass\n          POSTGRES_DATABASE: nautilus\n\n      - name: Run tests with coverage\n        run: make pytest-coverage\n\n      # TODO: Temporarily pause coverage report due pending test data repair\n      # - name: Upload coverage report\n      #   uses: codecov/codecov-action@v4\n      #   with:\n      #     # fail_ci_if_error: true  # leave commented until flakiness improves\n      #     token: ${{ secrets.CODECOV_TOKEN }}\n      #     verbose: true\n"
    }
  }
}