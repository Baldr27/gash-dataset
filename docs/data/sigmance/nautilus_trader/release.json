{
  "release": {
    "2021-09-25T04-32-46Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 89,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 90,
          "startColumn": 5,
          "endLine": 164,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 165,
          "startColumn": 5,
          "endLine": 257,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-25T05-19-08Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 188,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 189,
          "startColumn": 5,
          "endLine": 281,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-25T05-37-26Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 35,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 36,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 283,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-25T05-24-50Z": [
      {
        "region": {
          "startLine": 13,
          "startColumn": 5,
          "endLine": 33,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 34,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 188,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 189,
          "startColumn": 5,
          "endLine": 281,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-25T08-15-46Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 34,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 35,
          "startColumn": 5,
          "endLine": 114,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 115,
          "startColumn": 5,
          "endLine": 189,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 190,
          "startColumn": 5,
          "endLine": 282,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-25T20-57-12Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 34,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 35,
          "startColumn": 5,
          "endLine": 109,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 110,
          "startColumn": 5,
          "endLine": 180,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 181,
          "startColumn": 5,
          "endLine": 273,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T02-56-04Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 34,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 35,
          "startColumn": 5,
          "endLine": 107,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 108,
          "startColumn": 5,
          "endLine": 176,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 177,
          "startColumn": 5,
          "endLine": 267,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T12-11-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T20-37-06Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T21-59-39Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T22-32-33Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-09-26T22-41-52Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T20-52-18Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T21-02-10Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T21-04-49Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-06T21-08-44Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-22T22-21-10Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-23T19-55-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T03-36-14Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 110,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 111,
          "startColumn": 5,
          "endLine": 181,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 182,
          "startColumn": 5,
          "endLine": 274,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T04-10-45Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-10-28T04-31-11Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 40,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 41,
          "startColumn": 5,
          "endLine": 109,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 110,
          "startColumn": 5,
          "endLine": 179,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 180,
          "startColumn": 5,
          "endLine": 271,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-11-01T04-04-43Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-11-01T04-12-43Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-01-19Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-19-47Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 44,
          "startColumn": 5,
          "endLine": 115,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 116,
          "startColumn": 5,
          "endLine": 188,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 189,
          "startColumn": 5,
          "endLine": 283,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-01T11-31-10Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-28T23-53-31Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2021-12-29T00-29-24Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-01-12T04-02-40Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 113,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 114,
          "startColumn": 5,
          "endLine": 185,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 186,
          "startColumn": 5,
          "endLine": 279,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T07-06-59Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 44,
          "startColumn": 5,
          "endLine": 114,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 115,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 280,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T07-43-26Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 44,
          "startColumn": 5,
          "endLine": 114,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 115,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 280,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-24T08-51-26Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 42,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 43,
          "startColumn": 5,
          "endLine": 112,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 113,
          "startColumn": 5,
          "endLine": 183,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 184,
          "startColumn": 5,
          "endLine": 276,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-03-25T06-05-24Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 43,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 44,
          "startColumn": 5,
          "endLine": 114,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 115,
          "startColumn": 5,
          "endLine": 186,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 187,
          "startColumn": 5,
          "endLine": 280,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-04-23T21-52-01Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 309,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-05-09T06-36-23Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 309,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-41-10Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 309,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-52-29Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 309,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-54-00Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 128,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 129,
          "startColumn": 5,
          "endLine": 206,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 207,
          "startColumn": 5,
          "endLine": 309,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-07-23T02-56-54Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 51,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 52,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 130,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-06T07-21-03Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 51,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 52,
          "startColumn": 5,
          "endLine": 129,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 130,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-03-07Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 58,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 59,
          "startColumn": 5,
          "endLine": 143,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 144,
          "startColumn": 5,
          "endLine": 228,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 229,
          "startColumn": 5,
          "endLine": 339,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T03-26-58Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 127,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 128,
          "startColumn": 5,
          "endLine": 204,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 205,
          "startColumn": 5,
          "endLine": 307,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-34-41Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 149,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 150,
          "startColumn": 5,
          "endLine": 237,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 238,
          "startColumn": 5,
          "endLine": 351,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T04-38-21Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-08-20T05-08-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-01T00-37-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-05T12-56-02Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-09-08T11-25-17Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 345,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-19T03-27-48Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 131,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-20T10-57-48Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 131,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T05-31-04Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 130,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 131,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 311,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-10-23T06-13-13Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-02T11-45-12Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-02T11-56-55Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-04T02-43-16Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-09T20-29-59Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2022-12-10T05-54-11Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 53,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 54,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 209,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 210,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T01-04-05Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 346,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-01-14T00-49-09Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 61,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 62,
          "startColumn": 5,
          "endLine": 147,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 148,
          "startColumn": 5,
          "endLine": 233,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 234,
          "startColumn": 5,
          "endLine": 346,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-37-14Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 51,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 52,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 135,
          "startColumn": 5,
          "endLine": 217,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 218,
          "startColumn": 5,
          "endLine": 328,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-02-55Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 60,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 61,
          "startColumn": 5,
          "endLine": 153,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 154,
          "startColumn": 5,
          "endLine": 246,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 247,
          "startColumn": 5,
          "endLine": 366,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T06-57-15Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 216,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 217,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-02-19T07-00-25Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 216,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 217,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-02T10-39-46Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 50,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 51,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 216,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 217,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-03-11T21-34-51Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-04T07-36-54Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-11T21-08-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-06-17T05-39-58Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-04T03-31-38Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 133,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 134,
          "startColumn": 5,
          "endLine": 207,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 208,
          "startColumn": 5,
          "endLine": 326,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-22T13-26-47Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T11-50-01Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-30T21-01-34Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-07-31T00-37-44Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-08-25T08-35-57Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-08-25T22-01-23Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-17T09-28-29Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 55,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 56,
          "startColumn": 5,
          "endLine": 121,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 122,
          "startColumn": 5,
          "endLine": 187,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 188,
          "startColumn": 5,
          "endLine": 294,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-22T07-17-05Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 60,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 61,
          "startColumn": 5,
          "endLine": 131,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 132,
          "startColumn": 5,
          "endLine": 202,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 203,
          "startColumn": 5,
          "endLine": 314,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-09-22T08-50-06Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 135,
          "startColumn": 5,
          "endLine": 205,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 206,
          "startColumn": 5,
          "endLine": 292,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-06T08-19-08Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 135,
          "startColumn": 5,
          "endLine": 205,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 206,
          "startColumn": 5,
          "endLine": 292,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T01-10-13Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 63,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 64,
          "startColumn": 5,
          "endLine": 134,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 135,
          "startColumn": 5,
          "endLine": 205,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 206,
          "startColumn": 5,
          "endLine": 292,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-07T05-27-29Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-10T07-44-11Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-23T07-55-37Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-10-23T08-22-08Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-11-04T20-23-40Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-12-02T00-30-22Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 77,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 78,
          "startColumn": 5,
          "endLine": 159,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 160,
          "startColumn": 5,
          "endLine": 241,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 242,
          "startColumn": 5,
          "endLine": 340,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T21-13-09Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 89,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 90,
          "startColumn": 5,
          "endLine": 182,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 183,
          "startColumn": 5,
          "endLine": 275,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 276,
          "startColumn": 5,
          "endLine": 386,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-09-53Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-03T22-21-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-04T08-19-54Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-05-20T02-29-28Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-16T22-24-37Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-06-17T00-20-11Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 93,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 94,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 286,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 287,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-09T09-29-12Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 105,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 106,
          "startColumn": 5,
          "endLine": 202,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 203,
          "startColumn": 5,
          "endLine": 298,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 299,
          "startColumn": 5,
          "endLine": 425,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-19T06-40-47Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 200,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 201,
          "startColumn": 5,
          "endLine": 296,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 297,
          "startColumn": 5,
          "endLine": 421,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-09-27T22-04-43Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 200,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 201,
          "startColumn": 5,
          "endLine": 296,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 297,
          "startColumn": 5,
          "endLine": 421,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-02T13-00-41Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 200,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 201,
          "startColumn": 5,
          "endLine": 296,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 297,
          "startColumn": 5,
          "endLine": 421,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-09T07-12-43Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 103,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 104,
          "startColumn": 5,
          "endLine": 205,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 206,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 307,
          "startColumn": 5,
          "endLine": 436,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-10T19-53-45Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 98,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 99,
          "startColumn": 5,
          "endLine": 190,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 191,
          "startColumn": 5,
          "endLine": 281,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 282,
          "startColumn": 5,
          "endLine": 398,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-10T21-26-01Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 86,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 87,
          "startColumn": 5,
          "endLine": 178,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 179,
          "startColumn": 5,
          "endLine": 269,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 270,
          "startColumn": 5,
          "endLine": 382,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-12T06-57-32Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 78,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 79,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 261,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 262,
          "startColumn": 5,
          "endLine": 366,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-11-17T19-45-58Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 78,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 79,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 261,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 262,
          "startColumn": 5,
          "endLine": 366,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-08T22-51-18Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 99,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 100,
          "startColumn": 5,
          "endLine": 201,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 202,
          "startColumn": 5,
          "endLine": 301,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 302,
          "startColumn": 5,
          "endLine": 426,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-24T01-53-13Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 116,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 117,
          "startColumn": 5,
          "endLine": 217,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 218,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-12-25T09-45-53Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 116,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 117,
          "startColumn": 5,
          "endLine": 217,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 218,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-02T20-53-01Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 116,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 117,
          "startColumn": 5,
          "endLine": 217,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 218,
          "startColumn": 5,
          "endLine": 343,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-06T21-10-19Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 135,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 136,
          "startColumn": 5,
          "endLine": 255,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 256,
          "startColumn": 5,
          "endLine": 401,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-05T21-34-14Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 132,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 133,
          "startColumn": 5,
          "endLine": 249,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 250,
          "startColumn": 5,
          "endLine": 392,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-20T22-52-10Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 137,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 138,
          "startColumn": 5,
          "endLine": 259,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 260,
          "startColumn": 5,
          "endLine": 407,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2025-01-24T21-43-30Z": [
      {
        "region": {
          "startLine": 15,
          "startColumn": 5,
          "endLine": 59,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 60,
          "startColumn": 5,
          "endLine": 105,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 106,
          "startColumn": 5,
          "endLine": 157,
          "endColumn": 29
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ]
  },
  "metadata": {
    "2021-09-25T04-32-46Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build-test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag_release": 9,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 257,
      "workflow": "name: release\n\n# Test, tag then publish pushes on the master branch\n\non:\n  workflow_run:\n    workflows:\n      - build-test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  tag_release:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.8 ]\n    name: test-tag-publish - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.9 ]\n    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-25T05-19-08Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build-test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test_pip_install": 3,
        "tag_release": 10,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 281,
      "workflow": "name: release\n\non:\n  workflow_run:\n    workflows:\n      - build-test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test_pip_install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n  tag_release:\n    needs: [ test_pip_install ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.8 ]\n    name: tag_release - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.9 ]\n    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-25T05-37-26Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build_test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test_pip_install": 3,
        "tag_release": 10,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 283,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build_test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test_pip_install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n  tag_release:\n    needs: [ test_pip_install ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.8 ]\n    name: tag_release - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.9 ]\n    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-25T05-24-50Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build_test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test_pip_install": 3,
        "tag_release": 10,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 281,
      "workflow": "name: release\n\non:\n  workflow_run:\n    workflows:\n      - build_test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test_pip_install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n  tag_release:\n    needs: [ test_pip_install ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.8 ]\n    name: tag_release - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.9 ]\n    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-25T08-15-46Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build_test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test_pip_install": 3,
        "tag_release": 10,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 282,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build_test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test_pip_install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag_release:\n    needs: [ test_pip_install ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.8 ]\n    name: tag_release - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest ]\n        python-version: [ 3.9 ]\n    name: publish_sdist - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-25T20-57-12Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build_test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test_pip_install": 3,
        "tag_release": 10,
        "publish_sdist": 9,
        "publish_wheels": 11
      },
      "line_count": 273,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build_test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test_pip_install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag_release:\n    needs: [ test_pip_install ]\n    name: tag_release - Python 3.9 Linux\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish_sdist:\n    needs: [ tag_release ]\n    name: publish_sdist - Python 3.9 Linux\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid C dynamic libs being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish_wheels:\n    needs: [ tag_release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T02-56-04Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build-test"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 3,
        "tag-release": 10,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 267,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build-test\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test_pip_install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid C dynamic libs being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T12-11-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 10,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid C dynamic libs being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag_release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T20-37-06Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 10,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on completion of the `build_test` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid C dynamic libs being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T21-59-39Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 10,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        if: runner.os != 'Windows'\n        run: pip install .[distributed,docs]\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid C dynamic libs being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build (No need to copy built *.so files back into the source tree)\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T22-32-33Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (Linux)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-09-26T22-41-52Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-06T20-52-18Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9, 3.10 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9, 3.10 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-06T21-02-10Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9,  3.10.0 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9,  3.10.0 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-06T21-04-49Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9, 3.10.0 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9, 3.10.0 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-06T21-08-44Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-tag-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: poetry-cache\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.poetry-cache.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-publish-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-22T22-21-10Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml') }}-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml') }}-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml') }}-${{ hashFiles('**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-23T19-55-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ 3.8, 3.9 ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-28T03-36-14Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 274,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-release-\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-28T04-10-45Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple scipy\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-10-28T04-31-11Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 271,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-11-01T04-04-43Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n          python -m pip install poetry --pre\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n          python -m pip install poetry --pre\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n          python -m pip install poetry --pre\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n          python -m pip install poetry --pre\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-11-01T04-12-43Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-12-01T11-01-19Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-12-01T11-19-47Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 283,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          python -m pip install -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-12-01T11-31-10Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-12-28T23-53-31Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2021-12-29T00-29-24Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-01-12T04-02-40Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 279,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.9 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish_wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-03-24T07-06-59Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 280,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n          poetry config experimental.new-installer false\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-03-24T07-43-26Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 280,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          python -m pip install --upgrade pip setuptools wheel pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-03-24T08-51-26Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 276,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-03-25T06-05-24Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 4,
        "tag-release": 9,
        "publish-sdist": 9,
        "publish-wheels": 11
      },
      "line_count": 280,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      # Skip build copy to avoid *.so files being copied into the source\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-04-23T21-52-01Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 309,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .[distributed,docs]\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-05-09T06-36-23Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 309,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-07-23T02-41-10Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 309,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-07-23T02-52-29Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 309,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-07-23T02-54-00Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 309,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-07-23T02-56-54Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 311,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      SKIP_BUILD_COPY: true\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      CARGO_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-06T07-21-03Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 311,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel poetry pre-commit nox\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-20T03-03-07Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 339,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install and configure Poetry\n      - name: Install Poetry\n        uses: snok/install-poetry@v1.0.0\n        with:\n          version: 1.1.14\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cache-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cache-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-20T03-26-58Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 307,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: hecrj/setup-rust-action@v1\n        with:\n          rust-version: stable\n          components: clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-20T04-34-41Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 351,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.python-version }}-poetry-\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-20T04-38-21Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 345,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up cached Cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('.github/workflows/*.yml', '**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-08-20T05-08-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 345,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-09-01T00-37-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 345,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-09-05T12-56-02Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 345,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x86 ]  # Temporarily pause ARM64 in build matrix\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-09-08T11-25-17Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 345,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [ master ]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x64, ARM64 ]\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [ test-pip-install ]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n\n  publish-sdist:\n    needs: [ tag-release ]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false  # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n\n  publish-wheels:\n    needs: [ tag-release ]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [ x64 ]  # Temporarily pause ARM64 in build matrix\n        os: [ ubuntu-latest, macos-latest, windows-latest ]\n        python-version: [ \"3.8\", \"3.9\", \"3.10\" ]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n            toolchain: stable\n            override: true\n            components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-10-19T03-27-48Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 311,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64] # Temporarily pause ARM64 in build matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-10-20T10-57-48Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 311,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64] # Temporarily pause ARM64 in build matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-10-23T05-31-04Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 311,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"tag_name=v$(poetry version --short)\" >> GITHUB_OUTPUT\n          echo \"release_name=NautilusTrader $(poetry version --short) Beta\" >> GITHUB_OUTPUT\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"asset_path=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_OUTPUT\n          cd dist\n          echo \"asset_name=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_OUTPUT\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64] # Temporarily pause ARM64 in build matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_OUTPUT\n\n      - name: Poetry/Nox cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"asset_path=$(find ./dist -mindepth 1 -print -quit)\" >> GITHUB_OUTPUT\n          cd dist\n          echo \"asset_name=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> GITHUB_OUTPUT\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"asset_path=$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\" >> GITHUB_OUTPUT\n          echo \"asset_name=$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\" >> GITHUB_OUTPUT\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-10-23T06-13-13Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64] # Temporarily pause ARM64 in build matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-12-02T11-45-12Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64] # Temporarily pause ARM64 in build matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-12-02T11-56-55Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.10 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-12-04T02-43-16Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-12-09T20-29-59Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry nox pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry/Nox cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2022-12-10T05-54-11Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 12
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-01-14T01-04-05Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 346,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-01-14T00-49-09Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 13
      },
      "line_count": 346,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64, ARM64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust environment\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Get Poetry cache dir\n        id: cached-poetry-dir\n        run: echo \"::set-output name=dir::$(poetry config cache-dir)\"\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-02-19T06-37-14Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 12,
        "publish-sdist": 12,
        "publish-wheels": 14
      },
      "line_count": 328,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          target: x86_64-apple-darwin\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          target: x86_64-apple-darwin\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-02-19T06-02-55Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 15
      },
      "line_count": 366,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Cargo setup\n      - name: Set up Cargo cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/nautilus_core/Cargo.lock') }}\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-02-19T06-57-15Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 12,
        "publish-sdist": 12,
        "publish-wheels": 14
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.cached-poetry-dir.outputs.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-02-19T07-00-25Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 12,
        "publish-sdist": 12,
        "publish-wheels": 14
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel poetry pre-commit\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-03-02T10-39-46Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 5,
        "tag-release": 12,
        "publish-sdist": 12,
        "publish-wheels": 14
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-03-11T21-34-51Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 15
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-05-04T07-36-54Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 15
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Liux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-06-11T21-08-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 15
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.3.2\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-06-17T05-39-58Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 15
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-07-04T03-31-38Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 15
      },
      "line_count": 326,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Test pip installation\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install\n      - name: Install\n        run: poetry install\n\n      # Tag the commit with the library version\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      # Set release output variables\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      # Create GitHub release\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup Poetry caching\n      - name: Set output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      # Set release output\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      # Upload release asset\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Rust setup (ensures latest stable)\n      - name: Set up Rust tool-chain (Linux/Windows)\n        if: runner.os != 'macOS'\n        uses: actions-rust-lang/setup-rust-toolchain@v1\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      # Python setup\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      # Install build dependencies\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      # Setup Poetry caching\n      - name: Set output (Linux)\n        if: runner.os == 'Linux'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (macOS)\n        if: runner.os == 'macOS'\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      # Install / Build\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      # Upload release asset (UNIX)\n      - name: Set output (UNIX)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (UNIX)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Upload release asset (Windows)\n      - name: Set output (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      # Publish\n      - name: Publish to production PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-07-22T13-26-47Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-07-30T11-50-01Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-07-30T21-01-34Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec git+https://github.com/nautechsystems/ibapi.git\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-07-31T00-37-44Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, macos-13, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-08-25T08-35-57Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.5.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-08-25T22-01-23Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest]  # windows-latest\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-09-17T09-28-29Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 6,
        "tag-release": 10,
        "publish-sdist": 10,
        "publish-wheels": 14
      },
      "line_count": 294,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit poetry==1.6.1 msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-09-22T07-17-05Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 7,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 15
      },
      "line_count": 314,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry output (Linux, macOS)\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Set poetry output (Windows)\n        if: runner.os == 'Windows'\n        run: echo \"dir=$(poetry config cache-dir)\" | Out-File -FilePath $env:GITHUB_ENV -Append >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release (Linux, macOS)\n        id: vars-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset (Linux, macOS)\n        id: upload-release-asset-unix\n        if: (runner.os == 'Linux') || (runner.os == 'macOS')\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-unix.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-unix.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Set output for release (Windows)\n        id: vars-windows\n        if: runner.os == 'Windows'\n        run: |\n          echo \"::set-output name=asset_path::$(Get-ChildItem dist | Select-Object -ExpandProperty FullName)\"\n          echo \"::set-output name=asset_name::$(Get-ChildItem dist | Select-Object -ExpandProperty Name)\"\n\n      - name: Upload release asset (Windows)\n        id: upload-release-asset-windows\n        if: runner.os == 'Windows'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-windows.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-windows.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-09-22T08-50-06Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 7,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 12
      },
      "line_count": 292,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: stable\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release\n        id: vars-release\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-release.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-release.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-06T08-19-08Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 7,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 12
      },
      "line_count": 292,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release\n        id: vars-release\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-release.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-release.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-07T01-10-13Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 7,
        "tag-release": 11,
        "publish-sdist": 11,
        "publish-wheels": 12
      },
      "line_count": 292,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry caching\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"::set-output name=tag_name::v$(poetry version --short)\"\n          echo \"::set-output name=release_name::NautilusTrader $(poetry version --short) Beta\"\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAG_NAME: ${{ steps.vars.outputs.tag_name }}\n          RELEASE_NAME: ${{ steps.vars.outputs.release_name }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust tool-chain (stable)\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poety output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: 1.73.0\n          components: rustfmt, clippy\n\n      - name: Set up Rust tool-chain (macOS)\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: 1.73.0\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: 1.6.1\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry output\n        run: echo \"dir=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.dir }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set output for release\n        id: vars-release\n        run: |\n          echo \"::set-output name=asset_path::$(find ./dist -mindepth 1 -print -quit)\"\n          cd dist\n          echo \"::set-output name=asset_name::$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\"\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ASSET_PATH: ${{ steps.vars-release.outputs.asset_path }}\n          ASSET_NAME: ${{ steps.vars-release.outputs.asset_name }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-07T05-27-29Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release NautilusTrader on successful completion of the `build` workflow\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $ GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $ GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-10T07-44-11Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $ GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $ GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-23T07-55-37Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.9\", \"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-10-23T08-22-08Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-11-04T20-23-40Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2023-12-02T00-30-22Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 9,
        "tag-release": 13,
        "publish-sdist": 13,
        "publish-wheels": 14
      },
      "line_count": 340,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-02-03T21-13-09Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 10,
        "tag-release": 14,
        "publish-sdist": 14,
        "publish-wheels": 15
      },
      "line_count": 386,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-02-03T22-09-53Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-02-03T22-21-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-02-04T08-19-54Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.5\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-05-20T02-29-28Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-06-16T22-24-37Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit numpy==1.26.4 msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-06-17T00-20-11Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-09-09T09-29-12Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 18
      },
      "line_count": 425,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          choco install nasm\n          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-09-19T06-40-47Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 18
      },
      "line_count": 421,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-09-27T22-04-43Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 18
      },
      "line_count": 421,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Poetry cache\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-10-02T13-00-41Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 18
      },
      "line_count": 421,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-10-09T07-12-43Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 16,
        "publish-sdist": 16,
        "publish-wheels": 19
      },
      "line_count": 436,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust tool-chain (Linux, Windows) stable\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        uses: actions-rust-lang/setup-rust-toolchain@v1.8\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          components: rustfmt, clippy\n\n      # Work around as actions-rust-lang does not seem to work on macOS yet\n      - name: Set up Rust tool-chain (macOS) stable\n        if: runner.os == 'macOS'\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: ${{ env.RUST_VERSION }}\n          override: true\n          components: rustfmt, clippy\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(python -c \"import sys; print('.'.join(map(str, sys.version_info[:3])))\")\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-10-10T19-53-45Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 18
      },
      "line_count": 398,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Get Rust version from rust-toolchain.toml\n        id: rust-version\n        run: |\n          version=$(awk -F\\\" '/version/ {print $2}' nautilus_core/rust-toolchain.toml)\n          echo \"Rust toolchain version $version\"\n          echo \"RUST_VERSION=$version\" >> $GITHUB_ENV\n        working-directory: ${{ github.workspace }}\n\n      - name: Set up Rust toolchain (Linux, Windows)\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Rust toolchain (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n          rustup target add aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install nasm dependency (Windows)\n        uses: ilammy/setup-nasm@v1\n        if: runner.os == 'Windows'\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain (Linux, Windows)\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Rust toolchain (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n          rustup target add aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-10-10T21-26-01Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 11,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 17
      },
      "line_count": 382,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain (Linux, Windows)\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Rust toolchain (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n          rustup target add aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        arch: [x64]\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.arch }} ${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain (Linux, Windows)\n        if: (runner.os == 'Linux') || (runner.os == 'Windows')\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Rust toolchain (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n          rustup target add aarch64-apple-darwin\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-10-12T06-57-32Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 10,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 366,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-11-17T19-45-58Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 10,
        "tag-release": 15,
        "publish-sdist": 15,
        "publish-wheels": 16
      },
      "line_count": 366,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-12-08T22-51-18Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 4,
      "steps_per_job": {
        "test-pip-install": 13,
        "tag-release": 16,
        "publish-sdist": 16,
        "publish-wheels": 19
      },
      "line_count": 426,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  test-pip-install:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: test-pip-install - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang\" >> $GITHUB_ENV\n\n      - name: Set sccache-cache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Test pip installation\n        run: pip install .\n\n  tag-release:\n    needs: [test-pip-install]\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang\" >> $GITHUB_ENV\n\n      - name: Set sccache-cache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-12-24T01-53-13Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 16,
        "publish-sdist": 16,
        "publish-wheels": 19
      },
      "line_count": 343,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - Python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - Python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang\" >> $GITHUB_ENV\n\n      - name: Set sccache-cache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2024-12-25T09-45-53Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 16,
        "publish-sdist": 16,
        "publish-wheels": 19
      },
      "line_count": 343,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang\" >> $GITHUB_ENV\n\n      - name: Set sccache-cache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2025-01-02T20-53-01Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 16,
        "publish-sdist": 16,
        "publish-wheels": 19
      },
      "line_count": 343,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang\"\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest]  # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_GHA_ENABLED: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Run sccache-cache\n        uses: mozilla-actions/sccache-action@v0.0.6\n\n      - name: Set sccache-cache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang\" >> $GITHUB_ENV\n\n      - name: Set sccache-cache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo RUSTC_WRAPPER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=\"${{ env.SCCACHE_PATH }}\" >> $GITHUB_ENV\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2025-01-06T21-10-19Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 17,
        "publish-sdist": 17,
        "publish-wheels": 20
      },
      "line_count": 401,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest] # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set sccache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"SCCACHE_DIR=${{ github.workspace }}/.cache/sccache\" >> $GITHUB_ENV\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang++\" >> $GITHUB_ENV\n\n      - name: Set sccache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo SCCACHE_DIR=\"C:\\.cache\\sccache\" >> $GITHUB_ENV\n          echo RUSTC_WRAPPER=sccache >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2025-01-05T21-34-14Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 17,
        "publish-sdist": 17,
        "publish-wheels": 20
      },
      "line_count": 392,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest] # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set sccache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"SCCACHE_DIR=${{ github.workspace }}/.cache/sccache\" >> $GITHUB_ENV\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang++\" >> $GITHUB_ENV\n\n      - name: Set sccache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo SCCACHE_DIR=\"C:\\.cache\\sccache\" >> $GITHUB_ENV\n          echo RUSTC_WRAPPER=sccache >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: ${{ matrix.os }}-sccache-build-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: ${{ matrix.os }}-sccache-build-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build dependencies\n        run: python -m pip install --upgrade pip setuptools wheel pre-commit msgspec\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2025-01-20T22-52-10Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 17,
        "publish-sdist": 17,
        "publish-wheels": 20
      },
      "line_count": 407,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    env:\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      SCCACHE_DIR: ${{ github.workspace }}/.cache/sccache\n      RUSTC_WRAPPER: \"sccache\"\n      CC: \"sccache clang\"\n      CXX: \"sccache clang++\"\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Install runner dependencies\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.11\"\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest] # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n      # > --------------------------------------------------\n      # > sccache\n      # https://github.com/Mozilla-Actions/sccache-action\n      SCCACHE_IDLE_TIMEOUT: 0\n      SCCACHE_DIRECT: \"true\"\n      SCCACHE_CACHE_MULTIARCH: 1\n      # Incrementally compiled crates cannot be cached by sccache\n      # https://github.com/mozilla/sccache#rust\n      CARGO_INCREMENTAL: 0\n      # > --------------------------------------------------\n\n    steps:\n      - name: Free disk space (Ubuntu)\n        if: runner.os == 'Linux'\n        uses: jlumbroso/free-disk-space@main\n        with:\n          tool-cache: true\n          android: false\n          dotnet: false\n          haskell: false\n          large-packages: true\n          docker-images: true\n          swap-storage: true\n\n      - name: Free disk space (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          rm -rf \"/c/Program Files/dotnet\"\n          rm -rf \"/c/Program Files (x86)/Microsoft Visual Studio/2019\"\n\n      - name: Install runner dependencies (Linux)\n        if: runner.os == 'Linux'\n        run: sudo apt-get install -y curl clang git libssl-dev make pkg-config\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set sccache env vars (non-Windows)\n        if: runner.os != 'Windows'\n        run: |\n          echo \"SCCACHE_DIR=${{ github.workspace }}/.cache/sccache\" >> $GITHUB_ENV\n          echo \"RUSTC_WRAPPER=sccache\" >> $GITHUB_ENV\n          echo \"CC=sccache clang\" >> $GITHUB_ENV\n          echo \"CXX=sccache clang++\" >> $GITHUB_ENV\n\n      - name: Set sccache env vars (Windows)\n        if: runner.os == 'Windows'\n        run: |\n          echo SCCACHE_DIR=\"C:\\.cache\\sccache\" >> $GITHUB_ENV\n          echo RUSTC_WRAPPER=sccache >> $GITHUB_ENV\n          echo CMAKE_C_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n          echo CMAKE_CXX_COMPILER_LAUNCHER=sccache >> $GITHUB_ENV\n\n      - name: Cached sccache\n        id: cached-sccache\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.SCCACHE_DIR }}\n          key: sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('**/Cargo.lock', '**/poetry.lock') }}\n          restore-keys: |\n            sccache-${{ runner.os }}-${{ github.workflow }}-${{ github.job }}-\n            sccache-${{ runner.os }}-${{ github.workflow }}-\n            sccache-${{ runner.os }}-\n\n      - name: Run sccache\n        uses: mozilla-actions/sccache-action@v0.0.7\n\n      - name: Set up Rust toolchain\n        run: |\n          rustup toolchain add --profile minimal stable --component clippy,rustfmt\n\n      - name: Set up Python environment\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Get Python version\n        run: |\n          version=$(bash scripts/python-version.sh)\n          echo \"PYTHON_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Get Poetry version from poetry-version\n        run: |\n          version=$(cat poetry-version)\n          echo \"POETRY_VERSION=$version\" >> $GITHUB_ENV\n\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n\n      - name: Install build and dev dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          poetry install --only dev --no-root\n\n      - name: Set poetry cache-dir\n        run: echo \"POETRY_CACHE_DIR=$(poetry config cache-dir)\" >> $GITHUB_ENV\n\n      - name: Cached poetry\n        id: cached-poetry\n        uses: actions/cache@v4\n        with:\n          path: ${{ env.POETRY_CACHE_DIR }}\n          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    },
    "2025-01-24T21-43-30Z": {
      "triggers": {
        "workflow_run": {
          "workflows": [
            "build"
          ],
          "branches": [
            "master"
          ],
          "types": [
            "completed"
          ]
        }
      },
      "num_jobs": 3,
      "steps_per_job": {
        "tag-release": 6,
        "publish-sdist": 6,
        "publish-wheels": 6
      },
      "line_count": 157,
      "workflow": "name: release\n\n# Release on successful completion of the `build` workflow on the `master` branch\n\non:\n  workflow_run:\n    workflows:\n      - build\n    branches: [master]\n    types:\n      - completed\n\njobs:\n  tag-release:\n    if: github.event.workflow_run.conclusion == 'success'\n    name: tag-release - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    outputs:\n      upload_url: ${{ steps.create-release.outputs.upload_url }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 2\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n          free-disk-space: \"true\"\n\n      - name: Install\n        run: poetry install\n\n      - name: Create git tag\n        uses: salsify/action-detect-and-tag-new-version@v2\n        with:\n          version-command: poetry version --short\n\n      - name: Set output\n        id: vars\n        run: |\n          echo \"TAG_NAME=v$(poetry version --short)\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=NautilusTrader $(poetry version --short) Beta\" >> $GITHUB_ENV\n          sed -n '/^#/,${p;/^---/q};w RELEASE.md' RELEASES.md\n\n      - name: Create GitHub release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ env.TAG_NAME }}\n          release_name: ${{ env.RELEASE_NAME }}\n          draft: false\n          prerelease: false\n          body_path: RELEASE.md\n\n  publish-sdist:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    name: publish-sdist - python 3.11 (ubuntu-latest)\n    runs-on: ubuntu-latest\n    env:\n      COPY_TO_SOURCE: false # Do not copy built *.so files back into source tree\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: \"3.11\"\n          free-disk-space: \"true\"\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format sdist\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/zip\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n\n  publish-wheels:\n    if: github.event.workflow_run.conclusion == 'success'\n    needs: [tag-release]\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest] # Change to ubuntu-latest when GitHub stabilizes\n        python-version: [\"3.11\", \"3.12\"]\n    defaults:\n      run:\n        shell: bash\n    name: publish-wheels - python ${{ matrix.python-version }} (${{ matrix.os }})\n    runs-on: ${{ matrix.os }}\n    env:\n      BUILD_MODE: release\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Common setup\n        uses: ./.github/actions/common-setup\n        with:\n          python-version: ${{ matrix.python-version }}\n          free-disk-space: \"true\"\n\n      - name: Install / Build\n        run: |\n          poetry install\n          poetry build --format wheel\n\n      - name: Set release output\n        id: vars\n        run: |\n          echo \"ASSET_PATH=$(find ./dist -mindepth 1 -print -quit)\" >> $GITHUB_ENV\n          cd dist\n          echo \"ASSET_NAME=$(printf '%s\\0' * | awk 'BEGIN{RS=\"\\0\"} {print;  exit}')\" >> $GITHUB_ENV\n\n      - name: Upload release asset\n        id: upload-release-asset-unix\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ needs.tag-release.outputs.upload_url }}\n          asset_path: ${{ env.ASSET_PATH }}\n          asset_name: ${{ env.ASSET_NAME }}\n          asset_content_type: application/wheel\n\n      - name: Publish to PyPI\n        env:\n          POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: poetry publish\n"
    }
  }
}