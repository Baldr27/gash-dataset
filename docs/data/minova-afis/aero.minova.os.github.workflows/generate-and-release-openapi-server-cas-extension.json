{
  "generate-and-release-openapi-server-cas-extension": {
    "2023-09-08T08-24-26Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T11-07-53Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T11-59-12Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T12-16-46Z": [
      {
        "region": {
          "startLine": 40,
          "startColumn": 9,
          "endLine": 44,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T12-20-12Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T12-26-29Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T12-32-53Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T13-07-00Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T13-18-32Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T14-34-03Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-08T14-38-07Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-12T15-30-46Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-09-12T15-35-10Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-11-30T08-47-28Z": [
      {
        "region": {
          "startLine": 33,
          "startColumn": 9,
          "endLine": 37,
          "endColumn": 7
        },
        "message": "The workflow is using a known vulnerable version ([v6.5](1)) of the [tj-actions/branch-names](2) action. Update it to [7.07](3)",
        "ruleId": "actions/vulnerable-action",
        "cwe": "CWE-1395",
        "precision": "high",
        "severity": "error",
        "security_severity": "7.5"
      }
    ],
    "2023-12-06T09-44-47Z": [],
    "2023-12-07T07-59-48Z": [],
    "2023-12-08T07-46-35Z": [],
    "2024-02-15T10-18-50Z": [],
    "2024-04-03T08-23-42Z": [],
    "2024-04-03T08-50-35Z": [],
    "2024-04-03T12-01-45Z": [],
    "2024-04-04T13-28-05Z": []
  },
  "metadata": {
    "2023-09-08T08-24-26Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 12
      },
      "line_count": 135,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          git push\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T11-07-53Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 12
      },
      "line_count": 134,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T11-59-12Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 12
      },
      "line_count": 135,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DpushChanges=false \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\" -DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T12-16-46Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 142,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DpushChanges=false \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\" -DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T12-20-12Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 149,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DpushChanges=false \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\" -DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T12-26-29Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 150,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DpushChanges=false \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\" -DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T12-32-53Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 143,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DpushChanges=false \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\" -DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T13-07-00Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 142,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 0\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T13-18-32Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 142,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T14-34-03Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 140,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-08T14-38-07Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 13
      },
      "line_count": 142,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-12T15-30-46Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 149,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-09-12T15-35-10Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-11-30T08-47-28Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6.5\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-12-06T09-44-47Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7.0.7\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v4\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-12-07T07-59-48Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v7.0.7\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2023-12-08T07-46-35Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.0\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2024-02-15T10-18-50Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v6.6.0\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2024-04-03T08-23-42Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v7.0.1\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK 21\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '21'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2024-04-03T08-50-35Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 146,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v7.0.1\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2024-04-03T12-01-45Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            },
            "java-version": {
              "description": "This is the version of Java used for release.",
              "type": "string",
              "default": "21"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 150,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n      java-version:\n        description: 'This is the version of Java used for release.'\n        type: string\n        default: '21'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v7.0.1\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: ${{inputs.java-version}}\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2024-04-04T13-28-05Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by the OpenAPI generator",
              "type": "string",
              "required": true
            },
            "openapi-config": {
              "description": "Configuration file in JSON format used by the OpenAPI generator",
              "type": "string",
              "default": "spring.config.json"
            },
            "openapi-generated-source-dir": {
              "description": "Directory for generated source code",
              "type": "string",
              "default": "out-server-spring"
            },
            "java-version": {
              "description": "This is the version of Java used for release.",
              "type": "string",
              "default": "21"
            }
          },
          "outputs": {
            "version": {
              "description": "Version tag of the OpenAPI specification",
              "value": "${{jobs.generate-server-springboot.outputs.version}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "generate-server-cas-extension": 14
      },
      "line_count": 150,
      "workflow": "name: generate OpenAPI specification, release if on 'main' branch\non:\n  workflow_call:\n    inputs:\n      openapi-specification:\n        description: 'OpenAPI specification in YAML format used by the OpenAPI generator'\n        type: string\n        required: true\n      openapi-config:\n        description: 'Configuration file in JSON format used by the OpenAPI generator'\n        type: string\n        default: 'spring.config.json'\n      openapi-generated-source-dir:\n        description: 'Directory for generated source code'\n        type: string\n        default: 'out-server-spring'\n      java-version:\n        description: 'This is the version of Java used for release.'\n        type: string\n        default: '21'\n    outputs:\n      version:\n        description: \"Version tag of the OpenAPI specification\"\n        value: ${{jobs.generate-server-springboot.outputs.version}}\n\njobs:\n  generate-server-cas-extension:\n    name: server as CAS Extension\n    runs-on: ubuntu-latest\n    outputs:\n      version: ${{steps.extract-version.outputs.version}}\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository (read-only)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        uses: actions/checkout@v4\n\n      - name: Checkout repository\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis\n          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Prepare 'tools' directory\n        run: |\n          mkdir workflows\n\n      - name: Checkout 'tools' repository\n        uses: actions/checkout@v4\n        with:\n          repository: 'minova-afis/aero.minova.os.github.workflows'\n          ref: 'main'\n          path: 'workflows'\n\n      - name: prepare GOlang\n        uses: actions/setup-go@v5\n\n      - name: Extract version from OpenAPI specification\n        id: extract-version\n        run: |\n          go mod init extract-version || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/extract-version/extract-version-from-openapi-spec.go \\\n            --openapi-spec-file=${{ inputs.openapi-specification }}\n\n      - name: SonarQube Scan '${{ steps.extract-version.outputs.version }}'\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n        with:\n          args: >\n            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}\n            -Dsonar.branch.name=${{steps.branch-name.outputs.current_branch}}\n\n      - name: generate API for server/SpringBoot\n        uses: docker://openapitools/openapi-generator-cli:v7.0.1\n        with:\n          entrypoint: /usr/local/bin/docker-entrypoint.sh\n          args: generate -i ${{ inputs.openapi-specification }} -g spring -o ${{ inputs.openapi-generated-source-dir }} -c ${{ inputs.openapi-config }}\n\n      - name: Merge generated source into template directory (CAS style)\n        id: prepare-template-directory\n        run: |\n          go mod init prepare-template-directory || /bin/true\n          go get gopkg.in/yaml.v3          \n          go run workflows/tools/prepare-template-directory/prepare-template-directory.go \\\n            --debug \\\n            --openapi-spec-file=${{ inputs.openapi-specification }} \\\n            --generator-output-dir=${{ inputs.openapi-generated-source-dir }}\n\n      - name: Set up JDK\n        uses: actions/setup-java@v4\n        with:\n          distribution: 'temurin'\n          java-version: ${{inputs.java-version}}\n          cache: 'maven'\n\n      - name: Maven build '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch != 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          mvn --batch-mode --no-transfer-progress \\\n            compile \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n\n      - name: Maven release '${{ steps.prepare-template-directory.outputs.version }}' (CAS style)\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        shell: bash\n        run: |\n          cd template-server-spring\n          git config --global user.email \"service@minova.com\"\n          git config --global user.name \"minova-worker\"\n          git add */pom.xml\n          git add pom.xml\n          git commit -m \"[maven-release-plugin] added modified POMs for release ${{ steps.prepare-template-directory.outputs.version }}\"\n          mvn --batch-mode --no-transfer-progress \\\n            -P repo-github \\\n            -DexternalSourceDir=\"${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            release:prepare release:perform \\\n            -Darguments=\"-DexternalSourceDir=${{ github.workspace }}/${{ inputs.openapi-generated-source-dir }}\" \\\n            -Dusername=$GITHUB_ACCESS_TOKEN \\\n            -Dpassword=$GITHUB_ACCESS_TOKEN \\\n            -DreleaseVersion=${{ steps.prepare-template-directory.outputs.version }} \\\n            --settings ../.github/settings.xml\n        env:\n          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}\n          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    }
  }
}