{
  "web-frontend-ci": {
    "2025-02-04T10-00-00Z": [],
    "2025-02-04T10-06-52Z": [],
    "2025-02-04T10-50-47Z": [],
    "2025-02-04T11-37-39Z": [],
    "2025-02-04T11-41-21Z": [],
    "2025-02-04T11-44-38Z": [],
    "2025-02-04T11-51-10Z": [],
    "2025-02-04T12-02-39Z": []
  },
  "metadata": {
    "2025-02-04T10-00-00Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 153,
      "workflow": "name: Ionic Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app \n          npm install --legacy-peer-deps\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies\n        run: |\n          npm ci\n\n      - name: Generate API client using Kubb\n        run: npx kubb\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2025-02-04T10-06-52Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 153,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app \n          npm install --legacy-peer-deps\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Skip commits by 'maven-release-plugin'\n        run: |\n          commit_message=$(git log -1 --pretty=%B)\n          if [[ $commit_message == *\"[maven-release-plugin]\"* ]]; then\n            echo \"Commit initiated by 'maven-release-plugin'. Skipping workflow...\"\n            exit 78\n          fi\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies\n        run: |\n          npm ci\n\n      - name: Generate API client using Kubb\n        run: npx kubb\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2025-02-04T10-50-47Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 149,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app \n          npm install --legacy-peer-deps\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download OpenAPI Specification\n        run: |\n          curl -H \"Authorization: token ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" -o openapi.yml \"https://raw.githubusercontent.com/minova-afis/aero.minova.afis.fuelportal.openapi/main/fuelportal-openapi.yml\"\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies\n        run: |\n          npm ci\n\n      - name: Generate API client using Kubb\n        run: npx kubb --spec openapi.yml\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2025-02-04T11-37-39Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 160,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies (ci fallback)\n        run: |\n          if [ -f package-lock.json ]; then\n            npm ci\n          else\n            echo \"\u26a0\ufe0f package-lock.json not found, using npm install\"\n            npm install --legacy-peer-deps\n          fi\n      \n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download OpenAPI Specification\n        run: |\n          curl -H \"Authorization: token ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" -o openapi.yml \"https://raw.githubusercontent.com/minova-afis/aero.minova.afis.fuelportal.openapi/main/fuelportal-openapi.yml\"\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies (ci fallback)\n        run: |\n          if [ -f package-lock.json ]; then\n            npm ci\n          else\n            echo \"\u26a0\ufe0f package-lock.json not found, using npm install\"\n            npm install --legacy-peer-deps\n          fi\n  \n\n      - name: Generate API client using Kubb\n        run: npx kubb --spec openapi.yml\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2025-02-04T11-41-21Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 163,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies (ci fallback)\n        run: |\n          cd app\n          if [ -f package-lock.json ]; then\n            npm ci\n          else\n            echo \"\u26a0\ufe0f package-lock.json not found, using npm install\"\n            npm install --legacy-peer-deps\n          fi\n      \n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download OpenAPI Specification\n        run: |\n          curl -H \"Authorization: token ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" -o openapi.yml \"https://raw.githubusercontent.com/minova-afis/aero.minova.afis.fuelportal.openapi/main/fuelportal-openapi.yml\"\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies (ci fallback)\n        run: |\n          cd app\n          if [ -f package-lock.json ]; then\n            npm ci\n          else\n            echo \"\u26a0\ufe0f package-lock.json not found, using npm install\"\n            npm install --legacy-peer-deps\n          fi\n  \n  \n\n      - name: Generate API client using Kubb\n        run: npx kubb --spec openapi.yml\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\n"
    },
    "2025-02-04T11-44-38Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 2,
      "steps_per_job": {
        "build": 11,
        "generate-client-typescript": 7
      },
      "line_count": 152,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app\n          npm install --legacy-peer-deps\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n\n  generate-client-typescript:\n    name: Generate TypeScript Client with Kubb\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Download OpenAPI Specification\n        run: |\n          curl -H \"Authorization: token ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" -o openapi.yml \"https://raw.githubusercontent.com/minova-afis/aero.minova.afis.fuelportal.openapi/main/fuelportal-openapi.yml\"\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n          registry-url: 'https://npm.pkg.github.com'\n\n      - name: Install dependencies\n        run: |\n          cd app\n          npm install --legacy-peer-deps\n\n      - name: Generate API client using Kubb\n        run: |\n          cd app\n          npx kubb --spec ../openapi.yml\n\n      - name: Publish NPM package\n        if: steps.branch-name.outputs.ref_branch == 'main'\n        run: |\n          cd ${{ inputs.base-package-as-path }}\n          npm publish --ignore-scripts\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}"
    },
    "2025-02-04T11-51-10Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 11
      },
      "line_count": 101,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app\n          npm install --legacy-peer-deps\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}"
    },
    "2025-02-04T12-02-39Z": {
      "triggers": {
        "workflow_call": {
          "inputs": {
            "do-containerize": {
              "description": "Should CI flow create a container image?",
              "type": "boolean",
              "default": false
            },
            "do-publish": {
              "description": "Should CI flow publish an artifact?",
              "type": "boolean",
              "default": false
            },
            "registry": {
              "description": "Container registry to be used, e.g. ghcr.io, docker.io",
              "type": "string",
              "default": "ghcr.io"
            },
            "openapi-specification": {
              "description": "OpenAPI specification in YAML format used by kubb.dev",
              "type": "string",
              "required": true
            },
            "base-package-as-path": {
              "description": "Path where the generated client should be stored",
              "type": "string",
              "required": true
            }
          },
          "outputs": {
            "container-image": {
              "description": "Fully qualified name of the prepared container image",
              "value": "${{jobs.build.outputs.container-image}}"
            }
          }
        }
      },
      "num_jobs": 1,
      "steps_per_job": {
        "build": 13
      },
      "line_count": 118,
      "workflow": "name: Web Frontend Continuous Integration\n\non:\n  workflow_call:\n    inputs:\n      do-containerize:\n        description: \"Should CI flow create a container image?\"\n        type: boolean\n        default: false\n      do-publish:\n        description: \"Should CI flow publish an artifact?\"\n        type: boolean\n        default: false\n      registry:\n        description: \"Container registry to be used, e.g. ghcr.io, docker.io\"\n        type: string\n        default: \"ghcr.io\"\n      openapi-specification:\n        description: \"OpenAPI specification in YAML format used by kubb.dev\"\n        type: string\n        required: true\n      base-package-as-path:\n        description: \"Path where the generated client should be stored\"\n        type: string\n        required: true\n    outputs:\n      container-image:\n        description: \"Fully qualified name of the prepared container image\"\n        value: ${{jobs.build.outputs.container-image}}\n\njobs:\n  build:\n    name: build, analyze, containerize ... repeat\n    runs-on: ubuntu-latest\n    outputs:\n      container-image: ${{steps.container-name-and-githash.outputs.container-image}}\n    permissions: write-all\n\n    steps:\n      - name: get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v8.0.1\n\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 \n\n      - name: Authenticate with GitHub Package Registry\n        run: |\n          echo \"@minova-afis:registry=https://npm.pkg.github.com\" >> app/.npmrc\n          echo \"//npm.pkg.github.com/:_authToken=${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" >> app/.npmrc\n\n      - name: Cache Node.js modules\n        uses: actions/cache@v4\n        with:\n          path: app/node_modules\n          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/app/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-modules-\n\n      - name: Install dependencies\n        run: |\n          cd app\n          npm install --legacy-peer-deps\n\n      - name: Download OpenAPI Specification\n        run: |\n          curl -H \"Authorization: token ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}\" -o openapi.yml \"${{ inputs.openapi-specification }}\"\n\n      - name: Generate API client using Kubb\n        run: |\n          cd app\n          npx kubb --spec ../openapi.yml\n\n      - name: Test and coverage\n        run: |\n          cd app\n          npm test --code-coverage -- --watch=false --browsers=ChromeHeadless\n\n      - uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: publish artifact\n        if: inputs.do-publish == true\n        shell: bash\n        run: |\n           npm publish\n\n      - name: get date\n        if: inputs.do-containerize == true\n        id: time\n        uses: boredland/get-time-action@2.0.0\n        with:\n          timeZone: UTC\n          format: \"YYYYMMDD\"\n\n      - name: prepare container image name\n        if: inputs.do-containerize == true\n        id: container-name-and-githash\n        shell: bash\n        run: |\n          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)\n          echo \"github_sha_short=$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n          echo \"container-image=${{inputs.registry}}/${{github.repository_owner}}/${{github.event.repository.name}}:${{ steps.time.outputs.time }}_$GITHUB_SHA_SHORT\" >> $GITHUB_OUTPUT\n\n      - name: build & push container image\n        if: inputs.do-containerize == true && steps.branch-name.outputs.ref_branch == 'main' && github.event_name != 'pull_request'\n        uses: mr-smithers-excellent/docker-build-push@v6.4\n        with:\n          image: ${{github.event.repository.name}}\n          addLatest: true\n          tags: ${{ steps.time.outputs.time }}_${{ steps.container-name-and-githash.outputs.github_sha_short }}, latest\n          dockerfile: ./app/Dockerfile\n          registry: ${{ inputs.registry }}\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n"
    }
  }
}