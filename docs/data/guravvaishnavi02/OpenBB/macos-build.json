{
  "macos-build": {
    "2023-04-12T13-44-55Z": [
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 166,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 167,
          "startColumn": 5,
          "endLine": 310,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-11T18-53-05Z": [
      {
        "region": {
          "startLine": 20,
          "startColumn": 5,
          "endLine": 165,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-14T16-52-14Z": [
      {
        "region": {
          "startLine": 19,
          "startColumn": 5,
          "endLine": 164,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 165,
          "startColumn": 5,
          "endLine": 307,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-04-18T20-20-58Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 163,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 164,
          "startColumn": 5,
          "endLine": 306,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-10T09-44-12Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 320,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2023-05-10T13-59-35Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 170,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 171,
          "startColumn": 5,
          "endLine": 320,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-02-29T17-45-19Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 150,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 151,
          "startColumn": 5,
          "endLine": 280,
          "endColumn": 27
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ],
    "2024-10-16T04-39-00Z": [
      {
        "region": {
          "startLine": 18,
          "startColumn": 5,
          "endLine": 119,
          "endColumn": 3
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      },
      {
        "region": {
          "startLine": 120,
          "startColumn": 5,
          "endLine": 218,
          "endColumn": 48
        },
        "message": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}",
        "ruleId": "actions/missing-workflow-permissions",
        "cwe": "CWE-275",
        "precision": "high",
        "severity": "warning",
        "security_severity": "5.0"
      }
    ]
  },
  "metadata": {
    "2023-04-12T13-44-55Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 19,
        "Intel-MacOs-Build": 19
      },
      "line_count": 310,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_ENABLE_QUICK_EXIT: true\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_ION: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb > result.txt\n            cat result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n# Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb > result.txt\n            cat result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"Intel MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2023-04-11T18-53-05Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 1,
      "steps_per_job": {
        "Build": 19
      },
      "line_count": 165,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_ENABLE_QUICK_EXIT: true\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_ION: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Build:\n    name: MacOS Build\n    runs-on: ${{ matrix.items.os }}\n    strategy:\n      matrix:\n        items: [\n          {os: [self-hosted, macos, ARM64], name: \"OpenBBM1.pkg\"},\n          {os: [self-hosted, macos, x64], name: \"OpenBBIntel.pkg\"}\n        ]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: build_env\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        run: |\n          pip list\n          python -m pip install -r requirements-full.txt\n          pip install -e .\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ matrix.items.name }}\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb > result.txt\n            cat result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2023-04-14T16-52-14Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 19,
        "Intel-MacOs-Build": 19
      },
      "line_count": 307,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_ION: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n# Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"Intel MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2023-04-18T20-20-58Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 19,
        "Intel-MacOs-Build": 19
      },
      "line_count": 306,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n# Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n            extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n            grep \"================================ integration test summary ================================\" result.txt -A100 | tail --bytes=2000 > failed_tests.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"Intel MacOs Build Integration test summary\"\n          path: failed_tests.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2023-05-10T09-44-12Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 20,
        "Intel-MacOs-Build": 20
      },
      "line_count": 320,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n          grep \"================================ Integration Test Summary ================================\" result.txt -A100 | tail --bytes=2000 > summary.txt\n\n      - name: Run Integration Tests Coverage Report\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t --coverage | tee result.txt\n          echo  >> summary.txt\n          sed -n '/Integration Coverage Summary/,$p' result.txt >> summary.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: summary.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n  # Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n          grep \"================================ Integration Test Summary ================================\" result.txt -A100 | tail --bytes=2000 > summary.txt\n\n      - name: Run Integration Tests Coverage Report\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t --coverage | tee result.txt\n          echo  >> summary.txt\n          sed -n '/Integration Coverage Summary/,$p' result.txt >> summary.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"Intel MacOs Build Integration test summary\"\n          path: summary.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2023-05-10T13-59-35Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 20,
        "Intel-MacOs-Build": 20
      },
      "line_count": 320,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n          grep \"================================ Integration Test Summary ================================\" result.txt -A100 | tail --bytes=2000 > summary.txt\n\n      - name: Run Integration Tests Coverage Report\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t --coverage | tee result.txt\n          echo  >> summary.txt\n          sed -n '/Integration Coverage Summary/,$p' result.txt >> summary.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"MacOs Build Integration test summary\"\n          path: summary.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n  # Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Run Integration Tests\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t -s forecast cryptocurrency reports alternative economy futures econometrics dashboards portfolio stocks/test_stocks_options_screen.openbb stocks/test_stocks_options.openbb forex etf stocks/test_stocks_fa.openbb | tee result.txt\n          grep \"================================ Integration Test Summary ================================\" result.txt -A100 | tail --bytes=2000 > summary.txt\n          echo  >> summary.txt\n\n      - name: Run Integration Tests Coverage Report\n        run: |\n          extract/OpenBBTerminal.pkg/Payload/Applications/OpenBB\\ Terminal/.OpenBB/OpenBBTerminal -t --coverage | tee result.txt\n          sed -n '/Integration Coverage Summary/,$p' result.txt >> summary.txt\n\n      - name: Upload summary to Slack\n        uses: adrey/slack-file-upload-action@master\n        with:\n          token: ${{ secrets.SLACK_API_TOKEN }}\n          initial_comment: \"MacOs Build Integration test summary\"\n          title: \"Intel MacOs Build Integration test summary\"\n          path: summary.txt\n          channel: ${{ secrets.SLACK_CHANNEL_ID }}\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2024-02-29T17-45-19Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 17,
        "Intel-MacOs-Build": 17
      },
      "line_count": 280,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n\n  # Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-9-${{ hashFiles('build/conda/conda-3-9-env.yaml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v2.2.0\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/conda-3-9-env.yaml\n          activate-environment: obb\n          auto-activate-base: false\n          use-only-tar-bz2: true # Needed for caching some reason\n\n      - name: Install Dependencies\n        shell: bash -l {0}\n        run: |\n          conda info\n          pip list\n          build/conda/cleanup_artifacts.sh\n          poetry install -E all -E installer\n          pip uninstall papermill -y\n          pip install git+https://github.com/nteract/papermill.git@main\n          pip list\n\n      - name: Build Bundle\n        run: build/pyinstaller/build4mac.sh\n        shell: bash -l {0}\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          APPLE_DEVELOPER_CERTIFICATE_ID: ${{ secrets.MACOS_INSTALLER_CODESIGN_IDENTITY }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          build/pyinstaller/macOS/build-macos.sh OpenBBTerminal 0.0.1\n          mv build/pyinstaller/macOS/target/pkg/OpenBBTerminalM1.pkg OpenBBTerminal.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Notorize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBBTerminal.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBBTerminal.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/terminal\n          rm -rf dist\n          rm -rf DMG\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBBTerminal.pkg\n\n      - name: Get contents from PkgUtil\n        run: |\n          pkgutil --expand-full OpenBBTerminal.pkg extract/\n          rm -rf OpenBBTerminal.pkg\n\n      - name: Remove OpenBB Folder\n        run: |\n          rm -rf /Users/openbb/Desktop/OpenBB\\ Terminal\n          rm -rf ~/Desktop/OPENBB-exports\n          rm -rf extract/\n"
    },
    "2024-10-16T04-39-00Z": {
      "triggers": {
        "workflow_dispatch": {}
      },
      "num_jobs": 2,
      "steps_per_job": {
        "M1-MacOs-Build": 13,
        "Intel-MacOs-Build": 13
      },
      "line_count": 218,
      "workflow": "name: MacOS Build\n\nenv:\n  OPENBB_LOG_COLLECT: false\n  OPENBB_USE_PROMPT_TOOLKIT: false\n  OPENBB_FILE_OVERWRITE: true\n  PIP_DEFAULT_TIMEOUT: 100\n  PYTHONNOUSERSITE: 1\n\non: workflow_dispatch\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  M1-MacOs-Build:\n    name: M1 MacOS Build\n    runs-on: [self-hosted, macos, ARM64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-10-${{ hashFiles('build/conda/environments/constructor.yml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v3.0.4\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/environments/constructor.yml\n          activate-environment: constructor\n          auto-activate-base: false\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_SIGNING_IDENTITY_NAME: ${{ secrets.MACOS_CODESIGN_INSTALLER_IDENTITY_NAME }}\n          MACOS_APPLICATION_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          echo \"signing_identity_name: $MACOS_INSTALLER_SIGNING_IDENTITY_NAME\" >> build/conda/installer/construct.yaml\n          echo \"notarization_identity_name: $MACOS_APPLICATION_SIGNING_IDENTITY\" >> build/conda/installer/construct.yaml\n          cd build/conda && constructor installer/. && cd ../../\n          mv build/conda/OpenBB-Platform-MacOSX-arm64.pkg OpenBB-Platform-MacOSX-arm64.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/conda/tmp\n\n      - name: Notarize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBB-Platform-MacOSX-arm64.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBB-Platform-MacOSX-arm64.pkg\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBM1.pkg\n          path: OpenBB-Platform-MacOSX-arm64.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm OpenBB-Platform-MacOSX-arm64.pkg\n\n  # Job to build the MacOS Intel version of the Terminal===================================\n  Intel-MacOs-Build:\n    name: Intel MacOS Build\n    runs-on: [self-hosted, macos, x64]\n    steps:\n      # Checkout repository main branch. this allows for the commit hashes to line up\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Git Log\n        run: git log\n      # The following commands to clear previous PATHS and restore to defaults since we have to maintain the instance ourselves\n      - name: Clean Previous Path\n        run: |\n          export PATH=\"\"\n          export PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n          echo $PATH\n      # Set up caching for conda env so that the workflow runs quickly after the first time\n      - name: Setup Conda Caching\n        uses: actions/cache@v3\n        with:\n          path: ~/conda_pkgs_dir\n          key: conda-macos-3-10-${{ hashFiles('build/conda/environments/constructor.yml') }}\n      # Set up miniconda using the environment yaml file within the repo\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@v3.0.4\n        with:\n          miniconda-version: \"latest\"\n          auto-update-conda: true\n          channels: conda-forge,defaults\n          show-channel-urls: true\n          channel-priority: flexible\n          environment-file: build/conda/environments/constructor.yml\n          activate-environment: constructor\n          auto-activate-base: false\n\n      - name: Creating Application Keychain\n        env:\n          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}\n          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}\n          MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}\n          MACOS_CODESIGN_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run:\n          | # when pushing to main, make to generate new cert, and utilize secrets to store new password, and identity\n          echo \"Ensuring Keychain with same name does not exist\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n          echo \"Decoding certificate\"\n          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12\n          echo \"Creating Keychain\"\n          security create-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Setting Default Keychain\"\n          security default-keychain -s build.keychain\n          echo \"Unlocking Keychain\"\n          security unlock-keychain -p $MACOS_KEYCHAIN_PWD build.keychain\n          echo \"Importing Keychain\"\n          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign\n          echo \"Setting Partition List\"\n          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_KEYCHAIN_PWD build.keychain\n\n      - name: Create Signed Package\n        env:\n          MACOS_INSTALLER_KEYCHAIN_PWD: ${{ secrets.MACOS_INSTALLER_KEYCHAIN_PWD }}\n          MACOS_INSTALLER_SIGNING_IDENTITY_NAME: ${{ secrets.MACOS_CODESIGN_INSTALLER_IDENTITY_NAME }}\n          MACOS_APPLICATION_SIGNING_IDENTITY: ${{ secrets.MACOS_CODESIGN_IDENTITY }}\n        run: |\n          security unlock-keychain -p $MACOS_INSTALLER_KEYCHAIN_PWD install.keychain\n          echo \"signing_identity_name: $MACOS_INSTALLER_SIGNING_IDENTITY_NAME\" >> build/conda/installer/construct.yaml\n          echo \"notarization_identity_name: $MACOS_APPLICATION_SIGNING_IDENTITY\" >> build/conda/installer/construct.yaml\n          cd build/conda && constructor installer/. && cd ../../\n          mv build/conda/OpenBB-Platform-MacOSX-x86_64.pkg OpenBB-Platform-MacOSX-x86_64.pkg\n        shell: bash -l {0}\n\n      - name: Deleting Previous Keychain\n        run: |\n          echo \"Deleting Previous Keychain to Clean Instance\"\n          rm -rf /Users/openbb/Library/Keychains/build.keychain-db\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm -rf build/conda/tmp\n\n      - name: Notarize DMG\n        env:\n          NOTARIZE_APPLE_ID: ${{ secrets.NOTARIZE_APPLE_ID }}\n          NOTARIZE_APPLE_PWD: ${{ secrets.NOTARIZE_APPLE_PWD }}\n          NOTARIZE_APPLE_TEAM_ID: ${{ secrets.NOTARIZE_APPLE_TEAM_ID }}\n        run: |\n          xcrun notarytool submit OpenBB-Platform-MacOSX-x86_64.pkg --apple-id \"$NOTARIZE_APPLE_ID\" --password \"$NOTARIZE_APPLE_PWD\" --team-id \"$NOTARIZE_APPLE_TEAM_ID\" --wait\n\n      - name: Staple\n        run: |\n          xcrun stapler staple OpenBB-Platform-MacOSX-x86_64.pkg\n\n      - name: Save Build Artifact PKG\n        uses: actions/upload-artifact@v3\n        with:\n          name: OpenBBIntel.pkg\n          path: OpenBB-Platform-MacOSX-x86_64.pkg\n\n      - name: Clean up Build Artifacts\n        run: |\n          rm OpenBB-Platform-MacOSX-x86_64.pkg\n"
    }
  }
}